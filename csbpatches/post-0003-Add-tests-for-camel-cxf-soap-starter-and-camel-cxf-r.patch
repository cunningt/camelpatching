From 18e27ba41bb1df22bf2ae220b4af4265fbcab64c Mon Sep 17 00:00:00 2001
From: Freeman Fang <freeman.fang@gmail.com>
Date: Tue, 27 Aug 2024 10:19:48 -0400
Subject: [PATCH] Add tests for camel-cxf-soap-starter and
 camel-cxf-rest-starter

Signed-off-by: Tom Cunningham <tcunning@redhat.com>
---
 .../camel-cxf-rest-starter/pom.xml            | 121 +++
 .../CxfRsProducerClientFactoryBeanTest.java   | 126 +++
 .../cxf/jaxrs/testbean/CustomException.java   |  27 +
 .../cxf/jaxrs/testbean/Customer.java          |  75 ++
 .../cxf/jaxrs/testbean/CustomerService.java   | 153 +++
 .../CustomerServiceNoAnnotations.java         |  25 +
 .../testbean/CustomerServiceResource.java     |  51 +
 .../cxf/jaxrs/testbean/EchoServiceImpl.java   |  36 +
 .../component/cxf/jaxrs/testbean/Order.java   |  67 ++
 .../component/cxf/jaxrs/testbean/Product.java |  41 +
 .../cxf/jaxrs/testbean/RestEchoService.java   |  29 +
 .../cxf/jaxrs/testbean/ServiceUtil.java       |  24 +
 .../springboot/CxfOperationExceptionTest.java | 171 +++
 .../CxfRsAsyncProducerSessionTest.java        | 232 +++++
 .../springboot/CxfRsAsyncProducerTest.java    | 635 ++++++++++++
 .../rest/springboot/CxfRsConsumerTest.java    | 416 ++++++++
 .../springboot/CxfRsConsumerWithBeanTest.java | 114 ++
 .../CxfRsGlobalSslProducerTest.java           | 270 +++++
 .../CxfRsProducerAddressOverrideTest.java     | 355 +++++++
 .../CxfRsProducerClientFactoryCacheTest.java  | 168 +++
 .../springboot/CxfRsProducerHeaderTest.java   | 244 +++++
 .../springboot/CxfRsProducerSessionTest.java  | 126 +++
 .../rest/springboot/CxfRsProducerTest.java    | 728 +++++++++++++
 .../cxf/rest/springboot/CxfRsRouterTest.java  | 305 ++++++
 .../springboot/CxfRsSslAsyncProducerTest.java | 274 +++++
 .../rest/springboot/CxfRsSslProducerTest.java | 274 +++++
 .../rest/springboot/CxfRsStreamCacheTest.java | 166 +++
 .../rest/springboot/JettyCxfRsRouterTest.java | 132 +++
 .../rest/springboot/SslBuilderCustomizer.java | 248 +++++
 .../routes/CxfRsSpringProducerSession.xml     |  53 +
 .../CxfRsSpringProducerSessionRoute.xml       |  59 ++
 .../camel-cxf-soap-starter/pom.xml            | 118 +++
 .../cxf/security/GreetingService.java         |  25 +
 .../cxf/security/GreetingServiceImpl.java     |  28 +
 .../cxf/security/jaas/SimpleLoginModule.java  | 104 ++
 .../cxf/soap/springboot/CxfBeanScopeTest.java | 285 +++++
 .../CxfComponentEnableMtomTest.java           | 145 +++
 .../springboot/CxfConsumerMessageTest.java    | 153 +++
 .../CxfConsumerPayLoadConverterTest.java      | 101 ++
 ...fConsumerPayloadFaultCauseEnabledTest.java | 159 +++
 .../springboot/CxfConsumerPayloadTest.java    | 131 +++
 .../springboot/CxfConsumerProviderTest.java   | 143 +++
 .../soap/springboot/CxfEndpointBeanTest.java  | 157 +++
 .../CxfMessageHeaderTimeoutTest.java          | 167 +++
 .../soap/springboot/CxfNonWrapperTest.java    | 142 +++
 .../soap/springboot/CxfOneWayRouteTest.java   | 219 ++++
 ...CxfPayLoadMessageXmlBindingRouterTest.java | 177 ++++
 .../CxfPayLoadSoapHeaderSpringTest.java       | 213 ++++
 .../CxfSpringCustomizedExceptionTest.java     | 146 +++
 .../soap/springboot/CxfSpringRouterTest.java  | 163 +++
 .../cxf/soap/springboot/CxfTimeoutTest.java   | 268 +++++
 .../FileToCxfMessageDataFormatTest.java       | 176 ++++
 .../cxf/soap/springboot/JaxwsTestHandler.java |  82 ++
 .../LoggingInterceptorInMessageModeTest.java  | 209 ++++
 .../soap/springboot/SpringBusFactoryTest.java |  70 ++
 .../converter/PayLoadConvertToPOJOTest.java   | 130 +++
 .../dispatch/CxfDispatchMessageTest.java      | 159 +++
 .../dispatch/CxfDispatchPayloadTest.java      | 161 +++
 .../dispatch/CxfDispatchTestSupport.java      | 122 +++
 .../dispatch/CxfSoapMessageProviderTest.java  | 188 ++++
 .../AbstractCXFGreeterRouterTest.java         | 132 +++
 .../greeterroute/CXFGreeterEnrichTest.java    | 120 +++
 .../greeterroute/CXFGreeterRouterTest.java    | 120 +++
 .../CxfGreeterCXFMessageRouterTest.java       | 113 ++
 ...GreeterCXFMessageWithoutSEIRouterTest.java | 118 +++
 .../CxfGreeterConverterRouterTest.java        | 117 +++
 .../CxfGreeterMessageCamelHttpRouterTest.java | 106 ++
 .../CxfGreeterMessageRouterTest.java          | 113 ++
 .../CxfGreeterPayLoadRouterTest.java          | 115 ++
 ...xfGreeterPayLoadWithFeatureRouterTest.java | 115 ++
 .../CxfGreeterWSDLOnlyRouterTest.java         | 113 ++
 .../CxfPayloadProviderRouterTest.java         | 186 ++++
 .../jms/CxfEndpointJMSConsumerTest.java       | 129 +++
 .../mtom/CxfJavaMtomProducerPayloadTest.java  | 104 ++
 .../CxfMtomConsumerMutipleParameterTest.java  | 152 +++
 .../mtom/CxfMtomConsumerPayloadModeTest.java  | 206 ++++
 .../springboot/mtom/CxfMtomConsumerTest.java  | 168 +++
 ...xfMtomDisabledConsumerPayloadModeTest.java | 192 ++++
 ...xfMtomDisabledProducerPayloadModeTest.java | 287 +++++
 .../mtom/CxfMtomPOJOProducerTest.java         | 192 ++++
 .../mtom/CxfMtomProducerPayloadModeTest.java  | 241 +++++
 .../mtom/CxfMtomRouterCxfMessageModeTest.java | 102 ++
 .../mtom/CxfMtomRouterPayloadMode12Test.java  | 109 ++
 .../mtom/CxfMtomRouterPayloadModeTest.java    | 214 ++++
 .../mtom/CxfMtomRouterRawModeTest.java        | 102 ++
 .../soap/springboot/mtom/ImageService.java    |  33 +
 .../soap/springboot/mtom/MtomTestHelper.java  | 102 ++
 ...umerDuplicateNamespaceStreamCacheTest.java |  70 ++
 ...merNamespaceOnEnvelopeStreamCacheTest.java |  75 ++
 ...ayloadConsumerNamespaceOnEnvelopeTest.java | 150 +++
 ...cerNamespaceOnEnvelopeStreamCacheTest.java |  84 ++
 ...ayloadProducerNamespaceOnEnvelopeTest.java | 151 +++
 .../soap/springboot/noparam/NoParamTest.java  | 124 +++
 .../headers/CxfMessageHeadersRelayTest.java   | 980 ++++++++++++++++++
 .../springxml/CXFMultiPartTest.java           | 122 +++
 .../springxml/WSSUsernameTokenHandler.java    |  85 ++
 .../springxml/WSSUsernameTokenTest.java       | 133 +++
 .../springboot/ssl/SslBuilderCustomizer.java  | 248 +++++
 .../soap/springboot/ssl/SslGlobalTest.java    | 254 +++++
 .../cxf/soap/springboot/ssl/SslTest.java      | 257 +++++
 .../undertowhandler/AccessLogHandlerTest.java | 188 ++++
 .../DisallowedMethodsHandlerTest.java         | 169 +++
 .../RequestLimitingHandlerTest.java           | 191 ++++
 .../wsa/WSAddressingPAYLOADTest.java          | 192 ++++
 .../soap/springboot/wsa/WSAddressingTest.java | 189 ++++
 .../wsdl/AbstractCxfWsdlFirstTest.java        | 169 +++
 .../soap/springboot/wsdl/CXFWsdlOnlyTest.java | 234 +++++
 .../wsdl/CxfPayloadWsdlWithoutSEITest.java    | 168 +++
 .../wsdl/CxfWsdlFirstPayloadModeTest.java     | 148 +++
 .../wsdl/CxfWsdlFirstProcessorTest.java       | 185 ++++
 .../springboot/wsdl/CxfWsdlFirstTest.java     | 132 +++
 .../cxf/soap/springboot/wsdl/OrderTest.java   | 156 +++
 .../cxf/soap/springboot/wsrm/WSRMTest.java    | 194 ++++
 .../soap/springboot/wssecurity/CxfServer.java |  35 +
 .../wssecurity/WSSecurityRouteTest.java       | 319 ++++++
 .../apache/camel/wsdl_first/PersonImpl.java   |  41 +
 .../springboot/wssecurity/client/wssec.xml    | 129 +++
 .../springboot/wssecurity/server/wssec.xml    | 151 +++
 .../test/resources/routes/MultiPartTest.xml   |  53 +
 .../test/resources/routes/multipartRoute.xml  |  27 +
 .../test/resources/routes/soap-security.xml   |  49 +
 .../src/test/resources/simple-jaas.conf       |  19 +
 122 files changed, 19758 insertions(+)
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerClientFactoryBeanTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomException.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/Customer.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerService.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerServiceNoAnnotations.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerServiceResource.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/EchoServiceImpl.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/Order.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/Product.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/RestEchoService.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/ServiceUtil.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfOperationExceptionTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsAsyncProducerSessionTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsAsyncProducerTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsConsumerTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsConsumerWithBeanTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsGlobalSslProducerTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerAddressOverrideTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerClientFactoryCacheTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerHeaderTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerSessionTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsRouterTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsSslAsyncProducerTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsSslProducerTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsStreamCacheTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/JettyCxfRsRouterTest.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/SslBuilderCustomizer.java
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/resources/routes/CxfRsSpringProducerSession.xml
 create mode 100644 components-starter/camel-cxf-rest-starter/src/test/resources/routes/CxfRsSpringProducerSessionRoute.xml
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/security/GreetingService.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/security/GreetingServiceImpl.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/security/jaas/SimpleLoginModule.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfBeanScopeTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfComponentEnableMtomTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerMessageTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerPayLoadConverterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerPayloadFaultCauseEnabledTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerPayloadTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerProviderTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfEndpointBeanTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfMessageHeaderTimeoutTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfNonWrapperTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfOneWayRouteTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfPayLoadMessageXmlBindingRouterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfPayLoadSoapHeaderSpringTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfSpringCustomizedExceptionTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfSpringRouterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfTimeoutTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/FileToCxfMessageDataFormatTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/JaxwsTestHandler.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/LoggingInterceptorInMessageModeTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/SpringBusFactoryTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/converter/PayLoadConvertToPOJOTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfDispatchMessageTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfDispatchPayloadTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfDispatchTestSupport.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfSoapMessageProviderTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/AbstractCXFGreeterRouterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CXFGreeterEnrichTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CXFGreeterRouterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterCXFMessageRouterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterCXFMessageWithoutSEIRouterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterConverterRouterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterMessageCamelHttpRouterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterMessageRouterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterPayLoadRouterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterPayLoadWithFeatureRouterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterWSDLOnlyRouterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfPayloadProviderRouterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/jms/CxfEndpointJMSConsumerTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfJavaMtomProducerPayloadTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomConsumerMutipleParameterTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomConsumerPayloadModeTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomConsumerTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomDisabledConsumerPayloadModeTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomDisabledProducerPayloadModeTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomPOJOProducerTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomProducerPayloadModeTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterCxfMessageModeTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterPayloadMode12Test.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterPayloadModeTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterRawModeTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/ImageService.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/MtomTestHelper.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadConsumerDuplicateNamespaceStreamCacheTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadConsumerNamespaceOnEnvelopeStreamCacheTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadConsumerNamespaceOnEnvelopeTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadProducerNamespaceOnEnvelopeStreamCacheTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadProducerNamespaceOnEnvelopeTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/noparam/NoParamTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/soap/headers/CxfMessageHeadersRelayTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/springxml/CXFMultiPartTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/springxml/WSSUsernameTokenHandler.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/springxml/WSSUsernameTokenTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/ssl/SslBuilderCustomizer.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/ssl/SslGlobalTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/ssl/SslTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/undertowhandler/AccessLogHandlerTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/undertowhandler/DisallowedMethodsHandlerTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/undertowhandler/RequestLimitingHandlerTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsa/WSAddressingPAYLOADTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsa/WSAddressingTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/AbstractCxfWsdlFirstTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CXFWsdlOnlyTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfPayloadWsdlWithoutSEITest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfWsdlFirstPayloadModeTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfWsdlFirstProcessorTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfWsdlFirstTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/OrderTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsrm/WSRMTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wssecurity/CxfServer.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wssecurity/WSSecurityRouteTest.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/wsdl_first/PersonImpl.java
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/resources/org/apache/camel/component/cxf/soap/springboot/wssecurity/client/wssec.xml
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/resources/org/apache/camel/component/cxf/soap/springboot/wssecurity/server/wssec.xml
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/resources/routes/MultiPartTest.xml
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/resources/routes/multipartRoute.xml
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/resources/routes/soap-security.xml
 create mode 100644 components-starter/camel-cxf-soap-starter/src/test/resources/simple-jaas.conf

diff --git a/components-starter/camel-cxf-rest-starter/pom.xml b/components-starter/camel-cxf-rest-starter/pom.xml
index 4e6c15a7771..ca4ef3f8b89 100644
--- a/components-starter/camel-cxf-rest-starter/pom.xml
+++ b/components-starter/camel-cxf-rest-starter/pom.xml
@@ -43,6 +43,88 @@
       <artifactId>cxf-spring-boot-starter-jaxrs</artifactId>
       <version>${cxf-version}</version>
     </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-cxf-spring-rest</artifactId>
+      <version>${camel-version}</version>
+      <type>test-jar</type>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel.springboot</groupId>
+      <artifactId>camel-jetty-starter</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.cxf</groupId>
+      <artifactId>cxf-rt-transports-http-undertow</artifactId>
+      <version>${cxf-version}</version>
+      <scope>test</scope>
+      <exclusions>
+        <exclusion>
+          <groupId>io.undertow</groupId>
+          <artifactId>*</artifactId>
+        </exclusion>
+      </exclusions>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-cxf-common</artifactId>
+      <version>${camel-version}</version>
+      <type>test-jar</type>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-http</artifactId>
+      <version>${camel-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel.springboot</groupId>
+      <artifactId>camel-xml-io-dsl-starter</artifactId>
+      <version>${project.version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>cglib</groupId>
+      <artifactId>cglib-nodep</artifactId>
+      <version>${cglib-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-web</artifactId>
+      <exclusions>
+        <exclusion>
+          <groupId>org.springframework.boot</groupId>
+          <artifactId>spring-boot-starter-tomcat</artifactId>
+        </exclusion>
+      </exclusions>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-undertow</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.cxf</groupId>
+      <artifactId>cxf-testutils</artifactId>
+      <version>${cxf-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.cxf</groupId>
+      <artifactId>cxf-rt-rs-extension-providers</artifactId>
+      <version>${cxf-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.codehaus.jettison</groupId>
+      <artifactId>jettison</artifactId>
+      <version>${jettison-version}</version>
+      <scope>test</scope>
+    </dependency>
     <!--START OF GENERATED CODE-->
     <dependency>
       <groupId>org.apache.camel.springboot</groupId>
@@ -50,4 +132,43 @@
     </dependency>
     <!--END OF GENERATED CODE-->
   </dependencies>
+  <build>
+    <plugins>
+      <plugin>
+        <artifactId>maven-surefire-plugin</artifactId>
+        <configuration>
+          <rerunFailingTestsCount>0</rerunFailingTestsCount>
+          <forkCount>1</forkCount>
+          <reuseForks>false</reuseForks>
+        </configuration>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <compilerArgs>
+            <arg>-parameters</arg>
+          </compilerArgs>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+  <profiles>
+    <profile>
+      <id>jdk17-build</id>
+      <activation>
+        <jdk>[17,)</jdk>
+      </activation>
+      <build>
+        <plugins>
+          <plugin>
+            <artifactId>maven-surefire-plugin</artifactId>
+            <configuration>
+              <argLine>--add-opens java.xml/com.sun.org.apache.xerces.internal.dom=ALL-UNNAMED --add-opens java.xml/com.sun.org.apache.xerces.internal.jaxp=ALL-UNNAMED --add-opens java.xml/com.sun.org.apache.xerces.internal.util=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED</argLine>
+            </configuration>
+          </plugin>
+        </plugins>
+      </build>
+    </profile>
+  </profiles>
 </project>
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerClientFactoryBeanTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerClientFactoryBeanTest.java
new file mode 100644
index 00000000000..c9067fea420
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerClientFactoryBeanTest.java
@@ -0,0 +1,126 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.jaxrs;
+
+
+import java.util.List;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxrs.testbean.ServiceUtil;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSClientFactoryBean;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.ext.logging.LoggingInInterceptor;
+import org.apache.cxf.ext.logging.LoggingOutInterceptor;
+import org.apache.cxf.interceptor.Interceptor;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsProducerClientFactoryBeanTest.class,
+        CxfRsProducerClientFactoryBeanTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfRsProducerClientFactoryBeanTest {
+
+    private int port = CXFTestSupport.getPort1();
+    
+    
+    @Autowired
+    CamelContext context;
+        
+    
+    @Test
+    public void testProducerInOutInterceptors() throws Exception {
+        CxfRsEndpoint e = context.getEndpoint(
+                "cxfrs://bean://rsClientHttpInterceptors", CxfRsEndpoint.class);
+        CxfRsProducer p = new CxfRsProducer(e);
+        CxfRsProducer.ClientFactoryBeanCache cache = p.getClientFactoryBeanCache();
+        JAXRSClientFactoryBean bean = cache.get("http://localhost:" + port + "/services/CxfRsProducerClientFactoryBeanInterceptors/");
+        List<Interceptor<?>> ins = bean.getInInterceptors();
+        assertEquals(1, ins.size());
+        assertTrue(ins.get(0) instanceof LoggingInInterceptor);
+        List<Interceptor<?>> outs = bean.getOutInterceptors();
+        assertEquals(1, outs.size());
+        assertTrue(outs.get(0) instanceof LoggingOutInterceptor);
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean("service")
+        public ServiceUtil bindToRegistry() {
+            return new ServiceUtil();
+        }
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean rsClientHttpInterceptors() {
+            SpringJAXRSClientFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            
+            afb.setAddress("/CxfRsProducerClientFactoryBeanInterceptors/");
+            afb.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            afb.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            return afb;
+        }
+        
+        
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct://http").to("cxfrs:bean:rsClientHttpInterceptors");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomException.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomException.java
new file mode 100644
index 00000000000..1b34d8d6bf5
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomException.java
@@ -0,0 +1,27 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.jaxrs.testbean;
+
+public class CustomException extends Exception {
+
+    private static final long serialVersionUID = 1L;
+
+    public CustomException(String message) {
+        super(message);
+    }
+
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/Customer.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/Customer.java
new file mode 100644
index 00000000000..f00deb6bb74
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/Customer.java
@@ -0,0 +1,75 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.jaxrs.testbean;
+
+import jakarta.xml.bind.annotation.XmlRootElement;
+
+import org.apache.camel.util.ObjectHelper;
+
+@XmlRootElement(name = "Customer")
+public class Customer {
+    private long id;
+    private String name;
+
+    public Customer() {
+    }
+
+    public Customer(long id, String name) {
+        setId(id);
+        setName(name);
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + (int) (id ^ (id >>> 32));
+        result = prime * result + ((name == null) ? 0 : name.hashCode());
+        return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (!(obj instanceof Customer)) {
+            return false;
+        }
+
+        if (this == obj) {
+            return true;
+        }
+
+        Customer other = (Customer) obj;
+        return id == other.id && ObjectHelper.equal(name, other.name);
+    }
+
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerService.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerService.java
new file mode 100644
index 00000000000..ae95e743fe7
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerService.java
@@ -0,0 +1,153 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.jaxrs.testbean;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.atomic.AtomicLong;
+
+import jakarta.ws.rs.DELETE;
+import jakarta.ws.rs.GET;
+import jakarta.ws.rs.POST;
+import jakarta.ws.rs.PUT;
+import jakarta.ws.rs.Path;
+import jakarta.ws.rs.PathParam;
+import jakarta.ws.rs.Produces;
+import jakarta.ws.rs.QueryParam;
+import jakarta.ws.rs.core.Response;
+
+import org.apache.cxf.common.util.StringUtils;
+
+@Path("/customerservice/")
+public class CustomerService {
+    private final AtomicLong currentId = new AtomicLong(123L);
+    private final Map<Long, Customer> customers = new ConcurrentHashMap<>();
+    private final Map<Long, Order> orders = new ConcurrentHashMap<>();
+
+    public CustomerService() {
+        init();
+    }
+
+    @GET
+    @Path("/customers/{id}/")
+    public Customer getCustomer(@PathParam("id") String id) {
+        long idNumber = Long.parseLong(id);
+        Customer c = customers.get(idNumber);
+        return c;
+    }
+
+    @GET
+    @Path("/customers")
+    public Customer getCustomerByQueryParam(@QueryParam("id") String id) {
+        long idNumber = Long.parseLong(id);
+        Customer c = customers.get(idNumber);
+        return c;
+    }
+
+    @GET
+    @Path("/customers/")
+    @Produces("application/xml")
+    public List<Customer> getCustomers() {
+        List<Customer> list = new ArrayList<>(customers.values());
+        return list;
+    }
+
+    @PUT
+    @Path("/customers/")
+    public Response updateCustomer(Customer customer) {
+        Customer c = customers.get(customer.getId());
+        Response r;
+        if (c != null) {
+            customers.put(customer.getId(), customer);
+            r = Response.ok().build();
+        } else {
+            r = Response.status(406).entity("Cannot find the customer!").build();
+        }
+
+        return r;
+    }
+
+    @POST
+    @Path("/customers/")
+    public Response addCustomer(Customer customer) {
+        if (StringUtils.isEmpty(customer.getName())) {
+            return Response.status(422).build();
+        }
+
+        customer.setId(currentId.incrementAndGet());
+
+        customers.put(customer.getId(), customer);
+
+        return Response.ok(customer).build();
+    }
+
+    @POST
+    @Path("/customersUniqueResponseCode/")
+    public Response addCustomerUniqueResponseCode(Customer customer) {
+        customer.setId(currentId.incrementAndGet());
+
+        customers.put(customer.getId(), customer);
+
+        return Response.status(201).entity(customer).build();
+    }
+
+    @DELETE
+    @Path("/customers/{id}/")
+    public Response deleteCustomer(@PathParam("id") String id) {
+        long idNumber = Long.parseLong(id);
+        Customer c = customers.get(idNumber);
+
+        Response r;
+        if (c != null) {
+            r = Response.ok().build();
+            customers.remove(idNumber);
+        } else {
+            r = Response.notModified().build();
+        }
+        if (idNumber == currentId.get()) {
+            currentId.decrementAndGet();
+        }
+        return r;
+    }
+
+    @Path("/orders/{orderId}/")
+    public Order getOrder(@PathParam("orderId") String orderId) {
+        long idNumber = Long.parseLong(orderId);
+        Order c = orders.get(idNumber);
+        return c;
+    }
+
+    final void init() {
+        Customer c = new Customer();
+        c.setName("John");
+        c.setId(123);
+        customers.put(c.getId(), c);
+
+        c = new Customer();
+        c.setName("Dan");
+        c.setId(113);
+        customers.put(c.getId(), c);
+
+        Order o = new Order();
+        o.setDescription("order 223");
+        o.setId(223);
+        orders.put(o.getId(), o);
+    }
+
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerServiceNoAnnotations.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerServiceNoAnnotations.java
new file mode 100644
index 00000000000..fa9a395cb96
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerServiceNoAnnotations.java
@@ -0,0 +1,25 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.jaxrs.testbean;
+
+// START SNIPPET: example
+public interface CustomerServiceNoAnnotations {
+
+    Customer getCustomer(String id);
+
+}
+// END SNIPPET: example
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerServiceResource.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerServiceResource.java
new file mode 100644
index 00000000000..652fbe70ab8
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/CustomerServiceResource.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.jaxrs.testbean;
+
+import jakarta.ws.rs.Consumes;
+import jakarta.ws.rs.GET;
+import jakarta.ws.rs.PUT;
+import jakarta.ws.rs.Path;
+import jakarta.ws.rs.PathParam;
+import jakarta.ws.rs.Produces;
+import jakarta.ws.rs.core.Response;
+
+// START SNIPPET: example
+@Path("/customerservice/")
+public interface CustomerServiceResource {
+
+    @GET
+    @Path("/customers/{id}/")
+    Customer getCustomer(@PathParam("id") String id);
+
+    @PUT
+    @Path("/customers/")
+    Response updateCustomer(Customer customer);
+
+    @Path("/{id}")
+    @PUT()
+    @Consumes({
+            "application/xml", "text/plain",
+            "application/json" })
+    @Produces({
+            "application/xml", "text/plain",
+            "application/json" })
+    Object invoke(
+            @PathParam("id") String id,
+            String payload);
+}
+// END SNIPPET: example
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/EchoServiceImpl.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/EchoServiceImpl.java
new file mode 100644
index 00000000000..6337bc04c10
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/EchoServiceImpl.java
@@ -0,0 +1,36 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.jaxrs.testbean;
+
+import jakarta.ws.rs.core.Context;
+import jakarta.ws.rs.core.Cookie;
+import jakarta.ws.rs.core.HttpHeaders;
+import jakarta.ws.rs.core.NewCookie;
+import jakarta.ws.rs.core.Response;
+
+public class EchoServiceImpl implements RestEchoService {
+    @Context
+    private HttpHeaders headers;
+
+    public Response echo(String string) {
+        Cookie fooCookie = headers.getCookies().get("foo");
+        if (fooCookie != null && "bar".equals(fooCookie.getValue())) {
+            return Response.ok("Old " + string).build();
+        }
+        return Response.ok("New " + string).cookie(new NewCookie("foo", "bar", "/", null, 1, null, -1, false)).build();
+    }
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/Order.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/Order.java
new file mode 100644
index 00000000000..4e67a93d787
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/Order.java
@@ -0,0 +1,67 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.jaxrs.testbean;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import jakarta.ws.rs.GET;
+import jakarta.ws.rs.Path;
+import jakarta.ws.rs.PathParam;
+import jakarta.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement(name = "Order")
+public class Order {
+    private long id;
+    private String description;
+    private Map<Long, Product> products = new HashMap<>();
+
+    public Order() {
+        init();
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String d) {
+        this.description = d;
+    }
+
+    @GET
+    @Path("products/{productId}/")
+    public Product getProduct(@PathParam("productId") int productId) {
+        Product p = products.get(Long.valueOf(productId));
+        return p;
+    }
+
+    final void init() {
+        Product p = new Product();
+        p.setId(323);
+        p.setDescription("product 323");
+        products.put(p.getId(), p);
+    }
+
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/Product.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/Product.java
new file mode 100644
index 00000000000..94f26b5256d
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/Product.java
@@ -0,0 +1,41 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.jaxrs.testbean;
+
+import jakarta.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement(name = "Product")
+public class Product {
+    private long id;
+    private String description;
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String d) {
+        this.description = d;
+    }
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/RestEchoService.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/RestEchoService.java
new file mode 100644
index 00000000000..be11257a64e
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/RestEchoService.java
@@ -0,0 +1,29 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.jaxrs.testbean;
+
+import jakarta.ws.rs.POST;
+import jakarta.ws.rs.Path;
+import jakarta.ws.rs.core.Response;
+
+@Path("/echoservice/")
+public interface RestEchoService {
+
+    @POST
+    @Path("/echo/")
+    Response echo(String string);
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/ServiceUtil.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/ServiceUtil.java
new file mode 100644
index 00000000000..0e2a1b85f45
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/ServiceUtil.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.jaxrs.testbean;
+
+public class ServiceUtil {
+    public String invoke(String id, String payload) {
+        return id + payload;
+    }
+
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfOperationExceptionTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfOperationExceptionTest.java
new file mode 100644
index 00000000000..4fd83b2f69f
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfOperationExceptionTest.java
@@ -0,0 +1,171 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.camel.CamelExecutionException;
+import org.apache.camel.Exchange;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxrs.testbean.Customer;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSClientFactoryBean;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSServerFactoryBean;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfOperationExceptionTest.class,
+        CxfOperationExceptionTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }
+)
+public class CxfOperationExceptionTest {
+    
+    
+
+
+    private int port = CXFTestSupport.getPort1();
+    private int backendPort = CXFTestSupport.getPort2();
+    
+     
+    private Server server;
+    
+    
+    @Autowired
+    ProducerTemplate template;
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        JAXRSServerFactoryBean sfb = new SpringJAXRSServerFactoryBean();
+        List<Object> serviceBeans = new ArrayList<Object>();
+        serviceBeans.add(new org.apache.camel.component.cxf.jaxrs.testbean.CustomerService());
+        sfb.setServiceBeans(serviceBeans);
+        sfb.setAddress("http://localhost:" + backendPort + "/services/CxfOperationExceptionTest/rest");
+        sfb.setStaticSubresourceResolution(true);
+        server = sfb.create();
+        server.start();
+    }
+
+    @AfterEach
+    public void shutdown() throws Exception {
+        if (server != null) {
+            server.stop();
+            server.destroy();
+        }
+    }
+        
+    
+    @Test
+    public void testRestServerDirectlyAddCustomer() {
+        Customer input = new Customer();
+        input.setName("Donald Duck");
+
+        // we cannot convert directly to Customer as we need camel-jaxb
+        assertThrows(CamelExecutionException.class, () -> template
+                .requestBodyAndHeader("cxfrs:http://localhost:" + port
+                                      + "/CxfOperationExceptionTest/route/customerservice/customers?throwExceptionOnFailure=true",
+                        input,
+                        Exchange.HTTP_METHOD, "POST", String.class));
+    }
+
+    @Test
+    public void testRestServerDirectlyAddCustomerWithExceptionsTurnedOff() {
+        Customer input = new Customer();
+        input.setName("Donald Duck");
+
+        // we cannot convert directly to Customer as we need camel-jaxb
+        String response = template.requestBodyAndHeader("cxfrs:bean:rsClient?throwExceptionOnFailure=false", input,
+                Exchange.HTTP_METHOD, "POST", String.class);
+
+        assertNotNull(response);
+        assertTrue(response.contains("CxfOperationExceptionTest/rest"));
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        
+                
+        @Bean
+        public AbstractJAXRSFactoryBean rsServer() {
+            SpringJAXRSServerFactoryBean afb = new SpringJAXRSServerFactoryBean();
+            
+            afb.setAddress("http://localhost:" + port + "/services/CxfOperationExceptionTest/route");
+            afb.setServiceClass(org.apache.camel.component.cxf.jaxrs.testbean.CustomerService.class);
+            afb.setLoggingFeatureEnabled(true);
+            return afb;
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean rsClient() {
+            SpringJAXRSClientFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            
+            afb.setAddress("http://localhost:" + port + "/services/CxfOperationExceptionTest/rest");
+            afb.setServiceClass(org.apache.camel.component.cxf.jaxrs.testbean.CustomerService.class);
+            afb.setLoggingFeatureEnabled(true);
+            return afb;
+        }
+        
+        
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxfrs:bean:rsServer").setHeader("CamelCxfRsUsingHttpAPI", constant(true))
+                        .to("cxfrs:bean:rsClient");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsAsyncProducerSessionTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsAsyncProducerSessionTest.java
new file mode 100644
index 00000000000..7a381d91bed
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsAsyncProducerSessionTest.java
@@ -0,0 +1,232 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Message;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSClientFactoryBean;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSServerFactoryBean;
+import org.apache.camel.http.base.cookie.BaseCookieHandler;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.spring.xml.CamelEndpointFactoryBean;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsAsyncProducerSessionTest.class,
+        CxfRsAsyncProducerSessionTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }//, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfRsAsyncProducerSessionTest {
+
+    static int port1 = CXFTestSupport.getPort1();
+    static int port2 = CXFTestSupport.getPort2();
+    
+    private Server server;
+
+    @Autowired
+    private ProducerTemplate template;
+    
+   
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        JAXRSServerFactoryBean sfb = new SpringJAXRSServerFactoryBean();
+        List<Object> serviceBeans = new ArrayList<Object>();
+        serviceBeans.add(new org.apache.camel.component.cxf.jaxrs.testbean.EchoService());
+        sfb.setServiceBeans(serviceBeans);
+        sfb.setAddress("http://localhost:" + port1 + "/services/CxfRsProducerSessionTest/");
+        sfb.setStaticSubresourceResolution(true);
+        server = sfb.create();
+        server.start();
+    }
+
+    @AfterEach
+    public void shutdown() throws Exception {
+        if (server != null) {
+            server.stop();
+            server.destroy();
+        }
+    }
+    
+    @Test
+    public void testNoSessionProxy() {
+        String response = sendMessage("direct://proxy", "World", Boolean.FALSE).getMessage().getBody(String.class);
+        assertEquals("New New World", response);
+        response = sendMessage("direct://proxy", "World", Boolean.FALSE).getMessage().getBody(String.class);
+        assertEquals("New New World", response);
+    }
+
+    @Test
+    public void testExchangeSessionProxy() {
+        String response = sendMessage("direct://proxyexchange", "World", Boolean.FALSE).getMessage().getBody(String.class);
+        assertEquals("Old New World", response);
+        response = sendMessage("direct://proxyexchange", "World", Boolean.FALSE).getMessage().getBody(String.class);
+        assertEquals("Old New World", response);
+    }
+
+    @Test
+    public void testInstanceSession() {
+        String response = sendMessage("direct://proxyinstance", "World", Boolean.FALSE).getMessage().getBody(String.class);
+        assertEquals("Old New World", response);
+        response = sendMessage("direct://proxyinstance", "World", Boolean.FALSE).getMessage().getBody(String.class);
+        assertEquals("Old Old World", response);
+        // we do the instance tests for proxy and http in one test because order
+        // matters here
+        response = sendMessage("direct://httpinstance", "World", Boolean.TRUE).getMessage().getBody(String.class);
+        assertEquals("Old Old World", response);
+    }
+
+    @Test
+    public void testNoSessionHttp() {
+        String response = sendMessage("direct://http", "World", Boolean.TRUE).getMessage().getBody(String.class);
+        assertEquals("New New World", response);
+        response = sendMessage("direct://http", "World", Boolean.TRUE).getMessage().getBody(String.class);
+        assertEquals("New New World", response);
+    }
+
+    @Test
+    public void testExchangeSessionHttp() {
+        String response = sendMessage("direct://httpexchange", "World", Boolean.TRUE).getMessage().getBody(String.class);
+        assertEquals("Old New World", response);
+        response = sendMessage("direct://httpexchange", "World", Boolean.TRUE).getMessage().getBody(String.class);
+        assertEquals("Old New World", response);
+    }
+
+    private Exchange sendMessage(String endpoint, String body, Boolean httpApi) {
+        Exchange exchange = template.send(endpoint, new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                inMessage.setHeader(CxfConstants.OPERATION_NAME, "echo");
+                inMessage.setHeader(Exchange.HTTP_METHOD, "POST");
+                inMessage.setHeader(Exchange.HTTP_PATH, "/echoservice/echo");
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, httpApi);
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, String.class);
+                inMessage.setBody(body);
+            }
+        });
+        return exchange;
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+       
+        
+        @Bean 
+        public CamelEndpointFactoryBean fromEndpoint() {
+            CamelEndpointFactoryBean jettyConsumer = new CamelEndpointFactoryBean();
+            jettyConsumer.setUri("jetty://http://localhost:" + port2 + "/CxfRsProducerSessionTest/echoservice");
+            return jettyConsumer;
+        }
+        
+                
+        @Bean
+        public AbstractJAXRSFactoryBean rsClientProxy() {
+            SpringJAXRSClientFactoryBean afb = new SpringJAXRSClientFactoryBean();
+           
+            afb.setAddress("http://localhost:" + port1
+                                   + "/services/CxfRsProducerSessionTest/");
+            //afb.setServiceClass somehow cause conflict with other test, should be bus conflict
+            afb.setServiceClass(org.apache.camel.component.cxf.jaxrs.testbean.EchoService.class);
+            afb.setLoggingFeatureEnabled(true);
+            
+            return afb;
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean rsClientHttp() {
+            SpringJAXRSClientFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            afb.setAddress("http://localhost:" + port1
+                                   + "/services/CxfRsProducerSessionTest/");
+            return afb;
+        }
+        
+        @Bean
+        public BaseCookieHandler instanceCookieHandler() {
+            return new org.apache.camel.http.base.cookie.InstanceCookieHandler();
+        }
+        
+        @Bean
+        public BaseCookieHandler exchangeCookieHandler() {
+            return new org.apache.camel.http.base.cookie.ExchangeCookieHandler();
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct://proxy").to("cxfrs:bean:rsClientProxy")
+                        .convertBodyTo(String.class).to("cxfrs:bean:rsClientProxy");
+                    from("direct://proxyinstance").to("cxfrs:bean:rsClientProxy?cookieHandler=#instanceCookieHandler")
+                        .convertBodyTo(String.class).to("cxfrs:bean:rsClientProxy?cookieHandler=#instanceCookieHandler");
+                    from("direct://proxyexchange").to("cxfrs:bean:rsClientProxy?cookieHandler=#exchangeCookieHandler")
+                        .convertBodyTo(String.class).to("cxfrs:bean:rsClientProxy?cookieHandler=#exchangeCookieHandler");
+                    from("direct://http").to("cxfrs:bean:rsClientHttp")
+                        .convertBodyTo(String.class).to("cxfrs:bean:rsClientHttp");
+                    from("direct://httpinstance").to("cxfrs:bean:rsClientHttp?cookieHandler=#instanceCookieHandler")
+                        .convertBodyTo(String.class).to("cxfrs:bean:rsClientHttp?cookieHandler=#instanceCookieHandler");
+                    from("direct://httpexchange").to("cxfrs:bean:rsClientHttp?cookieHandler=#exchangeCookieHandler")
+                        .convertBodyTo(String.class).to("cxfrs:bean:rsClientHttp?cookieHandler=#exchangeCookieHandler");
+                    
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsAsyncProducerTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsAsyncProducerTest.java
new file mode 100644
index 00000000000..ad826f77890
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsAsyncProducerTest.java
@@ -0,0 +1,635 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+import jakarta.ws.rs.core.Response;
+
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Message;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.CxfOperationException;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxrs.testbean.Customer;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSClientFactoryBean;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSServerFactoryBean;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.spring.xml.CamelEndpointFactoryBean;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.camel.util.CastUtils;
+import org.apache.cxf.Bus;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.feature.Feature;
+import org.apache.cxf.interceptor.InterceptorProvider;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.jaxrs.utils.ParameterizedCollectionType;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsAsyncProducerTest.class,
+        CxfRsAsyncProducerTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }
+)
+public class CxfRsAsyncProducerTest {
+
+    static int port1 = CXFTestSupport.getPort1();
+    static int port2 = CXFTestSupport.getPort2();
+    
+    private Server server;
+
+    @Autowired
+    private ProducerTemplate template;
+    
+    @Autowired
+    private CamelContext context;
+    
+    
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        JAXRSServerFactoryBean sfb = new SpringJAXRSServerFactoryBean();
+        List<Object> serviceBeans = new ArrayList<Object>();
+        serviceBeans.add(new org.apache.camel.component.cxf.jaxrs.testbean.CustomerService());
+        sfb.setServiceBeans(serviceBeans);
+        sfb.setAddress("http://localhost:" + port1 + "/services/CxfRsAsyncProducerTest/");
+        sfb.setStaticSubresourceResolution(true);
+        server = sfb.create();
+        server.start();
+    }
+
+    @AfterEach
+    public void shutdown() throws Exception {
+        if (server != null) {
+            server.stop();
+            server.destroy();
+        }
+    }
+    
+    @Test
+    public void testGetCustomerWithClientProxyAPI() {
+        // START SNIPPET: ProxyExample
+        Exchange exchange = template.send("direct://proxy", new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                // set the operation name 
+                inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomer");
+                // using the proxy client API
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE);
+                // set a customer header
+                inMessage.setHeader("key", "value");
+                // set the parameters , if you just have one parameter 
+                // camel will put this object into an Object[] itself
+                inMessage.setBody("123");
+            }
+        });
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+
+        assertNotNull(response, "The response should not be null");
+        assertEquals(123, response.getId(), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+        assertEquals("value", exchange.getMessage().getHeader("key"), "Get a wrong header value");
+        // END SNIPPET: ProxyExample     
+    }
+
+    @Test
+    public void testGetCustomersWithClientProxyAPI() {
+        Exchange exchange = template.send("direct://proxy", newExchange -> {
+            newExchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = newExchange.getIn();
+            // set the operation name 
+            inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomers");
+            // using the proxy client API
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE);
+            // camel will put this object into an Object[] itself
+            inMessage.setBody(null);
+        });
+
+        // get the response message 
+        List<Customer> response = CastUtils.cast((List<?>) exchange.getMessage().getBody());
+
+        assertNotNull(response, "The response should not be null");
+        assertTrue(response.contains(new Customer(113, "Dan")), "Dan is missing!");
+        assertTrue(response.contains(new Customer(123, "John")), "John is missing!");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+    }
+
+    //@Test
+    public void testGetCustomersWithHttpCentralClientAPI() {
+        Exchange exchange = template.send("direct://proxy", newExchange -> {
+            newExchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = newExchange.getIn();
+            // set the Http method
+            inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+            // set the relative path 
+            inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/");
+            // using the proxy client API
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+            // set the headers 
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, List.class);
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_GENERIC_TYPE,
+                    new ParameterizedCollectionType(Customer.class));
+            // camel will put this object into an Object[] itself
+            inMessage.setBody(null);
+        });
+
+        // get the response message 
+        List<Customer> response = CastUtils.cast((List<?>) exchange.getMessage().getBody());
+
+        assertNotNull(response, "The response should not be null");
+        assertTrue(response.contains(new Customer(113, "Dan")), "Dan is missing!");
+        assertTrue(response.contains(new Customer(123, "John")), "John is missing!");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+    }
+
+    @Test
+    public void testGetCustomerWithHttpCentralClientAPI() {
+        Exchange exchange = template.send("direct://http", newExchange -> {
+            newExchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = newExchange.getIn();
+            // using the http central client API
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+            // set the Http method
+            inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+            // set the relative path
+            inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123");
+            // Specify the response class , cxfrs will use InputStream as the response object type 
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+            // set a customer header
+            inMessage.setHeader("key", "value");
+            // since we use the Get method, so we don't need to set the message body
+            inMessage.setBody(null);
+        });
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+
+        assertNotNull(response, "The response should not be null");
+        assertEquals(123, response.getId(), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+        assertEquals("value", exchange.getMessage().getHeader("key"), "Get a wrong header value");
+    }
+
+    @Test
+    public void testSuppressGetCustomerExceptionWithCxfRsEndpoint() {
+        Exchange exchange
+                = template.send("cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName()
+                                + "/?httpClientAPI=true&throwExceptionOnFailure=false",
+                        newExchange -> {
+                            newExchange.setPattern(ExchangePattern.InOut);
+                            Message message = newExchange.getIn();
+                            // set the Http method
+                            message.setHeader(Exchange.HTTP_METHOD, "PUT");
+                            // set the relative path
+                            message.setHeader(Exchange.HTTP_PATH, "/customerservice/customers");
+                            // we just setup the customer with a wrong id
+                            Customer customer = new Customer();
+                            customer.setId(222);
+                            customer.setName("user");
+                            message.setBody(customer);
+                        });
+
+        // we should get the exception here 
+        assertNull(exchange.getException(), "Don't expect the exception here");
+        Message result = exchange.getMessage();
+        assertEquals(406, result.getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong http status code.");
+
+    }
+
+    @Test
+    public void testGetCustomerExceptionWithCxfRsEndpoint() {
+        Exchange exchange
+                = template.send(
+                        "cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName() + "/?httpClientAPI=true",
+                        newExchange -> {
+                            newExchange.setPattern(ExchangePattern.InOut);
+                            Message message = newExchange.getIn();
+                            // set the Http method
+                            message.setHeader(Exchange.HTTP_METHOD, "PUT");
+                            // set the relative path
+                            message.setHeader(Exchange.HTTP_PATH, "/customerservice/customers");
+                            // we just setup the customer with a wrong id
+                            Customer customer = new Customer();
+                            customer.setId(222);
+                            customer.setName("user");
+                            message.setBody(customer);
+                        });
+
+        // we should get the exception here 
+        assertNotNull(exchange.getException(), "Expect the exception here");
+        CxfOperationException exception = (CxfOperationException) exchange.getException();
+
+        assertEquals("Cannot find the customer!", exception.getResponseBody(), "Get a wrong response body");
+
+    }
+
+    @Test
+    public void testGetCustomerWithCxfRsEndpoint() {
+        Exchange exchange
+                = template.send(
+                        "cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName() + "/?httpClientAPI=true",
+                        newExchange -> {
+                            newExchange.setPattern(ExchangePattern.InOut);
+                            Message inMessage = newExchange.getIn();
+                            // set the Http method
+                            inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                            // set the relative path
+                            inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123");
+                            // Specify the response class , cxfrs will use InputStream as the response object type 
+                            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+                            // since we use the Get method, so we don't need to set the message body
+                            inMessage.setBody(null);
+                        });
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+        assertNotNull(response, "The response should not be null");
+        assertEquals(123, response.getId(), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+    }
+
+    @Test
+    public void testGetCustomerWithVariableReplacementAndCxfRsEndpoint() {
+        Exchange exchange = template.send(
+                "cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName() + "/?httpClientAPI=true",
+                newExchange -> {
+                    newExchange.setPattern(ExchangePattern.InOut);
+                    Message inMessage = newExchange.getIn();
+                    // set the Http method
+                    inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                    // set the relative path
+                    inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/{customerId}");
+                    // Set variables for replacement
+                    inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_VAR_VALUES, new String[] { "123" });
+                    // Specify the response class , cxfrs will use InputStream as the response object type
+                    inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+                    // since we use the Get method, so we don't need to set the message body
+                    inMessage.setBody(null);
+                });
+
+        // get the response message
+        Customer response = (Customer) exchange.getMessage().getBody();
+        assertNotNull(response, "The response should not be null");
+        assertEquals(123, response.getId(), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+    }
+
+    @Test
+    public void testAddCustomerUniqueResponseCodeWithHttpClientAPI() {
+        Exchange exchange
+                = template.send(
+                        "cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName() + "?httpClientAPI=true",
+                        newExchange -> {
+                            newExchange.setPattern(ExchangePattern.InOut);
+                            Message inMessage = newExchange.getIn();
+                            // set the Http method
+                            inMessage.setHeader(Exchange.HTTP_METHOD, "POST");
+                            // set the relative path
+                            inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customersUniqueResponseCode");
+                            // create a new customer object
+                            Customer customer = new Customer();
+                            customer.setId(9999);
+                            customer.setName("HttpClient");
+                            inMessage.setBody(customer);
+                        });
+
+        // get the response message 
+        Response response = (Response) exchange.getMessage().getBody();
+        assertNotNull(response, "The response should not be null");
+        assertNotNull(response.getEntity(), "The response entity should not be null");
+        // check the response code
+        assertEquals(201, response.getStatus(), "Get a wrong response code");
+        // check the response code from message header
+        assertEquals(201, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+    }
+
+    //@Test
+    public void testAddCustomerUniqueResponseCodeWithProxyAPI() {
+        Exchange exchange = template.send("direct://proxy", new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                // set the operation name 
+                inMessage.setHeader(CxfConstants.OPERATION_NAME, "addCustomerUniqueResponseCode");
+                // using the proxy client API
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE);
+                // set the parameters , if you just have one parameter 
+                // camel will put this object into an Object[] itself
+                Customer customer = new Customer();
+                customer.setId(8888);
+                customer.setName("ProxyAPI");
+                inMessage.setBody(customer);
+            }
+        });
+
+        // get the response message 
+        Response response = (Response) exchange.getMessage().getBody();
+        assertNotNull(response, "The response should not be null");
+        assertNotNull(response.getEntity(), "The response entity should not be null");
+        // check the response code
+        assertEquals(201, response.getStatus(), "Get a wrong response code");
+        // check the response code from message header
+        assertEquals(201, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+    }
+
+    @Test
+    public void testAddCustomerUniqueResponseCode() {
+        Exchange exchange
+                = template.send(
+                        "cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName() + "?httpClientAPI=true",
+                        new Processor() {
+                            public void process(Exchange exchange) throws Exception {
+                                exchange.setPattern(ExchangePattern.InOut);
+                                Message inMessage = exchange.getIn();
+                                // set the Http method
+                                inMessage.setHeader(Exchange.HTTP_METHOD, "POST");
+                                // set the relative path
+                                inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customersUniqueResponseCode");
+                                // put the response's entity into out message body
+                                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+                                // create a new customer object
+                                Customer customer = new Customer();
+                                customer.setId(8888);
+                                customer.setName("Willem");
+                                inMessage.setBody(customer);
+                            }
+                        });
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+        assertNotNull(response, "The response should not be null");
+        assertNotEquals(8888, response.getId(), "Get a wrong customer id");
+        assertEquals("Willem", response.getName(), "Get a wrong customer name");
+        assertEquals(201, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+    }
+
+    @Test
+    public void testProducerWithQueryParameters() {
+        Exchange exchange = template.send("cxfrs://http://localhost:" + port2 + "/" + getClass().getSimpleName()
+                                          + "/testQuery?httpClientAPI=true&q1=12&q2=13",
+                newExchange -> {
+                    newExchange.setPattern(ExchangePattern.InOut);
+                    Message inMessage = newExchange.getIn();
+                    // set the Http method
+                    inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                    inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, InputStream.class);
+                    inMessage.setBody(null);
+                });
+
+        // get the response message 
+        String response = exchange.getMessage().getBody(String.class);
+        assertNotNull(response, "The response should not be null");
+        assertEquals("q1=12&q2=13", response, "The response value is wrong");
+    }
+
+    @Test
+    public void testProducerWithQueryParametersHeader() {
+        Exchange exchange = template.send("cxfrs://http://localhost:" + port2 + "/" + getClass().getSimpleName()
+                                          + "/testQuery?httpClientAPI=true&q1=12&q2=13",
+                newExchange -> {
+                    newExchange.setPattern(ExchangePattern.InOut);
+                    Message inMessage = newExchange.getIn();
+                    // set the Http method
+                    inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                    inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, InputStream.class);
+                    // override the parameter setting from URI
+                    // START SNIPPET: QueryMapExample
+                    Map<String, String> queryMap = new LinkedHashMap<>();
+                    queryMap.put("q1", "new");
+                    queryMap.put("q2", "world");
+                    inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_QUERY_MAP, queryMap);
+                    // END SNIPPET: QueryMapExample 
+                    inMessage.setBody(null);
+                });
+
+        // get the response message 
+        String response = exchange.getMessage().getBody(String.class);
+        assertNotNull(response, "The response should not be null");
+        assertEquals("q1=new&q2=world", response, "The response value is wrong");
+    }
+
+    @Test
+    public void testRestServerDirectlyGetCustomer() {
+        // we cannot convert directly to Customer as we need camel-jaxb
+        String response = template.requestBodyAndHeader(
+                "cxfrs:http://localhost:" + port1 + "/services/" + getClass().getSimpleName() + "/customerservice/customers/123",
+                null, Exchange.HTTP_METHOD, "GET", String.class);
+
+        assertNotNull(response, "The response should not be null");
+    }
+
+    @Test
+    public void testRestServerDirectlyAddCustomer() {
+        Customer input = new Customer();
+        input.setName("Donald Duck");
+
+        // we cannot convert directly to Customer as we need camel-jaxb
+        String response = template.requestBodyAndHeader(
+                "cxfrs:http://localhost:" + port1 + "/services/" + getClass().getSimpleName() + "/customerservice/customers",
+                input, Exchange.HTTP_METHOD, "POST", String.class);
+
+        assertNotNull(response);
+        assertTrue(response.endsWith("<name>Donald Duck</name></Customer>"));
+    }
+
+    
+    
+    
+    @Test
+    public void testProducerWithFeature() {
+        TestFeature feature = context.getRegistry().lookupByNameAndType("testFeature", TestFeature.class);
+
+        template.requestBodyAndHeader("cxfrs:http://localhost:" + port1 + "/services/" + getClass().getSimpleName()
+                                      + "/customerservice/customers/123?features=#myFeatures",
+                null, Exchange.HTTP_METHOD, "GET", String.class);
+
+        assertTrue(feature.initialized, "The feature should be initialized");
+    }
+
+    @Test
+    public void testProducer422Response() {
+        Exchange exchange = template.send(
+                "cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName() + "/?httpClientAPI=true",
+                newExchange -> {
+                    newExchange.setPattern(ExchangePattern.InOut);
+                    Message message = newExchange.getIn();
+                    // Try to create a new Customer with an invalid name
+                    message.setHeader(Exchange.HTTP_METHOD, "POST");
+                    message.setHeader(Exchange.HTTP_PATH, "/customerservice/customers");
+                    Customer customer = new Customer();
+                    customer.setId(8888);
+                    customer.setName("");  // will trigger a 422 response (a common REST server validation response code)
+                    message.setBody(customer);
+                });
+
+        assertNotNull(exchange.getException(), "Expect the exception here");
+        assertTrue(exchange.getException() instanceof CxfOperationException, "Exception should be a CxfOperationException");
+
+        CxfOperationException cxfOperationException = CxfOperationException.class.cast(exchange.getException());
+
+        assertEquals(422, cxfOperationException.getStatusCode(), "CXF operation exception has correct response code");
+    }
+    
+    class TestFeature implements Feature {
+        boolean initialized;
+
+        @Override
+        public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
+            initialized = true;
+        }
+
+        @Override
+        public void initialize(Client client, Bus bus) {
+            //Do nothing
+        }
+
+        @Override
+        public void initialize(Server server, Bus bus) {
+            //Do nothing
+        }
+
+        @Override
+        public void initialize(Bus bus) {
+            //Do nothing
+        }
+    }
+    
+    class JettyProcessor implements Processor {
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            // check the query
+            Message inMessage = exchange.getIn();
+            exchange.getMessage().setBody(inMessage.getHeader(Exchange.HTTP_QUERY, String.class));
+        }
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+              
+        
+        @Bean 
+        public CamelEndpointFactoryBean fromEndpoint() {
+            CamelEndpointFactoryBean jettyConsumer = new CamelEndpointFactoryBean();
+            jettyConsumer.setUri("jetty://http://localhost:" + port2 + "/CxfRsAsyncProducerTest/testQuery");
+            return jettyConsumer;
+        }
+        
+        @Bean 
+        public Processor myProcessor() {
+            return new JettyProcessor();
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean rsClientProxy() {
+            SpringJAXRSClientFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            //afb.setBus(BusFactory.getDefaultBus());
+            afb.setAddress("http://localhost:" + port1
+                                   + "/services/CxfRsAsyncProducerTest/");
+            //afb.setServiceClass somehow cause conflict with other test, should be bus conflict
+            afb.setServiceClass(org.apache.camel.component.cxf.jaxrs.testbean.CustomerService.class);
+            afb.setLoggingFeatureEnabled(true);
+            
+            return afb;
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean rsClientHttp() {
+            SpringJAXRSClientFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            afb.setAddress("http://localhost:" + port1
+                                   + "/services/CxfRsAsyncProducerTest/");
+            return afb;
+        }
+        
+        
+        
+        @Bean
+        public Feature testFeature() {
+            return new TestFeature();
+        }
+        
+        @Bean
+        public List<Feature> myFeatures(Feature testFeature) {
+            List<Feature> features = new ArrayList<Feature>();
+            features.add(testFeature);
+            return features;
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct://proxy").to("cxfrs:bean:rsClientProxy");
+                    from("direct://http").to("cxfrs:bean:rsClientHttp");
+                    from("ref:fromEndpoint").process("myProcessor");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsConsumerTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsConsumerTest.java
new file mode 100644
index 00000000000..04e3192ed5d
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsConsumerTest.java
@@ -0,0 +1,416 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+
+import jakarta.servlet.ServletRequest;
+import jakarta.ws.rs.HttpMethod;
+import jakarta.ws.rs.WebApplicationException;
+import jakarta.ws.rs.client.ClientBuilder;
+import jakarta.ws.rs.client.Entity;
+import jakarta.ws.rs.client.WebTarget;
+import jakarta.ws.rs.core.MediaType;
+import jakarta.ws.rs.core.Request;
+import jakarta.ws.rs.core.Response;
+import jakarta.ws.rs.core.UriInfo;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.LoggingLevel;
+import org.apache.camel.Message;
+import org.apache.camel.Processor;
+import org.apache.camel.RuntimeCamelException;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxrs.testbean.Customer;
+import org.apache.camel.component.cxf.jaxrs.testbean.CustomerService;
+import org.apache.camel.component.cxf.jaxrs.testbean.ServiceUtil;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSServerFactoryBean;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hc.client5.http.classic.methods.HttpGet;
+import org.apache.hc.client5.http.classic.methods.HttpPut;
+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
+import org.apache.hc.core5.http.ContentType;
+import org.apache.hc.core5.http.io.entity.EntityUtils;
+import org.apache.hc.core5.http.io.entity.StringEntity;
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsConsumerTest.class,
+        CxfRsConsumerTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfRsConsumerTest {
+
+    private static int port = CXFTestSupport.getPort1();
+    private static final String CXT = port + "/services/CxfRsConsumerTest";
+    private static final String PUT_REQUEST = "<Customer><name>Mary</name><id>123</id></Customer>";
+        
+    
+    private void invokeGetCustomer(String uri, String expect) throws Exception {
+        HttpGet get = new HttpGet(uri);
+        get.addHeader("Accept", "application/json");
+        try (CloseableHttpClient httpclient = HttpClientBuilder.create().build();
+             CloseableHttpResponse response = httpclient.execute(get)) {
+            assertEquals(200, response.getCode());
+            assertEquals(expect, EntityUtils.toString(response.getEntity()));
+        }   
+    }
+
+    @Test
+    public void testGetCustomerInterface() throws Exception {
+        doTestGetCustomer("rest");
+    }
+
+    @Test
+    public void testGetCustomerImpl() throws Exception {
+        doTestGetCustomer("rest2");
+    }
+
+    @Test
+    public void testGetCustomerInterfaceAndModel() throws Exception {
+        doTestGetCustomer("rest3");
+    }
+
+    @Test
+    public void testGetCustomerDefaultHandlerAndModel() throws Exception {
+        doTestGetCustomer("rest4");
+    }
+
+    @Test
+    public void testEchoCustomerDefaultHandlerAndModel() throws Exception {
+        WebTarget target
+                = ClientBuilder.newClient().target("http://localhost:" + CXT + "/" + "rest4" + "/customerservice/customers");
+        Customer c = target.request(MediaType.APPLICATION_JSON).post(Entity.json(new Customer(333, "Barry")), Customer.class);
+        assertEquals(333L, c.getId());
+        assertEquals("Barry", c.getName());
+    }
+
+    @Test
+    public void testGetCustomerDefaultHandlerAndModelAndContexts() throws Exception {
+        doTestGetCustomer("rest5");
+    }
+
+    private void doTestGetCustomer(String contextUri) throws Exception {
+        invokeGetCustomer("http://localhost:" + CXT + "/" + contextUri + "/customerservice/customers/126",
+                "{\"Customer\":{\"id\":126,\"name\":\"Willem\"}}");
+        invokeGetCustomer("http://localhost:" + CXT + "/" + contextUri + "/customerservice/customers/123",
+                "customer response back!");
+        invokeGetCustomer("http://localhost:" + CXT + "/" + contextUri + "/customerservice/customers/400",
+                "The remoteAddress is 127.0.0.1");
+
+    }
+
+    @Test
+    public void testGetCustomerImplCustomLifecycle() throws Exception {
+        invokeGetCustomer("http://localhost:" + CXT + "/rest6/customerservice/customers/123",
+                "{\"Customer\":{\"id\":123,\"name\":\"John\"}}");
+    }
+
+    @Test
+    public void testGetWrongCustomer() throws Exception {
+        URL url;
+
+        url = new URL("http://localhost:" + CXT + "/rest/customerservice/customers/789");
+        try {
+            url.openStream();
+            fail("Expect to get exception here");
+        } catch (IOException exception) {
+            // expect the Internal error exception
+        }
+
+        url = new URL("http://localhost:" + CXT + "/rest/customerservice/customers/456");
+        try {
+            url.openStream();
+            fail("Expect to get exception here");
+        } catch (FileNotFoundException exception) {
+            // do nothing here
+        }
+
+        url = new URL("http://localhost:" + CXT + "/rest/customerservice/customers/234");
+        try {
+            url.openStream();
+            fail("Expect to get exception here");
+        } catch (FileNotFoundException exception) {
+            // do nothing here
+        }
+
+        url = new URL("http://localhost:" + CXT + "/rest/customerservice/customers/256");
+        try {
+            url.openStream();
+            fail("Expect to get exception here");
+        } catch (IOException exception) {
+            // expect the Internal error exception
+        }
+
+    }
+
+    @Test
+    public void testPutConsumer() throws Exception {
+        HttpPut put = new HttpPut("http://localhost:" + CXT + "/rest/customerservice/customers");
+        StringEntity entity = new StringEntity(PUT_REQUEST, ContentType.parse("text/xml; charset=ISO-8859-1"));
+        put.addHeader("test", "header1;header2");
+        put.setEntity(entity);
+
+        try (CloseableHttpClient httpclient = HttpClientBuilder.create().build();
+             CloseableHttpResponse response = httpclient.execute(put)) {
+            assertEquals(200, response.getCode());
+            assertEquals("", EntityUtils.toString(response.getEntity()));
+        }
+    }
+
+    private abstract static class AbstractTestProcessor implements Processor {
+        public void processGetCustomer(Exchange exchange) throws Exception {
+            Message inMessage = exchange.getIn();
+            String httpMethod = inMessage.getHeader(Exchange.HTTP_METHOD, String.class);
+            assertEquals("GET", httpMethod, "Get a wrong http method");
+            String path = inMessage.getHeader(Exchange.HTTP_PATH, String.class);
+            // The parameter of the invocation is stored in the body of in message
+            String id = inMessage.getBody(String.class);
+            if ("/customerservice/customers/126".equals(path)) {
+                Customer customer = new Customer();
+                customer.setId(Long.parseLong(id));
+                customer.setName("Willem");
+                // We just put the response Object into the out message body
+                exchange.getMessage().setBody(customer);
+            } else {
+                if ("/customerservice/customers/400".equals(path)) {
+                    // We return the remote client IP address this time
+                    org.apache.cxf.message.Message cxfMessage
+                            = inMessage.getHeader(CxfConstants.CAMEL_CXF_MESSAGE, org.apache.cxf.message.Message.class);
+                    ServletRequest request = (ServletRequest) cxfMessage.get("HTTP.REQUEST");
+                    // Just make sure the request object is not null
+                    assertNotNull(request, "The request object should not be null");
+                    Response r = Response.status(200).entity("The remoteAddress is 127.0.0.1").build();
+                    exchange.getMessage().setBody(r);
+                    return;
+                }
+                if ("/customerservice/customers/123".equals(path)) {
+                    // send a customer response back
+                    Response r = Response.status(200).entity("customer response back!").build();
+                    exchange.getMessage().setBody(r);
+                    return;
+                }
+                if ("/customerservice/customers/456".equals(path)) {
+                    Response r = Response.status(404).entity("Can't found the customer with uri " + path)
+                            .header("Content-Type", "text/plain").build();
+                    throw new WebApplicationException(r);
+                } else if ("/customerservice/customers/234".equals(path)) {
+                    Response r = Response.status(404).entity("Can't found the customer with uri " + path)
+                            .header("Content-Type", "text/plain").build();
+                    exchange.getMessage().setBody(r);
+                } else if ("/customerservice/customers/789".equals(path)) {
+                    exchange.getMessage().setBody("Can't found the customer with uri " + path);
+                    exchange.getMessage().setHeader(Exchange.CONTENT_TYPE, "text/plain");
+                    exchange.getMessage().setHeader(Exchange.HTTP_RESPONSE_CODE, "404");
+                } else {
+                    throw new RuntimeCamelException("Can't found the customer with uri " + path);
+                }
+            }
+        }
+
+    }
+
+    private static class TestProcessor extends AbstractTestProcessor {
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            Message inMessage = exchange.getIn();
+            // Get the operation name from in message
+            String operationName = inMessage.getHeader(CxfConstants.OPERATION_NAME, String.class);
+            if ("getCustomer".equals(operationName)) {
+                processGetCustomer(exchange);
+            } else if ("updateCustomer".equals(operationName)) {
+                assertEquals("header1;header2", inMessage.getHeader("test"), "Get a wrong customer message header");
+                String httpMethod = inMessage.getHeader(Exchange.HTTP_METHOD, String.class);
+                assertEquals("PUT", httpMethod, "Get a wrong http method");
+                Customer customer = inMessage.getBody(Customer.class);
+                assertNotNull(customer, "The customer should not be null.");
+                // Now you can do what you want on the customer object
+                assertEquals("Mary", customer.getName(), "Get a wrong customer name.");
+                // set the response back
+                exchange.getMessage().setBody(Response.ok().build());
+            }
+
+        }
+
+    }
+
+    private static class TestProcessor2 extends AbstractTestProcessor {
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            Message inMessage = exchange.getIn();
+            // Get the operation name from in message
+            String path = inMessage.getHeader(Exchange.HTTP_PATH, String.class);
+            if (path.startsWith("/customerservice/customers")) {
+                String httpMethod = inMessage.getHeader(Exchange.HTTP_METHOD, String.class);
+                if (HttpMethod.GET.equals(httpMethod)) {
+                    processGetCustomer(exchange);
+                } else if (HttpMethod.POST.equals(httpMethod)) {
+                    InputStream inBody = exchange.getIn().getBody(InputStream.class);
+                    exchange.getMessage().setBody(Response.ok(inBody).build());
+                }
+            }
+        }
+
+    }
+
+    private static class TestProcessor3 extends AbstractTestProcessor {
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            UriInfo ui = exchange.getProperty(UriInfo.class.getName(), UriInfo.class);
+            String path = ui.getPath();
+
+            Request req = exchange.getProperty(Request.class.getName(), Request.class);
+            String httpMethod = req.getMethod();
+
+            if (path.startsWith("customerservice/customers") && HttpMethod.GET.equals(httpMethod)) {
+                processGetCustomer(exchange);
+            }
+        }
+
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean("service")
+        public ServiceUtil bindToRegistry() {
+            return new ServiceUtil();
+        }
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean consumer1() {
+            SpringJAXRSServerFactoryBean afb = new SpringJAXRSServerFactoryBean();
+            
+            afb.setAddress("/CxfRsConsumerTest/rest");
+            afb.setResourceClasses(org.apache.camel.component.cxf.jaxrs.testbean.CustomerServiceResource.class);
+            
+            return afb;
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean consumer2() {
+            SpringJAXRSServerFactoryBean afb = new SpringJAXRSServerFactoryBean();
+            
+            afb.setAddress("/CxfRsConsumerTest/rest2");
+            afb.setResourceClasses(org.apache.camel.component.cxf.jaxrs.testbean.CustomerService.class);
+            
+            return afb;
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean consumer3() {
+            SpringJAXRSServerFactoryBean afb = new SpringJAXRSServerFactoryBean();
+            
+            afb.setAddress("/CxfRsConsumerTest/rest3");
+            afb.setResourceClasses(org.apache.camel.component.cxf.jaxrs.testbean.CustomerServiceNoAnnotations.class);
+            //afb.setModelRef("org/apache/camel/component/cxf/jaxrs/CustomerServiceModel.xml");
+            return afb;
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean consumer4() {
+            SpringJAXRSServerFactoryBean afb = new SpringJAXRSServerFactoryBean();
+            
+            afb.setAddress("/CxfRsConsumerTest/rest4");
+            //afb.setModelRef("classpath:/org/apache/camel/component/cxf/jaxrs/CustomerServiceDefaultHandlerModel.xml");
+            return afb;
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean consumer5() {
+            SpringJAXRSServerFactoryBean afb = new SpringJAXRSServerFactoryBean();
+            
+            afb.setAddress("/CxfRsConsumerTest/rest5");
+            //afb.setModelRef("classpath:/org/apache/camel/component/cxf/jaxrs/CustomerServiceDefaultHandlerModel.xml");
+            return afb;
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean consumer6() {
+            SpringJAXRSServerFactoryBean afb = new SpringJAXRSServerFactoryBean();
+            
+            afb.setAddress("/CxfRsConsumerTest/rest6");
+            
+            return afb;
+        }
+        
+        @Bean
+        public CustomerService myServiceBean() {
+            return new CustomerService();
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            final Processor testProcessor = new TestProcessor();
+            final Processor testProcessor2 = new TestProcessor2();
+            final Processor testProcessor3 = new TestProcessor3();
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("cxfrs:bean:consumer1").process(testProcessor);
+                    from("cxfrs:bean:consumer2").process(testProcessor);
+                    from("cxfrs:bean:consumer3?modelRef=classpath:/org/apache/camel/component/cxf/jaxrs/CustomerServiceModel.xml").process(testProcessor);
+                    from("cxfrs:bean:consumer4?modelRef=classpath:/org/apache/camel/component/cxf/jaxrs/CustomerServiceDefaultHandlerModel.xml").process(testProcessor2);
+                    from("cxfrs:bean:consumer5?propagateContexts=true&modelRef=classpath:/org/apache/camel/component/cxf/jaxrs/CustomerServiceDefaultHandlerModel.xml").process(testProcessor3);
+                    from("cxfrs:bean:consumer6?performInvocation=true&serviceBeans=#myServiceBean")
+                        .log(LoggingLevel.OFF, "dummy");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsConsumerWithBeanTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsConsumerWithBeanTest.java
new file mode 100644
index 00000000000..2c3cea52b70
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsConsumerWithBeanTest.java
@@ -0,0 +1,114 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.jaxrs.testbean.ServiceUtil;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hc.client5.http.classic.methods.HttpPut;
+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
+import org.apache.hc.core5.http.ContentType; 
+import org.apache.hc.core5.http.io.entity.EntityUtils;
+import org.apache.hc.core5.http.io.entity.StringEntity;
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsConsumerWithBeanTest.class,
+        CxfRsConsumerWithBeanTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfRsConsumerWithBeanTest {
+
+    private static final String CXT = "/CxfRsConsumerWithBeanTest";
+    private static final String CXF_RS_ENDPOINT_URI
+            = "cxfrs://" + CXT
+              + "/rest?resourceClasses=org.apache.camel.component.cxf.jaxrs.testbean.CustomerServiceResource";
+    private static final String CXF_RS_ENDPOINT_URI_2
+            = "cxfrs://" + CXT
+              + "/rest2?resourceClasses=org.apache.camel.component.cxf.jaxrs.testbean.CustomerServiceResource";
+
+    @Bean("service")
+    protected ServiceUtil bindToRegistry() {
+        return new ServiceUtil();
+    }
+    
+    @Bean
+    public ServletWebServerFactory servletWebServerFactory() {
+        return new UndertowServletWebServerFactory();
+    }
+    
+    @Test
+    public void testPutConsumer() throws Exception {
+        sendPutRequest("http://localhost:8080/services" + CXT + "/rest/customerservice/c20");
+        sendPutRequest("http://localhost:8080/services" + CXT + "/rest2/customerservice/c20");
+    }
+
+    private void sendPutRequest(String uri) throws Exception {
+        HttpPut put = new HttpPut(uri);
+        StringEntity entity = new StringEntity("string", ContentType.TEXT_PLAIN);
+        put.setEntity(entity);
+
+        try (CloseableHttpClient httpclient = HttpClientBuilder.create().build();
+             CloseableHttpResponse response = httpclient.execute(put)) {
+            assertEquals(200, response.getCode());
+            assertEquals("c20string", EntityUtils.toString(response.getEntity()));
+        }
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+
+                    from(CXF_RS_ENDPOINT_URI).to("bean://service?method=invoke(${body[0]}, ${body[1]})");
+                    from(CXF_RS_ENDPOINT_URI_2).bean(ServiceUtil.class, "invoke(${body[0]}, ${body[1]})");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsGlobalSslProducerTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsGlobalSslProducerTest.java
new file mode 100644
index 00000000000..ff640b5d826
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsGlobalSslProducerTest.java
@@ -0,0 +1,270 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Message;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.SSLContextParametersAware;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxrs.testbean.Customer;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSClientFactoryBean;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.spring.boot.CamelContextConfiguration;
+import org.apache.camel.support.jsse.KeyStoreParameters;
+import org.apache.camel.support.jsse.SSLContextParameters;
+import org.apache.camel.support.jsse.TrustManagersParameters;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.ssl.SslBundle;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.server.Ssl;
+import org.springframework.boot.web.server.WebServerSslBundle;
+import org.springframework.boot.web.server.Ssl.ClientAuth;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.transport.https.httpclient.DefaultHostnameVerifier;
+
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsGlobalSslProducerTest.class,
+        CxfRsGlobalSslProducerTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfRsGlobalSslProducerTest {
+
+    static int port = CXFTestSupport.getSslPort();
+    
+    
+    @Autowired
+    protected ProducerTemplate template;
+    
+    private Server server;
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        JAXRSServerFactoryBean sfb = new JAXRSServerFactoryBean();
+        List<Object> serviceBeans = new ArrayList<Object>();
+        serviceBeans.add(new org.apache.camel.component.cxf.jaxrs.testbean.CustomerService());
+        sfb.setServiceBeans(serviceBeans);
+        sfb.setAddress("/CxfRsProducerTest/");
+        sfb.setStaticSubresourceResolution(true);
+        server = sfb.create();
+        server.start();
+    }
+    
+    @AfterEach
+    public void shutdown() throws Exception {
+        if (server != null) {
+            server.stop();
+            server.destroy();
+        }
+    }
+
+    
+    protected void setupDestinationURL(Message inMessage) {
+        // do nothing here
+    }
+    
+    @Test
+    public void testCorrectTrustStore() {
+        Exchange exchange = template.send("direct://trust", new MyProcessor());
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+
+        assertNotNull(response, "The response should not be null");
+        assertEquals("123", String.valueOf(response.getId()), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+        assertEquals("value", exchange.getMessage().getHeader("key"), "Get a wrong header value");
+    }
+
+    @Test
+    public void testNoTrustStore() {
+        Exchange exchange = template.send("direct://noTrust", new MyProcessor());
+        assertTrue(exchange.isFailed());
+        Exception e = exchange.getException();
+        assertEquals("javax.net.ssl.SSLHandshakeException", e.getCause().getClass().getCanonicalName());
+    }
+
+    @Test
+    public void testWrongTrustStore() {
+        Exchange exchange = template.send("direct://wrongTrust", new MyProcessor());
+        assertTrue(exchange.isFailed());
+        Exception e = exchange.getException();
+        assertEquals("javax.net.ssl.SSLHandshakeException", e.getCause().getClass().getCanonicalName());
+    }
+
+    private class MyProcessor implements Processor {
+
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            exchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = exchange.getIn();
+            setupDestinationURL(inMessage);
+            // using the http central client API
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+            // set the Http method
+            inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+            // set the relative path
+            inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123");
+            // Specify the response class , cxfrs will use InputStream as the response object type
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+            // set a customer header
+            inMessage.setHeader("key", "value");
+            // since we use the Get method, so we don't need to set the message body
+            inMessage.setBody(null);
+        }
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        
+        
+        /*
+         * This is the way how to configure TLS/SSL with Bean 
+         */
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() throws UnknownHostException {
+            UndertowServletWebServerFactory undertowWebServerFactory 
+                = new UndertowServletWebServerFactory();
+            Ssl ssl = new Ssl();
+            ssl.setClientAuth(ClientAuth.NONE);
+            ssl.setKeyPassword("changeit");
+            ssl.setKeyStoreType("JKS");
+            ssl.setKeyStore("classpath:ssl/keystore-server.jks");
+            ssl.setKeyStorePassword("changeit");
+            SslBundle delegate = WebServerSslBundle.get(ssl);
+            SslBuilderCustomizer sslBuilderCustomizer = 
+                new SslBuilderCustomizer(port, InetAddress.getByName("localhost"),
+                                         ssl, delegate.getStores());
+            undertowWebServerFactory.addBuilderCustomizers(sslBuilderCustomizer);
+            return undertowWebServerFactory;
+        }
+        
+        @Bean
+        DefaultHostnameVerifier defaultHostnameVerifier() {
+            return new DefaultHostnameVerifier();
+        }
+        
+        @Bean
+        SSLContextParameters mySslContext() {
+            SSLContextParameters sslContext = new SSLContextParameters();
+            TrustManagersParameters trustManager = new TrustManagersParameters();
+            KeyStoreParameters keyStore = new KeyStoreParameters();
+            keyStore.setType("JKS");
+            keyStore.setPassword("changeit");
+            keyStore.setResource("/ssl/truststore-client.jks");
+            trustManager.setKeyStore(keyStore);
+            sslContext.setTrustManagers(trustManager);
+            return sslContext;
+        }
+        
+        @Bean
+        SSLContextParameters wrongSslContext() {
+            SSLContextParameters sslContext = new SSLContextParameters();
+            TrustManagersParameters trustManager = new TrustManagersParameters();
+            KeyStoreParameters keyStore = new KeyStoreParameters();
+            keyStore.setType("JKS");
+            keyStore.setPassword("changeit");
+            keyStore.setResource("/ssl/truststore-wrong.jks");
+            trustManager.setKeyStore(keyStore);
+            sslContext.setTrustManagers(trustManager);
+            return sslContext;
+        }
+        
+        
+        @Bean
+        AbstractJAXRSFactoryBean serviceEndpoint(SSLContextParameters mySslContext, DefaultHostnameVerifier defaultHostnameVerifier) {
+            AbstractJAXRSFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            afb.setAddress("https://localhost:" + port 
+                                   + "/services/CxfRsProducerTest/");
+            return afb;
+        }
+        
+        @Bean
+        CamelContextConfiguration contextConfiguration() {
+            return new CamelContextConfiguration() {
+                @Override
+                public void beforeApplicationStart(CamelContext context) {
+                    SSLContextParameters parameters = context.getRegistry().lookupByNameAndType("mySslContext", SSLContextParameters.class);
+                    ((SSLContextParametersAware) context.getComponent("cxfrs")).setUseGlobalSslContextParameters(true);
+                    context.setSSLContextParameters(parameters);
+                }
+
+                @Override
+                public void afterApplicationStart(CamelContext camelContext) {
+                    
+
+                }
+            };
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct://trust").to("cxfrs:bean:serviceEndpoint?hostnameVerifier=#defaultHostnameVerifier&synchronous=true");
+                    from("direct://wrongTrust").to("cxfrs:bean:serviceEndpoint?sslContextParameters=#wrongSslContext&hostnameVerifier=#defaultHostnameVerifier&synchronous=true");
+                    from("direct://noTrust").to("cxfrs:bean:serviceEndpoint?sslContextParameters=#wrongSslContext&hostnameVerifier=#defaultHostnameVerifier&synchronous=true");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerAddressOverrideTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerAddressOverrideTest.java
new file mode 100644
index 00000000000..4733d6d7466
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerAddressOverrideTest.java
@@ -0,0 +1,355 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Message;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxrs.testbean.Customer;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSClientFactoryBean;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSServerFactoryBean;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.spring.xml.CamelEndpointFactoryBean;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.Bus;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.feature.Feature;
+import org.apache.cxf.interceptor.InterceptorProvider;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsProducerAddressOverrideTest.class,
+        CxfRsProducerAddressOverrideTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }
+)
+public class CxfRsProducerAddressOverrideTest {
+
+    static int port1 = CXFTestSupport.getPort1();
+    static int port2 = CXFTestSupport.getPort2();
+    
+    private Server server;
+
+    @Autowired
+    private ProducerTemplate template;
+    
+       
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        JAXRSServerFactoryBean sfb = new SpringJAXRSServerFactoryBean();
+        List<Object> serviceBeans = new ArrayList<Object>();
+        serviceBeans.add(new org.apache.camel.component.cxf.jaxrs.testbean.CustomerService());
+        sfb.setServiceBeans(serviceBeans);
+        sfb.setAddress("http://localhost:" + port1 + "/services/CxfRsProducerAddressOverrideTest/");
+        sfb.setStaticSubresourceResolution(true);
+        server = sfb.create();
+        server.start();
+    }
+
+    @AfterEach
+    public void shutdown() throws Exception {
+        if (server != null) {
+            server.stop();
+            server.destroy();
+        }
+    }
+    
+    protected void setupDestinationURL(Message inMessage) {
+        inMessage.setHeader(Exchange.DESTINATION_OVERRIDE_URL,
+                "http://localhost:" + port1 + "/services/CxfRsProducerAddressOverrideTest");
+    }
+
+    @Test
+    public void testGetCustomerWithSyncProxyAPIByOverrideDest() {
+        Exchange exchange = template.send("direct://proxy", new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                // set the operation name 
+                inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomer");
+                // using the proxy client API
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE);
+                // set the parameters , if you just have one parameter 
+                // camel will put this object into an Object[] itself
+                inMessage.setBody("123");
+                setupDestinationURL(inMessage);
+            }
+        });
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+
+        assertNotNull(response, "The response should not be null");
+        assertEquals(123, response.getId(), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+    }
+
+    @Test
+    public void testGetCustomerWithSyncHttpAPIByOverrideDest() {
+        Exchange exchange = template.send("direct://http", new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                // using the http central client API
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+                // set the Http method
+                inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                // set the relative path
+                inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123");
+                // Specify the response class , cxfrs will use InputStream as the response object type 
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+                setupDestinationURL(inMessage);
+            }
+        });
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+
+        assertNotNull(response, "The response should not be null");
+        assertEquals(123, response.getId(), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+    }
+
+    @Test
+    public void testGetCustomerWithAsyncProxyAPIByOverrideDest() {
+        Exchange exchange = template.send("cxfrs:bean:rsClientProxy", new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                // set the operation name 
+                inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomer");
+                // using the proxy client API
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE);
+                // set the parameters , if you just have one parameter 
+                // camel will put this object into an Object[] itself
+                inMessage.setBody("123");
+                setupDestinationURL(inMessage);
+            }
+        });
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+
+        assertNotNull(response, "The response should not be null");
+        assertEquals(123, response.getId(), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+    }
+
+    @Test
+    public void testGetCustomerWithAsyncHttpAPIByOverrideDest() {
+        Exchange exchange = template.send("cxfrs:bean:rsClientHttp", new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                // using the http central client API
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+                // set the Http method
+                inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                // set the relative path
+                inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123");
+                // Specify the response class , cxfrs will use InputStream as
+                // the response object type
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+                setupDestinationURL(inMessage);
+            }
+        });
+
+        // get the response message
+        Customer response = (Customer) exchange.getMessage().getBody();
+
+        assertNotNull(response, "The response should not be null");
+        assertEquals(123, response.getId(), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+    }
+
+    @Test
+    public void testAddressMultiOverride() {
+        // First call with override url
+        Exchange exchange = template.send("direct://http",
+                new SendProcessor("http://localhost:" + port1 + "/services/CxfRsProducerAddressOverrideTest"));
+        // get the response message
+        Customer response = exchange.getMessage().getBody(Customer.class);
+        assertNotNull(response, "The response should not be null");
+
+        // Second call with override url
+        exchange = template.send("direct://http",
+                new SendProcessor("http://localhost:" + port1 + "/services/CxfRsProducerNonExistingAddressOverrideTest"));
+
+        // Third call with override url ( we reuse the first url there )
+        exchange = template.send("direct://http",
+                new SendProcessor("http://localhost:" + port1 + "/services/CxfRsProducerAddressOverrideTest"));
+        // get the response message
+        response = exchange.getMessage().getBody(Customer.class);
+        assertNotNull(response, "The response should not be null");
+    }
+
+    class SendProcessor implements Processor {
+        private String address;
+
+        public SendProcessor(String address) {
+            this.address = address;
+        }
+
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            exchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = exchange.getIn();
+
+            // using the http central client API
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+            // set the Http method
+            inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+            // set the relative path
+            inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123");
+            // Specify the response class , cxfrs will use InputStream as the
+            // response object type
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+            inMessage.setHeader(Exchange.DESTINATION_OVERRIDE_URL, address);
+        }
+    }
+    
+    class TestFeature implements Feature {
+        boolean initialized;
+
+        @Override
+        public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
+            initialized = true;
+        }
+
+        @Override
+        public void initialize(Client client, Bus bus) {
+            //Do nothing
+        }
+
+        @Override
+        public void initialize(Server server, Bus bus) {
+            //Do nothing
+        }
+
+        @Override
+        public void initialize(Bus bus) {
+            //Do nothing
+        }
+    }
+    
+    class JettyProcessor implements Processor {
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            // check the query
+            Message inMessage = exchange.getIn();
+            exchange.getMessage().setBody(inMessage.getHeader(Exchange.HTTP_QUERY, String.class));
+        }
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        
+        @Bean 
+        public CamelEndpointFactoryBean fromEndpoint() {
+            CamelEndpointFactoryBean jettyConsumer = new CamelEndpointFactoryBean();
+            jettyConsumer.setUri("jetty://http://localhost:" + port2 + "/CxfRsProducerAddressOverrideTest/testQuery");
+            return jettyConsumer;
+        }
+        
+        @Bean 
+        public Processor myProcessor() {
+            return new JettyProcessor();
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean rsClientProxy() {
+            SpringJAXRSClientFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            afb.setAddress("http://badAddress");
+            afb.setServiceClass(org.apache.camel.component.cxf.jaxrs.testbean.CustomerService.class);
+            return afb;
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean rsClientHttp() {
+            SpringJAXRSClientFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            afb.setAddress("http://badAddress");
+            return afb;
+        }
+        
+        
+        
+        @Bean
+        public Feature testFeature() {
+            return new TestFeature();
+        }
+        
+        @Bean
+        public List<Feature> myFeatures(Feature testFeature) {
+            List<Feature> features = new ArrayList<Feature>();
+            features.add(testFeature);
+            return features;
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct://proxy").to("cxfrs:bean:rsClientProxy?synchronous=true");
+                    from("direct://http").to("cxfrs:bean:rsClientHttp?synchronous=true");
+                    from("ref:fromEndpoint").process("myProcessor");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerClientFactoryCacheTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerClientFactoryCacheTest.java
new file mode 100644
index 00000000000..c5f6f301817
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerClientFactoryCacheTest.java
@@ -0,0 +1,168 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Message;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxrs.testbean.Customer;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSClientFactoryBean;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSServerFactoryBean;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsProducerClientFactoryCacheTest.class,
+        CxfRsProducerClientFactoryCacheTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfRsProducerClientFactoryCacheTest {
+    
+    private int port = CXFTestSupport.getPort1();
+     
+    private Server server;
+    
+    
+    @Autowired
+    ProducerTemplate template;
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        JAXRSServerFactoryBean sfb = new SpringJAXRSServerFactoryBean();
+        List<Object> serviceBeans = new ArrayList<Object>();
+        serviceBeans.add(new org.apache.camel.component.cxf.jaxrs.testbean.CustomerService());
+        sfb.setServiceBeans(serviceBeans);
+        sfb.setAddress("/CxfRsProducerClientFactoryCacheTest/");
+        sfb.setStaticSubresourceResolution(true);
+        server = sfb.create();
+        server.start();
+    }
+
+    @AfterEach
+    public void shutdown() throws Exception {
+        if (server != null) {
+            server.stop();
+            server.destroy();
+        }
+    }
+        
+    
+    @Test
+    public void testGetCostumerWithHttpCentralClientAPI() throws Exception {
+        doRunTest(template, port);
+    }
+
+    private void doRunTest(ProducerTemplate template, final int clientPort) {
+        Exchange exchange = template.send("direct://http", new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+                inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123");
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+                inMessage.setHeader("clientPort", clientPort);
+                inMessage.setBody(null);
+            }
+        });
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+
+        assertNotNull(response, "The response should not be null");
+        assertEquals("123", String.valueOf(response.getId()), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+    }
+
+
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+        @Bean
+        public AbstractJAXRSFactoryBean rsClient() {
+            SpringJAXRSClientFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            
+            afb.setAddress("http://localhost:" + port + "/services/CxfRsProducerClientFactoryCacheTest/");
+            return afb;
+        }
+        
+        
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct://http")
+                        .to("cxfrs:bean:rsClient");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerHeaderTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerHeaderTest.java
new file mode 100644
index 00000000000..0ec4a575e43
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerHeaderTest.java
@@ -0,0 +1,244 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.List;
+
+import jakarta.ws.rs.core.Response;
+
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Message;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.util.CxfUtils;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.spring.xml.CamelEndpointFactoryBean;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsProducerHeaderTest.class,
+        CxfRsProducerHeaderTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfRsProducerHeaderTest {
+
+    static int port2 = CXFTestSupport.getPort2();
+    static int port3 = CXFTestSupport.getPort("CxfRsProducerHeaderTest.1");
+
+    private static final Object RESPONSE = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>"
+                                           + "<Customer><id>123</id><name>John</name></Customer>";
+
+    @Autowired
+    protected CamelContext camelContext;
+    
+    private Server server;
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        JAXRSServerFactoryBean sfb = new JAXRSServerFactoryBean();
+        List<Object> serviceBeans = new ArrayList<Object>();
+        serviceBeans.add(new org.apache.camel.component.cxf.jaxrs.testbean.CustomerService());
+        sfb.setServiceBeans(serviceBeans);
+        sfb.setAddress("/CxfRsProducerHeaderTest/");
+        sfb.setStaticSubresourceResolution(true);
+        server = sfb.create();
+        server.start();
+    }
+
+    @AfterEach
+    public void shutdown() throws Exception {
+        if (server != null) {
+            server.stop();
+            server.destroy();
+        }
+    }
+
+    @Test
+    public void testInvokeThatDoesNotInvolveHeaders() throws Exception {
+        Exchange exchange = camelContext.createProducerTemplate().send("direct://http", new Processor() {
+
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+                inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123");
+                inMessage.setBody(null);
+            }
+
+        });
+
+        // verify the out message is a Response object by default
+        Response response = (Response) exchange.getMessage().getBody();
+        assertNotNull(response, "The response should not be null");
+        assertEquals(200, response.getStatus());
+
+        // test converter (from Response to InputStream)
+        assertEquals(RESPONSE, CxfUtils.getStringFromInputStream(exchange.getMessage().getBody(InputStream.class)));
+    }
+
+    @Test
+    public void testHeaderFilteringAndPropagation() throws Exception {
+        Exchange exchange = camelContext.createProducerTemplate().send("direct://http2", new Processor() {
+
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+                inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                inMessage.setHeader(Exchange.HTTP_PATH, "/CxfRsProducerHeaderTest/customerservice/customers/123");
+                inMessage.setHeader("Accept", "application/json");
+                inMessage.setHeader("my-user-defined-header", "my-value");
+                inMessage.setBody(null);
+            }
+
+        });
+
+        // get the response message 
+        Response response = (Response) exchange.getMessage().getBody();
+
+        // check the response code on the Response object as set by the "HttpProcess"
+        assertEquals(200, response.getStatus());
+
+        // get out message
+        Message outMessage = exchange.getMessage();
+
+        // verify the content-type header sent by the "HttpProcess"
+        assertEquals("text/xml", outMessage.getHeader(Exchange.CONTENT_TYPE));
+
+        // check the user defined header echoed by the "HttpProcess"
+        assertEquals("my-value", outMessage.getHeader("echo-my-user-defined-header"));
+
+        // check the Accept header echoed by the "HttpProcess"
+        assertEquals("application/json", outMessage.getHeader("echo-accept"));
+
+        // make sure the HttpProcess have not seen CxfConstants.CAMEL_CXF_RS_USING_HTTP_API
+        assertNull(outMessage.getHeader("failed-header-using-http-api"));
+
+        // make sure response code has been set in out header
+        assertEquals(Integer.valueOf(200), outMessage.getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class));
+    }
+
+    public static class HttpProcessor implements Processor {
+
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            Message in = exchange.getIn();
+            Message out = exchange.getMessage();
+
+            if (in.getHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API) != null) {
+                // this should have been filtered
+                out.setHeader("failed-header-using-http-api", CxfConstants.CAMEL_CXF_RS_USING_HTTP_API);
+            }
+
+            out.setHeader("echo-accept", in.getHeader("Accept"));
+            out.setHeader("echo-my-user-defined-header", in.getHeader("my-user-defined-header"));
+
+            exchange.getMessage().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
+            exchange.getMessage().setHeader(Exchange.CONTENT_TYPE, "text/xml");
+
+        }
+
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public HttpProcessor httpProcessor() {
+            return new HttpProcessor();
+        }
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port2);
+        }
+        
+        @Bean 
+        public CamelEndpointFactoryBean to1() {
+            CamelEndpointFactoryBean cxfRsProducer = new CamelEndpointFactoryBean();
+            cxfRsProducer.setUri("cxfrs://http://localhost:" + port2 + "/services/CxfRsProducerHeaderTest/");
+            return cxfRsProducer;
+        }
+        
+        @Bean 
+        public CamelEndpointFactoryBean to2() {
+            CamelEndpointFactoryBean cxfRsProducer = new CamelEndpointFactoryBean();
+            cxfRsProducer.setUri("cxfrs://http://localhost:" + port3 + "/CxfRsProducerHeaderTest");
+            return cxfRsProducer;
+        }
+        
+        @Bean 
+        public CamelEndpointFactoryBean from1() {
+            CamelEndpointFactoryBean jettyConsumer = new CamelEndpointFactoryBean();
+            jettyConsumer.setUri("jetty://http://localhost:" + port3 + "/CxfRsProducerHeaderTest?matchOnUriPrefix=true");
+            return jettyConsumer;
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct://http").to("ref:to1");
+                    from("direct://http2").to("ref:to2");
+                    from("ref:from1").process("httpProcessor");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerSessionTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerSessionTest.java
new file mode 100644
index 00000000000..e01db825e4b
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerSessionTest.java
@@ -0,0 +1,126 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Message;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ImportResource;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfRsProducerSessionTest.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
+    properties = {
+              "camel.springboot.routes-include-pattern=file:src/test/resources/routes/CxfRsSpringProducerSessionRoute.xml"}
+)
+    
+@ImportResource({
+                 "classpath:routes/CxfRsSpringProducerSession.xml"
+})
+public class CxfRsProducerSessionTest {
+
+    @Bean
+    public ServletWebServerFactory servletWebServerFactory() {
+        return new UndertowServletWebServerFactory();
+    }
+    
+    @Test
+    public void testNoSessionProxy() {
+        String response = sendMessage("direct://proxy", "World", Boolean.FALSE).getMessage().getBody(String.class);
+        assertEquals("New New World", response);
+        response = sendMessage("direct://proxy", "World", Boolean.FALSE).getMessage().getBody(String.class);
+        assertEquals("New New World", response);
+    }
+
+    @Test
+    public void testExchangeSessionProxy() {
+        String response = sendMessage("direct://proxyexchange", "World", Boolean.FALSE).getMessage().getBody(String.class);
+        assertEquals("Old New World", response);
+        response = sendMessage("direct://proxyexchange", "World", Boolean.FALSE).getMessage().getBody(String.class);
+        assertEquals("Old New World", response);
+    }
+
+    @Test
+    public void testInstanceSession() {
+        String response = sendMessage("direct://proxyinstance", "World", Boolean.FALSE).getMessage().getBody(String.class);
+        assertEquals("Old New World", response);
+        response = sendMessage("direct://proxyinstance", "World", Boolean.FALSE).getMessage().getBody(String.class);
+        assertEquals("Old Old World", response);
+        // we do the instance tests for proxy and http in one test because order
+        // matters here
+        response = sendMessage("direct://httpinstance", "World", Boolean.TRUE).getMessage().getBody(String.class);
+        assertEquals("Old Old World", response);
+    }
+
+    @Test
+    public void testNoSessionHttp() {
+        String response = sendMessage("direct://http", "World", Boolean.TRUE).getMessage().getBody(String.class);
+        assertEquals("New New World", response);
+        response = sendMessage("direct://http", "World", Boolean.TRUE).getMessage().getBody(String.class);
+        assertEquals("New New World", response);
+    }
+
+    @Test
+    public void testExchangeSessionHttp() {
+        String response = sendMessage("direct://httpexchange", "World", Boolean.TRUE).getMessage().getBody(String.class);
+        assertEquals("Old New World", response);
+        response = sendMessage("direct://httpexchange", "World", Boolean.TRUE).getMessage().getBody(String.class);
+        assertEquals("Old New World", response);
+    }
+
+    @Autowired
+    ProducerTemplate template;
+    
+    private Exchange sendMessage(String endpoint, String body, Boolean httpApi) {
+        Exchange exchange = template.send(endpoint, new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                inMessage.setHeader(CxfConstants.OPERATION_NAME, "echo");
+                inMessage.setHeader(Exchange.HTTP_METHOD, "POST");
+                inMessage.setHeader(Exchange.HTTP_PATH, "/echoservice/echo");
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, httpApi);
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, String.class);
+                inMessage.setBody(body);
+            }
+        });
+        return exchange;
+    }
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerTest.java
new file mode 100644
index 00000000000..77360c2a8e9
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsProducerTest.java
@@ -0,0 +1,728 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+import jakarta.ws.rs.core.Response;
+
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Message;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.CxfOperationException;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxrs.testbean.Customer;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSClientFactoryBean;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSServerFactoryBean;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.spring.xml.CamelEndpointFactoryBean;
+
+import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.camel.util.CastUtils;
+import org.apache.cxf.Bus;
+import org.apache.cxf.BusFactory;
+import org.apache.cxf.bus.spring.SpringBusFactory;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.feature.Feature;
+import org.apache.cxf.interceptor.InterceptorProvider;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.jaxrs.model.AbstractResourceInfo;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.testutil.common.AbstractServerTestServerBase;
+import org.apache.cxf.testutil.common.ServerLauncher;
+
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsProducerTest.class,
+        CxfRsProducerTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }
+)
+public class CxfRsProducerTest {
+
+    static int port1 = CXFTestSupport.getPort1();
+    static int port2 = CXFTestSupport.getPort2();
+    
+    
+    private static List<ServerLauncher> launchers = new ArrayList<>();
+    
+    public static class JettyProcessor implements Processor {
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            // check the query
+            Message inMessage = exchange.getIn();
+            exchange.getMessage().setBody(inMessage.getHeader(Exchange.HTTP_QUERY, String.class));
+        }
+    }
+    
+    
+    @Autowired
+    private ProducerTemplate template;
+    
+    @Autowired
+    private CamelContext context;
+    
+    public static class ExternalServer extends AbstractServerTestServerBase {
+        @Override
+        protected Server createServer(Bus bus) throws Exception {
+            JAXRSServerFactoryBean sfb = new SpringJAXRSServerFactoryBean();
+            List<Object> serviceBeans = new ArrayList<Object>();
+            serviceBeans.add(new org.apache.camel.component.cxf.jaxrs.testbean.CustomerService());
+            sfb.setServiceBeans(serviceBeans);
+            sfb.setAddress("http://localhost:" +port1 + "/services/CxfRsProducerTest/");
+            sfb.setStaticSubresourceResolution(true);
+            return sfb.create();
+        }
+
+        public static void main(String[] args) throws Exception {
+            new ExternalServer().start();
+        }
+    }
+    
+    /**
+     * Starts the server inProcess or out of process depending on the param
+     */
+    public static boolean launchServer(Class<?> clz, boolean inProcess) {
+        boolean ok = false;
+        try {
+            ServerLauncher sl = new ServerLauncher(clz.getName(), inProcess);
+            ok = sl.launchServer();
+            assertTrue(ok, "server failed to launch");
+            launchers.add(0, sl);
+        } catch (IOException ex) {
+            ex.printStackTrace();
+            fail("failed to launch server " + clz);
+        }
+
+        return ok;
+    }
+    
+    @BeforeAll
+    public static void setUp() throws Exception {
+        AbstractResourceInfo.clearAllMaps();
+
+        assertTrue(launchServer(ExternalServer.class, true), "server did not launch correctly");
+    }
+
+    @AfterAll
+    public static void stopAllServers() throws Exception {
+        boolean passed = true;
+        for (ServerLauncher sl : launchers) {
+            try {
+                sl.signalStop();
+            } catch (IOException ex) {
+                ex.printStackTrace();
+            }
+        }
+        for (ServerLauncher sl : launchers) {
+            try {
+                passed = passed && sl.stopServer();
+            } catch (IOException ex) {
+                ex.printStackTrace();
+            }
+        }
+        launchers.clear();
+        System.gc();
+        assertTrue(passed, "server failed");
+    }
+    
+    
+    @Test
+    public void testGetCustomerWithClientProxyAPI() {
+        // START SNIPPET: ProxyExample
+        Exchange exchange = template.send("direct://proxy", new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                // set the operation name 
+                inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomer");
+                // using the proxy client API
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE);
+                // set a customer header
+                inMessage.setHeader("key", "value");
+                // set the parameters , if you just have one parameter 
+                // camel will put this object into an Object[] itself
+                inMessage.setBody("123");
+            }
+        });
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+
+        assertNotNull(response, "The response should not be null");
+        assertEquals(123, response.getId(), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+        assertEquals("value", exchange.getMessage().getHeader("key"), "Get a wrong header value");
+        // END SNIPPET: ProxyExample     
+    }
+
+    @Test
+    public void testGetCustomersWithClientProxyAPI() {
+        Exchange exchange = template.send("direct://proxy", new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                // set the operation name 
+                inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomers");
+                // using the proxy client API
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE);
+                // set the parameters , if you just have one parameter 
+                // camel will put this object into an Object[] itself
+                inMessage.setBody(null);
+            }
+        });
+
+        // get the response message 
+        List<Customer> response = CastUtils.cast((List<?>) exchange.getMessage().getBody());
+
+        assertNotNull(response, "The response should not be null");
+        assertTrue(response.contains(new Customer(113, "Dan")), "Dan is missing!");
+        assertTrue(response.contains(new Customer(123, "John")), "John is missing!");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+    }
+
+    @Test
+    public void testGetCustomerWithHttpCentralClientAPI() {
+        // START SNIPPET: HttpExample
+        Exchange exchange = template.send("direct://http", new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                // using the http central client API
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+                // set the Http method
+                inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                // set the relative path
+                inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123");
+                // Specify the response class , cxfrs will use InputStream as the response object type 
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+                // set a customer header
+                inMessage.setHeader("key", "value");
+                // since we use the Get method, so we don't need to set the message body
+                inMessage.setBody(null);
+            }
+        });
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+
+        assertNotNull(response, "The response should not be null");
+        assertEquals(123, response.getId(), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+        assertEquals("value", exchange.getMessage().getHeader("key"), "Get a wrong header value");
+        // END SNIPPET: HttpExample 
+    }
+
+    @Test
+    public void testSuppressGetCustomerExceptionWithCxfRsEndpoint() {
+        Exchange exchange
+                = template.send("cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName()
+                                + "/?httpClientAPI=true&throwExceptionOnFailure=false&synchronous=true",
+                        new Processor() {
+                            public void process(Exchange exchange) throws Exception {
+                                exchange.setPattern(ExchangePattern.InOut);
+                                Message message = exchange.getIn();
+                                // set the Http method
+                                message.setHeader(Exchange.HTTP_METHOD, "PUT");
+                                // set the relative path
+                                message.setHeader(Exchange.HTTP_PATH, "/customerservice/customers");
+                                // we just setup the customer with a wrong id
+                                Customer customer = new Customer();
+                                customer.setId(222);
+                                customer.setName("user");
+                                message.setBody(customer);
+                            }
+                        });
+
+        // we should get the exception here 
+        assertNull(exchange.getException(), "Don't expect the exception here");
+        Message result = exchange.getMessage();
+        assertEquals(406, result.getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong http status code.");
+
+    }
+
+    @Test
+    public void testGetCustomerExceptionWithCxfRsEndpoint() {
+        Exchange exchange
+                = template.send("cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName()
+                                + "/?httpClientAPI=true&synchronous=true",
+                        new Processor() {
+                            public void process(Exchange exchange) throws Exception {
+                                exchange.setPattern(ExchangePattern.InOut);
+                                Message message = exchange.getIn();
+                                // set the Http method
+                                message.setHeader(Exchange.HTTP_METHOD, "PUT");
+                                // set the relative path
+                                message.setHeader(Exchange.HTTP_PATH, "/customerservice/customers");
+                                // we just setup the customer with a wrong id
+                                Customer customer = new Customer();
+                                customer.setId(222);
+                                customer.setName("user");
+                                message.setBody(customer);
+                            }
+                        });
+
+        // we should get the exception here 
+        assertNotNull(exchange.getException(), "Expect the exception here");
+        CxfOperationException exception = (CxfOperationException) exchange.getException();
+
+        assertEquals("Cannot find the customer!", exception.getResponseBody(), "Get a wrong response body");
+
+    }
+
+    @Test
+    public void testGetCustomerWithCxfRsEndpoint() {
+        Exchange exchange
+                = template.send(
+                        "cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName() + "/?httpClientAPI=true",
+                        new Processor() {
+                            public void process(Exchange exchange) throws Exception {
+                                exchange.setPattern(ExchangePattern.InOut);
+                                Message inMessage = exchange.getIn();
+                                // set the Http method
+                                inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                                // set the relative path
+                                inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123");
+                                // Specify the response class , cxfrs will use InputStream as the response object type 
+                                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+                                // since we use the Get method, so we don't need to set the message body
+                                inMessage.setBody(null);
+                            }
+                        });
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+        assertNotNull(response, "The response should not be null");
+        assertEquals(123, response.getId(), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+    }
+
+    @Test
+    public void testGetCustomerWithVariableReplacementAndCxfRsEndpoint() {
+        Exchange exchange = template.send(
+                "cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName() + "/?httpClientAPI=true",
+                new Processor() {
+                    public void process(Exchange exchange) throws Exception {
+                        exchange.setPattern(ExchangePattern.InOut);
+                        Message inMessage = exchange.getIn();
+                        // set the Http method
+                        inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                        // set the relative path
+                        inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/{customerId}");
+                        // Set variables for replacement
+                        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_VAR_VALUES, new String[] { "123" });
+                        // Specify the response class , cxfrs will use InputStream as the response object type
+                        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+                        // since we use the Get method, so we don't need to set the message body
+                        inMessage.setBody(null);
+                    }
+                });
+
+        // get the response message
+        Customer response = (Customer) exchange.getMessage().getBody();
+        assertNotNull(response, "The response should not be null");
+        assertEquals(123, response.getId(), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+    }
+
+    @Test
+    public void testAddCustomerUniqueResponseCodeWithHttpClientAPI() {
+        Exchange exchange
+                = template.send("cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName()
+                                + "?httpClientAPI=true&synchronous=true",
+                        new Processor() {
+                            public void process(Exchange exchange) throws Exception {
+                                exchange.setPattern(ExchangePattern.InOut);
+                                Message inMessage = exchange.getIn();
+                                // set the Http method
+                                inMessage.setHeader(Exchange.HTTP_METHOD, "POST");
+                                // set the relative path
+                                inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customersUniqueResponseCode");
+                                // create a new customer object
+                                Customer customer = new Customer();
+                                customer.setId(9999);
+                                customer.setName("HttpClient");
+                                inMessage.setBody(customer);
+                            }
+                        });
+
+        // get the response message 
+        Response response = (Response) exchange.getMessage().getBody();
+        assertNotNull(response, "The response should not be null");
+        assertNotNull(response.getEntity(), "The response entity should not be null");
+        // check the response code
+        assertEquals(201, response.getStatus(), "Get a wrong response code");
+        // check the response code from message header
+        assertEquals(201, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+    }
+
+    @Test
+    public void testAddCustomerUniqueResponseCodeWithProxyAPI() {
+        Exchange exchange = template.send("direct://proxy", new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                Message inMessage = exchange.getIn();
+                // set the operation name 
+                inMessage.setHeader(CxfConstants.OPERATION_NAME, "addCustomerUniqueResponseCode");
+                // using the proxy client API
+                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE);
+                // set the parameters , if you just have one parameter 
+                // camel will put this object into an Object[] itself
+                Customer customer = new Customer();
+                customer.setId(8888);
+                customer.setName("ProxyAPI");
+                inMessage.setBody(customer);
+            }
+        });
+
+        // get the response message 
+        Response response = (Response) exchange.getMessage().getBody();
+        assertNotNull(response, "The response should not be null");
+        assertNotNull(response.getEntity(), "The response entity should not be null");
+        // check the response code
+        assertEquals(201, response.getStatus(), "Get a wrong response code");
+        // check the response code from message header
+        assertEquals(201, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+
+    }
+
+    @Test
+    public void testAddCustomerUniqueResponseCode() {
+        Exchange exchange
+                = template.send("cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName()
+                                + "?httpClientAPI=true&synchronous=true",
+                        new Processor() {
+                            public void process(Exchange exchange) throws Exception {
+                                exchange.setPattern(ExchangePattern.InOut);
+                                Message inMessage = exchange.getIn();
+                                // set the Http method
+                                inMessage.setHeader(Exchange.HTTP_METHOD, "POST");
+                                // set the relative path
+                                inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customersUniqueResponseCode");
+                                // put the response's entity into out message body
+                                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+                                // create a new customer object
+                                Customer customer = new Customer();
+                                customer.setId(8888);
+                                customer.setName("Willem");
+                                inMessage.setBody(customer);
+                            }
+                        });
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+        assertNotNull(response, "The response should not be null");
+        assertNotEquals(8888, response.getId(), "Get a wrong customer id");
+        assertEquals("Willem", response.getName(), "Get a wrong customer name");
+        assertEquals(201, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+    }
+
+    @Test
+    public void testProducerWithQueryParameters() {
+        Exchange exchange = template.send("cxfrs://http://localhost:" + port2 + "/" + getClass().getSimpleName()
+                                          + "/testQuery?httpClientAPI=true&q1=12&q2=13&synchronous=true",
+                new Processor() {
+                    public void process(Exchange exchange) throws Exception {
+                        exchange.setPattern(ExchangePattern.InOut);
+                        Message inMessage = exchange.getIn();
+                        // set the Http method
+                        inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, InputStream.class);
+                        inMessage.setBody(null);
+                    }
+
+                });
+
+        // get the response message 
+        String response = exchange.getMessage().getBody(String.class);
+        assertNotNull(response, "The response should not be null");
+        assertEquals("q1=12&q2=13", response, "The response value is wrong");
+    }
+
+    @Test
+    public void testProducerWithQueryParametersHeader() {
+        Exchange exchange = template.send("cxfrs://http://localhost:" + port2 + "/" + getClass().getSimpleName()
+                                          + "/testQuery?httpClientAPI=true&q1=12&q2=13&synchronous=true",
+                new Processor() {
+                    public void process(Exchange exchange) throws Exception {
+                        exchange.setPattern(ExchangePattern.InOut);
+                        Message inMessage = exchange.getIn();
+                        // set the Http method
+                        inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, InputStream.class);
+                        // override the parameter setting from URI
+                        // START SNIPPET: QueryMapExample
+                        Map<String, String> queryMap = new LinkedHashMap<>();
+                        queryMap.put("q1", "new");
+                        queryMap.put("q2", "world");
+                        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_QUERY_MAP, queryMap);
+                        // END SNIPPET: QueryMapExample 
+                        inMessage.setBody(null);
+                    }
+
+                });
+
+        // get the response message 
+        String response = exchange.getMessage().getBody(String.class);
+        assertNotNull(response, "The response should not be null");
+        assertEquals("q1=new&q2=world", response, "The response value is wrong");
+    }
+
+    @Test
+    public void testProducerWithQueryParametersMultipleValues() {
+        Exchange exchange = template.send("cxfrs://http://localhost:" + port2 + "/" + getClass().getSimpleName()
+                                          + "/testQuery?httpClientAPI=true&synchronous=true",
+                new Processor() {
+                    public void process(Exchange exchange) throws Exception {
+                        exchange.setPattern(ExchangePattern.InOut);
+                        Message inMessage = exchange.getIn();
+                        // set the Http method
+                        inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, InputStream.class);
+                        inMessage.setHeader(Exchange.HTTP_QUERY, "id=1&id=2");
+                        inMessage.setBody(null);
+                    }
+
+                });
+
+        // get the response message 
+        String response = exchange.getMessage().getBody(String.class);
+        assertNotNull(response, "The response should not be null");
+        assertEquals("id=1&id=2", response, "The response value is wrong");
+    }
+
+    @Test
+    public void testProducerWithQueryParametersEscapeAmpersand() {
+        Exchange exchange = template.send("cxfrs://http://localhost:" + port2 + "/" + getClass().getSimpleName()
+                                          + "/testQuery?httpClientAPI=true&synchronous=true",
+                new Processor() {
+                    public void process(Exchange exchange) throws Exception {
+                        exchange.setPattern(ExchangePattern.InOut);
+                        Message inMessage = exchange.getIn();
+                        // set the Http method
+                        inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+                        inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, InputStream.class);
+                        inMessage.setHeader(Exchange.HTTP_QUERY, "id=1%262");
+                        inMessage.setBody(null);
+                    }
+
+                });
+
+        // get the response message 
+        String response = exchange.getMessage().getBody(String.class);
+        assertNotNull(response, "The response should not be null");
+        assertEquals("id=1%262", response, "The response value is wrong");
+    }
+
+    @Test
+    public void testRestServerDirectlyGetCustomer() {
+        // we cannot convert directly to Customer as we need camel-jaxb
+        String response
+                = template.requestBodyAndHeader("cxfrs:http://localhost:" + port1 + "/services/" + getClass().getSimpleName()
+                                                + "/customerservice/customers/123?synchronous=true",
+                        null, Exchange.HTTP_METHOD, "GET", String.class);
+
+        assertNotNull(response, "The response should not be null");
+    }
+
+    @Test
+    public void testRestServerDirectlyAddCustomer() {
+        Customer input = new Customer();
+        input.setName("Donald Duck");
+
+        // we cannot convert directly to Customer as we need camel-jaxb
+        String response
+                = template.requestBodyAndHeader("cxfrs:http://localhost:" + port1 + "/services/" + getClass().getSimpleName()
+                                                + "/customerservice/customers?synchronous=true",
+                        input, Exchange.HTTP_METHOD, "POST", String.class);
+
+        assertNotNull(response);
+        assertTrue(response.endsWith("<name>Donald Duck</name></Customer>"));
+    }
+
+    static class TestFeature implements Feature {
+        boolean initialized;
+
+        @Override
+        public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
+            initialized = true;
+        }
+
+        @Override
+        public void initialize(Client client, Bus bus) {
+            //Do nothing
+        }
+
+        @Override
+        public void initialize(Server server, Bus bus) {
+            //Do nothing
+        }
+
+        @Override
+        public void initialize(Bus bus) {
+            //Do nothing
+        }
+    }
+
+    @Test
+    public void testProducerWithFeature() {
+        TestFeature feature = context.getRegistry().lookupByNameAndType("testFeature", TestFeature.class);
+
+        template.requestBodyAndHeader("cxfrs:http://localhost:" + port1 + "/services/" + getClass().getSimpleName()
+                                      + "/customerservice/customers/123?features=#myFeatures&synchronous=true",
+                null, Exchange.HTTP_METHOD, "GET", String.class);
+
+        assertTrue(feature.initialized, "The feature should be initialized");
+    }
+
+    @Test
+    public void testProducer422Response() {
+        Exchange exchange = template.send("cxfrs://http://localhost:" + port1 + "/services/" + getClass().getSimpleName()
+                                          + "/?httpClientAPI=true&synchronous=true",
+                new Processor() {
+                    public void process(Exchange exchange) throws Exception {
+                        exchange.setPattern(ExchangePattern.InOut);
+                        Message message = exchange.getIn();
+                        // Try to create a new Customer with an invalid name
+                        message.setHeader(Exchange.HTTP_METHOD, "POST");
+                        message.setHeader(Exchange.HTTP_PATH, "/customerservice/customers");
+                        Customer customer = new Customer();
+                        customer.setId(8888);
+                        customer.setName("");  // will trigger a 422 response (a common REST server validation response code)
+                        message.setBody(customer);
+                    }
+                });
+
+        assertNotNull(exchange.getException(), "Expect the exception here");
+        assertTrue(exchange.getException() instanceof CxfOperationException, "Exception should be a CxfOperationException");
+
+        CxfOperationException cxfOperationException = CxfOperationException.class.cast(exchange.getException());
+
+        assertEquals(422, cxfOperationException.getStatusCode(), "CXF operation exception has correct response code");
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean 
+        public CamelEndpointFactoryBean fromEndpoint() {
+            CamelEndpointFactoryBean jettyConsumer = new CamelEndpointFactoryBean();
+            jettyConsumer.setUri("jetty://http://localhost:" + port2 + "/CxfRsProducerTest/testQuery");
+            return jettyConsumer;
+        }
+        
+        @Bean 
+        public Processor myProcessor() {
+            return new JettyProcessor();
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean rsClientProxy() {
+            BusFactory.setThreadDefaultBus(new SpringBusFactory().createBus());
+            SpringJAXRSClientFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            //afb.setBus(BusFactory.getDefaultBus());
+            afb.setAddress("http://localhost:" + port1
+                                   + "/services/CxfRsProducerTest/");
+            //afb.setServiceClass somehow cause conflict with other test, should be bus conflict
+            afb.setServiceClass(org.apache.camel.component.cxf.jaxrs.testbean.CustomerService.class);
+            afb.setLoggingFeatureEnabled(true);
+            
+            return afb;
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean rsClientHttp() {
+            SpringJAXRSClientFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            afb.setAddress("http://localhost:" + port1
+                                   + "/services/CxfRsProducerTest/");
+            return afb;
+        }
+        
+        
+        
+        @Bean
+        public Feature testFeature() {
+            return new TestFeature();
+        }
+        
+        @Bean
+        public List<Feature> myFeatures(Feature testFeature) {
+            List<Feature> features = new ArrayList<Feature>();
+            features.add(testFeature);
+            return features;
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct://proxy").to("cxfrs:bean:rsClientProxy?synchronous=true");
+                    from("direct://http").to("cxfrs:bean:rsClientHttp?synchronous=true");
+                    from("ref:fromEndpoint").process("myProcessor");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsRouterTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsRouterTest.java
new file mode 100644
index 00000000000..fe0cd32ae82
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsRouterTest.java
@@ -0,0 +1,305 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxrs.CxfRsEndpoint;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSClientFactoryBean;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSServerFactoryBean;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hc.client5.http.classic.methods.HttpDelete;
+import org.apache.hc.client5.http.classic.methods.HttpGet;
+import org.apache.hc.client5.http.classic.methods.HttpPost;
+import org.apache.hc.client5.http.classic.methods.HttpPut;
+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
+import org.apache.hc.core5.http.ContentType;
+import org.apache.hc.core5.http.io.entity.EntityUtils;
+import org.apache.hc.core5.http.io.entity.StringEntity;
+
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsRouterTest.class,
+        CxfRsRouterTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfRsRouterTest {
+    
+    private static final String PUT_REQUEST = "<Customer><name>Mary</name><id>123</id></Customer>";
+    private static final String POST_REQUEST = "<Customer><name>Jack</name></Customer>";
+
+
+    public int port = CXFTestSupport.getPort1();
+    public int backendPort = CXFTestSupport.getPort2();
+    
+     
+    private Server server;
+    
+    
+    @Autowired
+    CamelContext context;
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        JAXRSServerFactoryBean sfb = new SpringJAXRSServerFactoryBean();
+        List<Object> serviceBeans = new ArrayList<Object>();
+        serviceBeans.add(new org.apache.camel.component.cxf.jaxrs.testbean.CustomerService());
+        sfb.setServiceBeans(serviceBeans);
+        sfb.setAddress("http://localhost:" + backendPort + "/services/CxfRsRouterTest/rest");
+        sfb.setStaticSubresourceResolution(true);
+        server = sfb.create();
+        server.start();
+    }
+
+    @AfterEach
+    public void shutdown() throws Exception {
+        if (server != null) {
+            server.stop();
+            server.destroy();
+        }
+    }
+        
+    
+    @Test
+    public void testEndpointUris() throws Exception {
+        CxfRsEndpoint cxfRsEndpoint = context.getEndpoint("cxfrs://bean://rsServer", CxfRsEndpoint.class);
+        assertEquals("cxfrs://bean://rsServer", cxfRsEndpoint.getEndpointUri(), "Get a wrong endpoint uri");
+
+        cxfRsEndpoint = context.getEndpoint("cxfrs://bean://rsClient", CxfRsEndpoint.class);
+        assertEquals("cxfrs://bean://rsClient", cxfRsEndpoint.getEndpointUri(), "Get a wrong endpoint uri");
+
+    }
+
+    @Test
+    public void testGetCustomer() throws Exception {
+        HttpGet get = new HttpGet("http://localhost:" + port + "/services/CxfRsRouterTest/route/customerservice/customers/123");
+        get.addHeader("Accept", "application/json");
+        try (CloseableHttpClient httpclient = HttpClientBuilder.create().build();
+             CloseableHttpResponse response = httpclient.execute(get)) {
+            assertEquals(200, response.getCode());
+            assertEquals("{\"Customer\":{\"id\":123,\"name\":\"John\"}}",
+                    EntityUtils.toString(response.getEntity()));
+        }
+
+    }
+
+    @Test
+    public void testGetCustomerWithQuery() throws Exception {
+        HttpGet get = new HttpGet("http://localhost:" + port + "/services/CxfRsRouterTest/route/customerservice/customers?id=123");
+        get.addHeader("Accept", "application/json");
+        
+        try (CloseableHttpClient httpclient = HttpClientBuilder.create().build();
+             CloseableHttpResponse response = httpclient.execute(get)) {
+            assertEquals(200, response.getCode());
+            assertEquals("{\"Customer\":{\"id\":123,\"name\":\"John\"}}",
+                    EntityUtils.toString(response.getEntity()));
+        }
+
+    }
+
+    @Test
+    public void testGetCustomers() throws Exception {
+        HttpGet get = new HttpGet("http://localhost:" + port + "/services/CxfRsRouterTest/route/customerservice/customers/");
+        get.addHeader("Accept", "application/xml");
+
+        try (CloseableHttpClient httpclient = HttpClientBuilder.create().build();
+             CloseableHttpResponse response = httpclient.execute(get)) {
+            assertEquals(200, response.getCode());
+            // order returned can differ on OS so match for both orders
+            String s = EntityUtils.toString(response.getEntity());
+            assertNotNull(s);
+            boolean m1 = s.endsWith(
+                    "<Customers><Customer><id>123</id><name>John</name></Customer><Customer><id>113</id><name>Dan</name></Customer></Customers>");
+            boolean m2 = s.endsWith(
+                    "<Customers><Customer><id>113</id><name>Dan</name></Customer><Customer><id>123</id><name>John</name></Customer></Customers>");
+
+            if (!m1 && !m2) {
+                fail("Not expected body returned: " + s);
+            }
+        }
+    }
+
+    @Test
+    public void testGetSubResource() throws Exception {
+        HttpGet get = new HttpGet(
+                "http://localhost:" + port + "/services/CxfRsRouterTest/route/customerservice/orders/223/products/323");
+        get.addHeader("Accept", "application/json");
+        try (CloseableHttpClient httpclient = HttpClientBuilder.create().build();
+             CloseableHttpResponse response = httpclient.execute(get)) {
+            assertEquals(200, response.getCode());
+            assertEquals("{\"Product\":{\"description\":\"product 323\",\"id\":323}}",
+                    EntityUtils.toString(response.getEntity()));
+        }
+
+    }
+
+    @Test
+    public void testPutConsumer() throws Exception {
+        HttpPut put = new HttpPut("http://localhost:" + port + "/services/CxfRsRouterTest/route/customerservice/customers");
+        StringEntity entity = new StringEntity(PUT_REQUEST, ContentType.parse("text/xml; charset=ISO-8859-1"));
+        put.setEntity(entity);
+
+        try (CloseableHttpClient httpclient = HttpClientBuilder.create().build();
+             CloseableHttpResponse response = httpclient.execute(put)) {
+            assertEquals(200, response.getCode());
+            assertEquals("", EntityUtils.toString(response.getEntity()));
+        }
+
+    }
+
+    @Test
+    public void testPostConsumer() throws Exception {
+        HttpPost post = new HttpPost("http://localhost:" + port + "/services/CxfRsRouterTest/route/customerservice/customers");
+        post.addHeader("Accept", "text/xml");
+        StringEntity entity = new StringEntity(POST_REQUEST, ContentType.parse("text/xml; charset=ISO-8859-1"));
+        post.setEntity(entity);
+
+        try (CloseableHttpClient httpclient = HttpClientBuilder.create().build()) {
+            CloseableHttpResponse response = httpclient.execute(post);
+            assertEquals(200, response.getCode());
+            assertEquals(
+                    "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Customer><id>124</id><name>Jack</name></Customer>",
+                    EntityUtils.toString(response.getEntity()));
+
+            HttpDelete del
+                    = new HttpDelete("http://localhost:" + port + "/services/CxfRsRouterTest/route/customerservice/customers/124/");
+            response = httpclient.execute(del);
+            // need to check the response of delete method
+            assertEquals(200, response.getCode());
+        }
+
+
+    }
+
+    @Test
+    public void testPostConsumerUniqueResponseCode() throws Exception {
+        HttpPost post = new HttpPost(
+                "http://localhost:" + port + "/services/CxfRsRouterTest/route/customerservice/customersUniqueResponseCode");
+        post.addHeader("Accept", "text/xml");
+        StringEntity entity = new StringEntity(POST_REQUEST, ContentType.parse("text/xml; charset=ISO-8859-1"));
+        post.setEntity(entity);
+
+        try (CloseableHttpClient httpclient = HttpClientBuilder.create().build()) {
+            CloseableHttpResponse response = httpclient.execute(post);
+            assertEquals(201, response.getCode());
+            assertEquals(
+                    "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Customer><id>124</id><name>Jack</name></Customer>",
+                    EntityUtils.toString(response.getEntity()));
+
+            HttpDelete del
+                    = new HttpDelete("http://localhost:" + port + "/services/CxfRsRouterTest/route/customerservice/customers/124/");
+            response = httpclient.execute(del);
+            // need to check the response of delete method
+            assertEquals(200, response.getCode());
+        }
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        @SuppressWarnings("rawtypes")
+        @Bean
+        public List<Object> jsonProviders() {
+            List<Object> list = new ArrayList<Object>();
+            list.add(new org.apache.cxf.jaxrs.provider.json.JSONProvider());
+            return list;
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean rsServer() {
+            SpringJAXRSServerFactoryBean afb = new SpringJAXRSServerFactoryBean();
+            
+            afb.setAddress("/CxfRsRouterTest/route");
+            afb.setServiceClass(org.apache.camel.component.cxf.jaxrs.testbean.CustomerService.class);
+            afb.setLoggingFeatureEnabled(true);
+            afb.setLoggingSizeLimit(20);
+            afb.setSkipFaultLogging(true);
+            return afb;
+        }
+        
+        @Bean
+        public AbstractJAXRSFactoryBean rsClient(List<?> jsonProviders) {
+            SpringJAXRSClientFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            
+            afb.setAddress("http://localhost:" + backendPort + "/services/CxfRsRouterTest/rest");
+            afb.setServiceClass(org.apache.camel.component.cxf.jaxrs.testbean.CustomerService.class);
+            afb.setLoggingFeatureEnabled(true);
+            afb.setSkipFaultLogging(true);
+            afb.setProviders(jsonProviders);
+            return afb;
+        }
+        
+        
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxfrs:bean:rsServer").to("log:body?level=INFO")
+                        .to("cxfrs:bean:rsClient?ignoreDeleteMethodMessageBody=true&synchronous=true");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsSslAsyncProducerTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsSslAsyncProducerTest.java
new file mode 100644
index 00000000000..7929ff86c74
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsSslAsyncProducerTest.java
@@ -0,0 +1,274 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.List;
+
+
+
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Message;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxrs.testbean.Customer;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSClientFactoryBean;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.support.jsse.KeyStoreParameters;
+import org.apache.camel.support.jsse.SSLContextParameters;
+import org.apache.camel.support.jsse.TrustManagersParameters;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.ssl.SslBundle;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.server.Ssl;
+import org.springframework.boot.web.server.WebServerSslBundle;
+import org.springframework.boot.web.server.Ssl.ClientAuth;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.transport.https.httpclient.DefaultHostnameVerifier;
+
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsSslAsyncProducerTest.class,
+        CxfRsSslAsyncProducerTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfRsSslAsyncProducerTest {
+
+    static int port = CXFTestSupport.getSslPort();
+    
+    
+    @Autowired
+    protected ProducerTemplate template;
+    
+    private Server server;
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        JAXRSServerFactoryBean sfb = new JAXRSServerFactoryBean();
+        List<Object> serviceBeans = new ArrayList<Object>();
+        serviceBeans.add(new org.apache.camel.component.cxf.jaxrs.testbean.CustomerService());
+        sfb.setServiceBeans(serviceBeans);
+        sfb.setAddress("/CxfRsSslAsyncProducerTest/");
+        sfb.setStaticSubresourceResolution(true);
+        server = sfb.create();
+        server.start();
+    }
+    
+    @AfterEach
+    public void shutdown() throws Exception {
+        if (server != null) {
+            server.stop();
+            server.destroy();
+        }
+    }
+
+    
+    protected void setupDestinationURL(Message inMessage) {
+        // do nothing here
+    }
+    
+    @Test
+    public void testCorrectTrustStore() {
+        Exchange exchange = template.send("direct://trust", new MyProcessor());
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+
+        assertNotNull(response, "The response should not be null");
+        assertEquals("123", String.valueOf(response.getId()), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+        assertEquals("value", exchange.getMessage().getHeader("key"), "Get a wrong header value");
+    }
+
+    @Test
+    public void testNoTrustStore() {
+        Exchange exchange = template.send("direct://noTrust", new MyProcessor());
+        assertTrue(exchange.isFailed());
+        Exception e = exchange.getException();
+        assertEquals("javax.net.ssl.SSLHandshakeException", e.getCause().getClass().getCanonicalName());
+    }
+
+    @Test
+    public void testWrongTrustStore() {
+        Exchange exchange = template.send("direct://wrongTrust", new MyProcessor());
+        assertTrue(exchange.isFailed());
+        Exception e = exchange.getException();
+        assertEquals("javax.net.ssl.SSLHandshakeException", e.getCause().getClass().getCanonicalName());
+    }
+
+    private class MyProcessor implements Processor {
+
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            exchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = exchange.getIn();
+            setupDestinationURL(inMessage);
+            // using the http central client API
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+            // set the Http method
+            inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+            // set the relative path
+            inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123");
+            // Specify the response class , cxfrs will use InputStream as the response object type
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+            // set a customer header
+            inMessage.setHeader("key", "value");
+            // since we use the Get method, so we don't need to set the message body
+            inMessage.setBody(null);
+        }
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        
+        
+        /*
+         * This is the way how to configure TLS/SSL with Bean 
+         */
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() throws UnknownHostException {
+            UndertowServletWebServerFactory undertowWebServerFactory 
+                = new UndertowServletWebServerFactory();
+            Ssl ssl = new Ssl();
+            ssl.setClientAuth(ClientAuth.NONE);
+            ssl.setKeyPassword("changeit");
+            ssl.setKeyStoreType("JKS");
+            ssl.setKeyStore("classpath:ssl/keystore-server.jks");
+            ssl.setKeyStorePassword("changeit");
+            SslBundle delegate = WebServerSslBundle.get(ssl);
+            SslBuilderCustomizer sslBuilderCustomizer = 
+                new SslBuilderCustomizer(port, InetAddress.getByName("localhost"),
+                                         ssl, delegate.getStores());
+            undertowWebServerFactory.addBuilderCustomizers(sslBuilderCustomizer);
+            return undertowWebServerFactory;
+        }
+        
+        @Bean
+        DefaultHostnameVerifier defaultHostnameVerifier() {
+            return new DefaultHostnameVerifier();
+        }
+        
+        @Bean
+        SSLContextParameters mySslContext() {
+            SSLContextParameters sslContext = new SSLContextParameters();
+            TrustManagersParameters trustManager = new TrustManagersParameters();
+            KeyStoreParameters keyStore = new KeyStoreParameters();
+            keyStore.setType("JKS");
+            keyStore.setPassword("changeit");
+            keyStore.setResource("/ssl/truststore-client.jks");
+            trustManager.setKeyStore(keyStore);
+            sslContext.setTrustManagers(trustManager);
+            return sslContext;
+        }
+        
+        @Bean
+        SSLContextParameters wrongSslContext() {
+            SSLContextParameters sslContext = new SSLContextParameters();
+            TrustManagersParameters trustManager = new TrustManagersParameters();
+            KeyStoreParameters keyStore = new KeyStoreParameters();
+            keyStore.setType("JKS");
+            keyStore.setPassword("changeit");
+            keyStore.setResource("/ssl/truststore-wrong.jks");
+            trustManager.setKeyStore(keyStore);
+            sslContext.setTrustManagers(trustManager);
+            return sslContext;
+        }
+        
+        
+        @Bean
+        AbstractJAXRSFactoryBean serviceEndpoint(SSLContextParameters mySslContext, DefaultHostnameVerifier defaultHostnameVerifier) {
+            AbstractJAXRSFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            afb.setAddress("https://localhost:" + port 
+                                   + "/services/CxfRsSslAsyncProducerTest/");
+            return afb;
+        }
+        
+        /*@Bean
+        CxfRsEndpoint serviceEndpointWithWrongTrust(SSLContextParameters wrongSslContext, DefaultHostnameVerifier defaultHostnameVerifier) {
+            
+            CxfRsEndpoint cxfEndpoint = new CxfRsEndpoint();
+            cxfEndpoint.setAddress("https://localhost:" + port 
+                                   + "/services/CxfRsSslAsyncProducerTest/");
+            cxfEndpoint.setHostnameVerifier(defaultHostnameVerifier);
+            cxfEndpoint.setSslContextParameters(wrongSslContext);
+            cxfEndpoint.setSynchronous(true);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfRsEndpoint serviceEndpointWithNoTrust(DefaultHostnameVerifier defaultHostnameVerifier) {
+            
+            CxfRsEndpoint cxfEndpoint = new CxfRsEndpoint();
+            cxfEndpoint.setAddress("https://localhost:" + port 
+                                   + "/services/CxfRsSslAsyncProducerTest/");
+            cxfEndpoint.setHostnameVerifier(defaultHostnameVerifier);
+            cxfEndpoint.setSynchronous(true);
+            return cxfEndpoint;
+        }*/
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct://trust").to("cxfrs:bean:serviceEndpoint?sslContextParameters=#mySslContext&hostnameVerifier=#defaultHostnameVerifier");
+                    from("direct://wrongTrust").to("cxfrs:bean:serviceEndpoint?sslContextParameters=#wrongSslContext&hostnameVerifier=#defaultHostnameVerifier");
+                    from("direct://noTrust").to("cxfrs:bean:serviceEndpoint?hostnameVerifier=#defaultHostnameVerifier");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsSslProducerTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsSslProducerTest.java
new file mode 100644
index 00000000000..33b6fde3003
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsSslProducerTest.java
@@ -0,0 +1,274 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.List;
+
+
+
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Message;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxrs.testbean.Customer;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSClientFactoryBean;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.support.jsse.KeyStoreParameters;
+import org.apache.camel.support.jsse.SSLContextParameters;
+import org.apache.camel.support.jsse.TrustManagersParameters;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.ssl.SslBundle;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.server.Ssl;
+import org.springframework.boot.web.server.WebServerSslBundle;
+import org.springframework.boot.web.server.Ssl.ClientAuth;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.transport.https.httpclient.DefaultHostnameVerifier;
+
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsSslProducerTest.class,
+        CxfRsSslProducerTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfRsSslProducerTest {
+
+    static int port = CXFTestSupport.getSslPort();
+    
+    
+    @Autowired
+    protected ProducerTemplate template;
+    
+    private Server server;
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        JAXRSServerFactoryBean sfb = new JAXRSServerFactoryBean();
+        List<Object> serviceBeans = new ArrayList<Object>();
+        serviceBeans.add(new org.apache.camel.component.cxf.jaxrs.testbean.CustomerService());
+        sfb.setServiceBeans(serviceBeans);
+        sfb.setAddress("/CxfRsSslProducerTest/");
+        sfb.setStaticSubresourceResolution(true);
+        server = sfb.create();
+        server.start();
+    }
+    
+    @AfterEach
+    public void shutdown() throws Exception {
+        if (server != null) {
+            server.stop();
+            server.destroy();
+        }
+    }
+
+    
+    protected void setupDestinationURL(Message inMessage) {
+        // do nothing here
+    }
+    
+    @Test
+    public void testCorrectTrustStore() {
+        Exchange exchange = template.send("direct://trust", new MyProcessor());
+
+        // get the response message 
+        Customer response = (Customer) exchange.getMessage().getBody();
+
+        assertNotNull(response, "The response should not be null");
+        assertEquals("123", String.valueOf(response.getId()), "Get a wrong customer id");
+        assertEquals("John", response.getName(), "Get a wrong customer name");
+        assertEquals(200, exchange.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE), "Get a wrong response code");
+        assertEquals("value", exchange.getMessage().getHeader("key"), "Get a wrong header value");
+    }
+
+    @Test
+    public void testNoTrustStore() {
+        Exchange exchange = template.send("direct://noTrust", new MyProcessor());
+        assertTrue(exchange.isFailed());
+        Exception e = exchange.getException();
+        assertEquals("javax.net.ssl.SSLHandshakeException", e.getCause().getClass().getCanonicalName());
+    }
+
+    @Test
+    public void testWrongTrustStore() {
+        Exchange exchange = template.send("direct://wrongTrust", new MyProcessor());
+        assertTrue(exchange.isFailed());
+        Exception e = exchange.getException();
+        assertEquals("javax.net.ssl.SSLHandshakeException", e.getCause().getClass().getCanonicalName());
+    }
+
+    private class MyProcessor implements Processor {
+
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            exchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = exchange.getIn();
+            setupDestinationURL(inMessage);
+            // using the http central client API
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+            // set the Http method
+            inMessage.setHeader(Exchange.HTTP_METHOD, "GET");
+            // set the relative path
+            inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123");
+            // Specify the response class , cxfrs will use InputStream as the response object type
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+            // set a customer header
+            inMessage.setHeader("key", "value");
+            // since we use the Get method, so we don't need to set the message body
+            inMessage.setBody(null);
+        }
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        
+        
+        /*
+         * This is the way how to configure TLS/SSL with Bean 
+         */
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() throws UnknownHostException {
+            UndertowServletWebServerFactory undertowWebServerFactory 
+                = new UndertowServletWebServerFactory();
+            Ssl ssl = new Ssl();
+            ssl.setClientAuth(ClientAuth.NONE);
+            ssl.setKeyPassword("changeit");
+            ssl.setKeyStoreType("JKS");
+            ssl.setKeyStore("classpath:ssl/keystore-server.jks");
+            ssl.setKeyStorePassword("changeit");
+            SslBundle delegate = WebServerSslBundle.get(ssl);
+            SslBuilderCustomizer sslBuilderCustomizer = 
+                new SslBuilderCustomizer(port, InetAddress.getByName("localhost"),
+                                         ssl, delegate.getStores());
+            undertowWebServerFactory.addBuilderCustomizers(sslBuilderCustomizer);
+            return undertowWebServerFactory;
+        }
+        
+        @Bean
+        DefaultHostnameVerifier defaultHostnameVerifier() {
+            return new DefaultHostnameVerifier();
+        }
+        
+        @Bean
+        SSLContextParameters mySslContext() {
+            SSLContextParameters sslContext = new SSLContextParameters();
+            TrustManagersParameters trustManager = new TrustManagersParameters();
+            KeyStoreParameters keyStore = new KeyStoreParameters();
+            keyStore.setType("JKS");
+            keyStore.setPassword("changeit");
+            keyStore.setResource("/ssl/truststore-client.jks");
+            trustManager.setKeyStore(keyStore);
+            sslContext.setTrustManagers(trustManager);
+            return sslContext;
+        }
+        
+        @Bean
+        SSLContextParameters wrongSslContext() {
+            SSLContextParameters sslContext = new SSLContextParameters();
+            TrustManagersParameters trustManager = new TrustManagersParameters();
+            KeyStoreParameters keyStore = new KeyStoreParameters();
+            keyStore.setType("JKS");
+            keyStore.setPassword("changeit");
+            keyStore.setResource("/ssl/truststore-wrong.jks");
+            trustManager.setKeyStore(keyStore);
+            sslContext.setTrustManagers(trustManager);
+            return sslContext;
+        }
+        
+        
+        @Bean
+        AbstractJAXRSFactoryBean serviceEndpoint(SSLContextParameters mySslContext, DefaultHostnameVerifier defaultHostnameVerifier) {
+            AbstractJAXRSFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            afb.setAddress("https://localhost:" + port 
+                                   + "/services/CxfRsSslProducerTest/");
+            return afb;
+        }
+        
+        /*@Bean
+        CxfRsEndpoint serviceEndpointWithWrongTrust(SSLContextParameters wrongSslContext, DefaultHostnameVerifier defaultHostnameVerifier) {
+            
+            CxfRsEndpoint cxfEndpoint = new CxfRsEndpoint();
+            cxfEndpoint.setAddress("https://localhost:" + port 
+                                   + "/services/CxfRsSslProducerTest/");
+            cxfEndpoint.setHostnameVerifier(defaultHostnameVerifier);
+            cxfEndpoint.setSslContextParameters(wrongSslContext);
+            cxfEndpoint.setSynchronous(true);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfRsEndpoint serviceEndpointWithNoTrust(DefaultHostnameVerifier defaultHostnameVerifier) {
+            
+            CxfRsEndpoint cxfEndpoint = new CxfRsEndpoint();
+            cxfEndpoint.setAddress("https://localhost:" + port 
+                                   + "/services/CxfRsSslProducerTest/");
+            cxfEndpoint.setHostnameVerifier(defaultHostnameVerifier);
+            cxfEndpoint.setSynchronous(true);
+            return cxfEndpoint;
+        }*/
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct://trust").to("cxfrs:bean:serviceEndpoint?sslContextParameters=#mySslContext&hostnameVerifier=#defaultHostnameVerifier&synchronous=true");
+                    from("direct://wrongTrust").to("cxfrs:bean:serviceEndpoint?sslContextParameters=#wrongSslContext&hostnameVerifier=#defaultHostnameVerifier&synchronous=true");
+                    from("direct://noTrust").to("cxfrs:bean:serviceEndpoint?hostnameVerifier=#defaultHostnameVerifier&synchronous=true");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsStreamCacheTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsStreamCacheTest.java
new file mode 100644
index 00000000000..503e0f6161e
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/CxfRsStreamCacheTest.java
@@ -0,0 +1,166 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+
+import org.apache.camel.EndpointInject;
+import org.apache.camel.Exchange;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.jaxrs.testbean.Customer;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.converter.stream.CachedOutputStream;
+import org.apache.camel.spi.Synchronization;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hc.client5.http.classic.methods.HttpPut;
+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
+import org.apache.hc.core5.http.ContentType;
+import org.apache.hc.core5.http.io.entity.EntityUtils;
+import org.apache.hc.core5.http.io.entity.StringEntity;
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfRsStreamCacheTest.class,
+        CxfRsStreamCacheTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfRsStreamCacheTest {
+
+    private static final String PUT_REQUEST = "<Customer><name>Mary</name><id>123</id></Customer>";
+    private static final String CONTEXT = "/CxfRsStreamCacheTest";
+    private static final String CXT = "8080/services" + CONTEXT;
+    private static final String RESPONSE = "<pong xmlns=\"test/service\"/>";
+
+    private String cxfRsEndpointUri = "cxfrs://" + CONTEXT + "?synchronous=" + isSynchronous()
+                                      + "&dataFormat=PAYLOAD&resourceClasses=org.apache.camel.component.cxf.jaxrs.testbean.CustomerService";
+
+    @Autowired
+    ProducerTemplate template;
+    
+    @EndpointInject("mock:result")
+    MockEndpoint mock;
+    
+    @EndpointInject("mock:onComplete")
+    MockEndpoint onComplete;
+    
+    @Bean
+    public ServletWebServerFactory servletWebServerFactory() {
+        return new UndertowServletWebServerFactory();
+    }
+    
+    
+    @Test
+    public void testPutConsumer() throws Exception {
+        
+        mock.expectedMessageCount(1);
+        mock.message(0).body().isInstanceOf(Customer.class);
+
+        
+        onComplete.expectedMessageCount(1);
+
+        HttpPut put = new HttpPut("http://localhost:" + CXT + "/customerservice/customers");
+        StringEntity entity = new StringEntity(PUT_REQUEST, ContentType.parse("text/xml; charset=ISO-8859-1"));
+        put.addHeader("test", "header1;header2");
+        put.setEntity(entity);
+        CloseableHttpClient httpclient = HttpClientBuilder.create().build();
+        
+        try (CloseableHttpResponse response = httpclient.execute(put)) {
+            assertEquals(200, response.getCode());
+            assertEquals(RESPONSE, EntityUtils.toString(response.getEntity()));
+        }
+
+        mock.assertIsSatisfied();
+        onComplete.assertIsSatisfied();
+
+    }
+
+    protected boolean isSynchronous() {
+        return false;
+    }
+
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+
+                    getContext().setStreamCaching(true);
+                    getContext().getStreamCachingStrategy().setSpoolThreshold(1L);
+                    errorHandler(noErrorHandler());
+
+                    from(cxfRsEndpointUri)
+                            // should be able to convert to Customer
+                            .convertBodyTo(Customer.class)
+                            .to("mock:result")
+                            .process(exchange -> {
+                                // respond with OK
+                                CachedOutputStream cos = new CachedOutputStream(exchange);
+                                cos.write(RESPONSE.getBytes("UTF-8"));
+                                cos.close();
+                                exchange.getMessage().setBody(cos.newStreamCache());
+
+                                exchange.getExchangeExtension().addOnCompletion(new Synchronization() {
+                                    @Override
+                                    public void onComplete(Exchange exchange) {
+                                        template.sendBody("mock:onComplete", "");
+                                    }
+
+                                    @Override
+                                    public void onFailure(Exchange exchange) {
+
+                                    }
+                                });
+                            });
+
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/JettyCxfRsRouterTest.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/JettyCxfRsRouterTest.java
new file mode 100644
index 00000000000..13e5db10aec
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/JettyCxfRsRouterTest.java
@@ -0,0 +1,132 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSClientFactoryBean;
+import org.apache.camel.component.cxf.spring.jaxrs.SpringJAXRSServerFactoryBean;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
+
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.annotation.DirtiesContext.ClassMode;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+
+
+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        JettyCxfRsRouterTest.class,
+        JettyCxfRsRouterTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }
+)
+public class JettyCxfRsRouterTest extends CxfRsRouterTest {
+    
+    
+     
+    private Server server;
+    
+    
+    @Autowired
+    CamelContext context;
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        JAXRSServerFactoryBean sfb = new SpringJAXRSServerFactoryBean();
+        List<Object> serviceBeans = new ArrayList<Object>();
+        serviceBeans.add(new org.apache.camel.component.cxf.jaxrs.testbean.CustomerService());
+        sfb.setServiceBeans(serviceBeans);
+        sfb.setAddress("http://localhost:" + backendPort + "/services/JettyCxfRsRouterTest/rest");
+        sfb.setStaticSubresourceResolution(true);
+        server = sfb.create();
+        server.start();
+    }
+
+    @AfterEach
+    public void shutdown() throws Exception {
+        if (server != null) {
+            server.stop();
+            server.destroy();
+        }
+    }
+        
+    
+    @Override
+    @Disabled("The test from the parent class is not applicable in this scenario")
+    public void testEndpointUris() {
+        // Don't test anything here
+    }
+
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public AbstractJAXRSFactoryBean rsClient() {
+            SpringJAXRSClientFactoryBean afb = new SpringJAXRSClientFactoryBean();
+            
+            afb.setAddress("http://localhost:" + backendPort + "/services/JettyCxfRsRouterTest/rest");
+            afb.setServiceClass(org.apache.camel.component.cxf.jaxrs.testbean.CustomerService.class);
+            afb.setLoggingFeatureEnabled(true);
+            afb.setSkipFaultLogging(true);
+            return afb;
+        }
+        
+        
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("jetty://http://localhost:" + port + "/services/CxfRsRouterTest/route?matchOnUriPrefix=true")
+                        .to("cxfrs:bean:rsClient?ignoreDeleteMethodMessageBody=true&synchronous=true");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/SslBuilderCustomizer.java b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/SslBuilderCustomizer.java
new file mode 100644
index 00000000000..d6fa6e258c1
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/java/org/apache/camel/component/cxf/rest/springboot/SslBuilderCustomizer.java
@@ -0,0 +1,248 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.rest.springboot;
+
+import java.io.InputStream;
+import java.net.InetAddress;
+import java.net.Socket;
+import java.net.URL;
+import java.security.KeyManagementException;
+import java.security.KeyStore;
+import java.security.NoSuchAlgorithmException;
+import java.security.Principal;
+import java.security.PrivateKey;
+import java.security.cert.X509Certificate;
+
+import javax.net.ssl.KeyManager;
+import javax.net.ssl.KeyManagerFactory;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLEngine;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.TrustManagerFactory;
+import javax.net.ssl.X509ExtendedKeyManager;
+
+import org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer;
+import org.springframework.boot.web.server.Ssl;
+import org.springframework.boot.ssl.SslBundleKey;
+import org.springframework.boot.ssl.SslStoreBundle;
+import org.springframework.boot.web.server.WebServerException;
+import org.springframework.util.ResourceUtils;
+import org.xnio.Options;
+import org.xnio.Sequence;
+import org.xnio.SslClientAuthMode;
+
+import io.undertow.Undertow;
+
+public class SslBuilderCustomizer implements UndertowBuilderCustomizer {
+    private final int port;
+
+    private final InetAddress address;
+
+    private final Ssl ssl;
+
+    private final SslStoreBundle sslStoreProvider;
+
+    SslBuilderCustomizer(int port, InetAddress address, Ssl ssl, SslStoreBundle sslStoreProvider) {
+            this.port = port;
+            this.address = address;
+            this.ssl = ssl;
+            this.sslStoreProvider = sslStoreProvider;
+    }
+
+    public void customize(Undertow.Builder builder) {
+            try {
+                    SSLContext sslContext = SSLContext.getInstance(this.ssl.getProtocol());
+                    sslContext.init(getKeyManagers(this.ssl, this.sslStoreProvider),
+                                    getTrustManagers(this.ssl, this.sslStoreProvider), null);
+                    builder.addHttpsListener(this.port, getListenAddress(), sslContext);
+                    builder.setSocketOption(Options.SSL_CLIENT_AUTH_MODE, getSslClientAuthMode(this.ssl));
+                    if (this.ssl.getEnabledProtocols() != null) {
+                            builder.setSocketOption(Options.SSL_ENABLED_PROTOCOLS, Sequence.of(this.ssl.getEnabledProtocols()));
+                    }
+                    if (this.ssl.getCiphers() != null) {
+                            builder.setSocketOption(Options.SSL_ENABLED_CIPHER_SUITES, Sequence.of(this.ssl.getCiphers()));
+                    }
+            }
+            catch (NoSuchAlgorithmException | KeyManagementException ex) {
+                    throw new IllegalStateException(ex);
+            }
+    }
+
+    private String getListenAddress() {
+            if (this.address == null) {
+                    return "0.0.0.0";
+            }
+            return this.address.getHostAddress();
+    }
+
+    private SslClientAuthMode getSslClientAuthMode(Ssl ssl) {
+            if (ssl.getClientAuth() == Ssl.ClientAuth.NEED) {
+                    return SslClientAuthMode.REQUIRED;
+            }
+            if (ssl.getClientAuth() == Ssl.ClientAuth.WANT) {
+                    return SslClientAuthMode.REQUESTED;
+            }
+            return SslClientAuthMode.NOT_REQUESTED;
+    }
+
+    private KeyManager[] getKeyManagers(Ssl ssl, SslStoreBundle sslStoreProvider) {
+            try {
+                    KeyStore keyStore = getKeyStore(ssl, sslStoreProvider);
+                    SslBundleKey.of(sslStoreProvider.getKeyStorePassword(), ssl.getKeyAlias())
+                        .assertContainsAlias(keyStore);
+                    KeyManagerFactory keyManagerFactory = KeyManagerFactory
+                                    .getInstance(KeyManagerFactory.getDefaultAlgorithm());
+                    String keyPassword = (sslStoreProvider != null) ? sslStoreProvider.getKeyStorePassword() : null;
+                    if (keyPassword == null) {
+                            keyPassword = (ssl.getKeyPassword() != null) ? ssl.getKeyPassword() : ssl.getKeyStorePassword();
+                    }
+                    keyManagerFactory.init(keyStore, (keyPassword != null) ? keyPassword.toCharArray() : null);
+                    if (ssl.getKeyAlias() != null) {
+                            return getConfigurableAliasKeyManagers(ssl, keyManagerFactory.getKeyManagers());
+                    }
+                    return keyManagerFactory.getKeyManagers();
+            }
+            catch (Exception ex) {
+                    throw new IllegalStateException(ex);
+            }
+    }
+
+    private KeyManager[] getConfigurableAliasKeyManagers(Ssl ssl, KeyManager[] keyManagers) {
+            for (int i = 0; i < keyManagers.length; i++) {
+                    if (keyManagers[i] instanceof X509ExtendedKeyManager) {
+                            keyManagers[i] = new ConfigurableAliasKeyManager((X509ExtendedKeyManager) keyManagers[i],
+                                            ssl.getKeyAlias());
+                    }
+            }
+            return keyManagers;
+    }
+
+    private KeyStore getKeyStore(Ssl ssl, SslStoreBundle sslStoreProvider) throws Exception {
+            if (sslStoreProvider != null) {
+                    return sslStoreProvider.getKeyStore();
+            }
+            return loadKeyStore(ssl.getKeyStoreType(), ssl.getKeyStoreProvider(), ssl.getKeyStore(),
+                            ssl.getKeyStorePassword());
+    }
+
+    private TrustManager[] getTrustManagers(Ssl ssl, SslStoreBundle sslStoreProvider) {
+            try {
+                    KeyStore store = getTrustStore(ssl, sslStoreProvider);
+                    TrustManagerFactory trustManagerFactory = TrustManagerFactory
+                                    .getInstance(TrustManagerFactory.getDefaultAlgorithm());
+                    trustManagerFactory.init(store);
+                    return trustManagerFactory.getTrustManagers();
+            }
+            catch (Exception ex) {
+                    throw new IllegalStateException(ex);
+            }
+    }
+
+    private KeyStore getTrustStore(Ssl ssl, SslStoreBundle sslStoreProvider) throws Exception {
+            if (sslStoreProvider != null) {
+                    return sslStoreProvider.getTrustStore();
+            }
+            return loadTrustStore(ssl.getTrustStoreType(), ssl.getTrustStoreProvider(), ssl.getTrustStore(),
+                            ssl.getTrustStorePassword());
+    }
+
+    private KeyStore loadKeyStore(String type, String provider, String resource, String password) throws Exception {
+            return loadStore(type, provider, resource, password);
+    }
+
+    private KeyStore loadTrustStore(String type, String provider, String resource, String password) throws Exception {
+            if (resource == null) {
+                    return null;
+            }
+            return loadStore(type, provider, resource, password);
+    }
+
+    private KeyStore loadStore(String type, String provider, String resource, String password) throws Exception {
+            type = (type != null) ? type : "JKS";
+            KeyStore store = (provider != null) ? KeyStore.getInstance(type, provider) : KeyStore.getInstance(type);
+            try {
+                    URL url = ResourceUtils.getURL(resource);
+                    try (InputStream stream = url.openStream()) {
+                            store.load(stream, (password != null) ? password.toCharArray() : null);
+                    }
+                    return store;
+            }
+            catch (Exception ex) {
+                    throw new WebServerException("Could not load key store '" + resource + "'", ex);
+            }
+    }
+
+    /**
+     * {@link X509ExtendedKeyManager} that supports custom alias configuration.
+     */
+    private static class ConfigurableAliasKeyManager extends X509ExtendedKeyManager {
+
+            private final X509ExtendedKeyManager keyManager;
+
+            private final String alias;
+
+            ConfigurableAliasKeyManager(X509ExtendedKeyManager keyManager, String alias) {
+                    this.keyManager = keyManager;
+                    this.alias = alias;
+            }
+
+            @Override
+            public String chooseEngineClientAlias(String[] strings, Principal[] principals, SSLEngine sslEngine) {
+                    return this.keyManager.chooseEngineClientAlias(strings, principals, sslEngine);
+            }
+
+            @Override
+            public String chooseEngineServerAlias(String s, Principal[] principals, SSLEngine sslEngine) {
+                    if (this.alias == null) {
+                            return this.keyManager.chooseEngineServerAlias(s, principals, sslEngine);
+                    }
+                    return this.alias;
+            }
+
+            @Override
+            public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {
+                    return this.keyManager.chooseClientAlias(keyType, issuers, socket);
+            }
+
+            @Override
+            public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {
+                    return this.keyManager.chooseServerAlias(keyType, issuers, socket);
+            }
+
+            @Override
+            public X509Certificate[] getCertificateChain(String alias) {
+                    return this.keyManager.getCertificateChain(alias);
+            }
+
+            @Override
+            public String[] getClientAliases(String keyType, Principal[] issuers) {
+                    return this.keyManager.getClientAliases(keyType, issuers);
+            }
+
+            @Override
+            public PrivateKey getPrivateKey(String alias) {
+                    return this.keyManager.getPrivateKey(alias);
+            }
+
+            @Override
+            public String[] getServerAliases(String keyType, Principal[] issuers) {
+                    return this.keyManager.getServerAliases(keyType, issuers);
+            }
+
+    }
+
+}
diff --git a/components-starter/camel-cxf-rest-starter/src/test/resources/routes/CxfRsSpringProducerSession.xml b/components-starter/camel-cxf-rest-starter/src/test/resources/routes/CxfRsSpringProducerSession.xml
new file mode 100644
index 00000000000..98c23f78bd9
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/resources/routes/CxfRsSpringProducerSession.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the "License"); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:cxf="http://camel.apache.org/schema/cxf/jaxrs"
+       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
+       xmlns:util="http://www.springframework.org/schema/util"
+       xsi:schemaLocation="
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
+       http://camel.apache.org/schema/cxf/jaxrs http://camel.apache.org/schema/cxf/jaxrs/camel-cxf.xsd
+       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
+    ">
+  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>
+
+  <jaxrs:server id="restService"
+		        address="/CxfRsProducerSessionTest/" 
+		        staticSubresourceResolution="true">
+    <jaxrs:serviceBeans>
+      <ref bean="echoService"/>
+    </jaxrs:serviceBeans>       
+  </jaxrs:server>
+  
+  <bean id="echoService" class="org.apache.camel.component.cxf.jaxrs.testbean.EchoServiceImpl" />
+
+  <cxf:rsClient id="rsClientProxy" address="http://localhost:8080/services/CxfRsProducerSessionTest/"
+    serviceClass="org.apache.camel.component.cxf.jaxrs.testbean.EchoService"
+    loggingFeatureEnabled="true" />
+   
+  <cxf:rsClient id="rsClientHttp" address="http://localhost:8080/services/CxfRsProducerSessionTest/"/>
+
+
+  <bean id="instanceCookieHandler" class="org.apache.camel.http.base.cookie.InstanceCookieHandler"/>
+  <bean id="exchangeCookieHandler" class="org.apache.camel.http.base.cookie.ExchangeCookieHandler"/>
+</beans>
diff --git a/components-starter/camel-cxf-rest-starter/src/test/resources/routes/CxfRsSpringProducerSessionRoute.xml b/components-starter/camel-cxf-rest-starter/src/test/resources/routes/CxfRsSpringProducerSessionRoute.xml
new file mode 100644
index 00000000000..76a87228f48
--- /dev/null
+++ b/components-starter/camel-cxf-rest-starter/src/test/resources/routes/CxfRsSpringProducerSessionRoute.xml
@@ -0,0 +1,59 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the "License"); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+
+    <!-- START SNIPPET: e1 -->
+  <routes id="camel" xmlns="http://camel.apache.org/schema/spring">
+    <route>
+       <from uri="direct://proxy"/>
+       <to uri="cxfrs://bean://rsClientProxy?synchronous=true"/>
+       <convertBodyTo type="java.lang.String"/>
+       <to uri="cxfrs://bean://rsClientProxy?synchronous=true"/>
+    </route>
+    <route>
+       <from uri="direct://proxyinstance"/>
+       <to uri="cxfrs://bean://rsClientProxy?cookieHandler=#instanceCookieHandler&amp;synchronous=true"/>
+       <convertBodyTo type="java.lang.String"/>
+       <to uri="cxfrs://bean://rsClientProxy?cookieHandler=#instanceCookieHandler&amp;synchronous=true"/>
+    </route>
+    <route>
+       <from uri="direct://proxyexchange"/>
+       <to uri="cxfrs://bean://rsClientProxy?cookieHandler=#exchangeCookieHandler&amp;synchronous=true"/>
+       <convertBodyTo type="java.lang.String"/>
+       <to uri="cxfrs://bean://rsClientProxy?cookieHandler=#exchangeCookieHandler&amp;synchronous=true"/>
+    </route>
+    <route>
+       <from uri="direct://http"/>
+       <to uri="cxfrs://bean://rsClientHttp?synchronous=true"/>
+       <convertBodyTo type="java.lang.String"/>
+       <to uri="cxfrs://bean://rsClientHttp?synchronous=true"/>
+    </route>
+    <route>
+       <from uri="direct://httpinstance"/>
+       <to uri="cxfrs://bean://rsClientHttp?cookieHandler=#instanceCookieHandler&amp;synchronous=true"/>
+       <convertBodyTo type="java.lang.String"/>
+       <to uri="cxfrs://bean://rsClientHttp?cookieHandler=#instanceCookieHandler&amp;synchronous=true"/>
+    </route>
+    <route>
+       <from uri="direct://httpexchange"/>
+       <to uri="cxfrs://bean://rsClientHttp?cookieHandler=#exchangeCookieHandler&amp;synchronous=true"/>
+       <convertBodyTo type="java.lang.String"/>
+       <to uri="cxfrs://bean://rsClientHttp?cookieHandler=#exchangeCookieHandler&amp;synchronous=true"/>
+    </route>
+  </routes>
diff --git a/components-starter/camel-cxf-soap-starter/pom.xml b/components-starter/camel-cxf-soap-starter/pom.xml
index 62ae50502b5..feb87db2d62 100644
--- a/components-starter/camel-cxf-soap-starter/pom.xml
+++ b/components-starter/camel-cxf-soap-starter/pom.xml
@@ -43,6 +43,104 @@
       <artifactId>cxf-spring-boot-starter-jaxws</artifactId>
       <version>${cxf-version}</version>
     </dependency>
+    <dependency>
+      <groupId>org.apache.cxf</groupId>
+      <artifactId>cxf-rt-transports-http-undertow</artifactId>
+      <version>${cxf-version}</version>
+      <scope>test</scope>
+      <exclusions>
+        <exclusion>
+          <groupId>io.undertow</groupId>
+          <artifactId>*</artifactId>
+        </exclusion>
+      </exclusions>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.cxf</groupId>
+      <artifactId>cxf-rt-ws-security</artifactId>
+      <version>${cxf-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-cxf-common</artifactId>
+      <version>${camel-version}</version>
+      <type>test-jar</type>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-cxf-spring-soap</artifactId>
+      <version>${camel-version}</version>
+      <type>test-jar</type>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-cxf-soap</artifactId>
+      <version>${camel-version}</version>
+      <type>test-jar</type>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-http</artifactId>
+      <version>${camel-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel.springboot</groupId>
+      <artifactId>camel-xml-io-dsl-starter</artifactId>
+      <version>${project.version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-jaxb</artifactId>
+      <version>${camel-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-web</artifactId>
+      <exclusions>
+        <exclusion>
+          <groupId>org.springframework.boot</groupId>
+          <artifactId>spring-boot-starter-tomcat</artifactId>
+        </exclusion>
+      </exclusions>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-undertow</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.cxf</groupId>
+      <artifactId>cxf-rt-ws-rm</artifactId>
+      <scope>test</scope>
+      <version>${cxf-version}</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.cxf</groupId>
+      <artifactId>cxf-testutils</artifactId>
+      <scope>test</scope>
+      <version>${cxf-version}</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.cxf</groupId>
+      <artifactId>cxf-rt-transports-jms</artifactId>
+      <version>${cxf-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-test-infra-artemis</artifactId>
+      <version>${camel-community.version}</version>
+      <scope>test</scope>
+      <type>test-jar</type>
+    </dependency>
     <!--START OF GENERATED CODE-->
     <dependency>
       <groupId>org.apache.camel.springboot</groupId>
@@ -50,4 +148,24 @@
     </dependency>
     <!--END OF GENERATED CODE-->
   </dependencies>
+  <build>
+    <plugins>
+      <plugin>
+        <artifactId>maven-surefire-plugin</artifactId>
+        <configuration>
+          <rerunFailingTestsCount>0</rerunFailingTestsCount>
+          <reuseForks>false</reuseForks>
+        </configuration>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <compilerArgs>
+            <arg>-parameters</arg>
+          </compilerArgs>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
 </project>
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/security/GreetingService.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/security/GreetingService.java
new file mode 100644
index 00000000000..0bac09ce6ab
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/security/GreetingService.java
@@ -0,0 +1,25 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.security;
+
+import jakarta.jws.WebService;
+
+@WebService
+public interface GreetingService {
+
+	String greet(String name);
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/security/GreetingServiceImpl.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/security/GreetingServiceImpl.java
new file mode 100644
index 00000000000..d10431b6abb
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/security/GreetingServiceImpl.java
@@ -0,0 +1,28 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.security;
+
+import jakarta.jws.WebService;
+
+@WebService(endpointInterface = "org.apache.camel.component.cxf.security.GreetingService")
+public class GreetingServiceImpl implements GreetingService {
+
+	@Override
+	public String greet(String name) {
+		return "Hello " + name;
+	}
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/security/jaas/SimpleLoginModule.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/security/jaas/SimpleLoginModule.java
new file mode 100644
index 00000000000..6d2302d05c8
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/security/jaas/SimpleLoginModule.java
@@ -0,0 +1,104 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.security.jaas;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Component;
+
+import javax.security.auth.Subject;
+import javax.security.auth.callback.Callback;
+import javax.security.auth.callback.CallbackHandler;
+import javax.security.auth.callback.NameCallback;
+import javax.security.auth.callback.PasswordCallback;
+import javax.security.auth.login.FailedLoginException;
+import javax.security.auth.login.LoginException;
+import javax.security.auth.spi.LoginModule;
+
+import java.net.URL;
+import java.util.Map;
+
+/**
+ * Simple LoginModule which checks plain username and password.
+ */
+@Component
+public class SimpleLoginModule implements LoginModule {
+	private static final Logger LOG = LoggerFactory.getLogger(SimpleLoginModule.class);
+
+	public static final String USERNAME = "admin";
+	public static final String PASSWORD = "admin";
+
+	private CallbackHandler callbackHandler;
+
+	private boolean succeeded = false;
+
+	static {
+		final URL jaasConfig = SimpleLoginModule.class.getClassLoader().getResource("simple-jaas.conf");
+		if (jaasConfig != null) {
+			// Set jaas configuration file
+			System.setProperty("java.security.auth.login.config", jaasConfig.toString());
+		} else {
+			LOG.debug("JAAS configuration doesn't exist.");
+		}
+	}
+
+	public SimpleLoginModule() {
+	}
+
+	public boolean abort() throws LoginException {
+		return false;
+	}
+
+	public boolean commit() throws LoginException {
+		return succeeded;
+	}
+
+	public void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options) {
+		this.callbackHandler = callbackHandler;
+		succeeded = false;
+	}
+
+	public boolean login() throws LoginException {
+		succeeded = false;
+		final Callback[] callbacks = new Callback[2];
+		callbacks[0] = new NameCallback("name:");
+		callbacks[1] = new PasswordCallback("password:", false);
+
+		try {
+			callbackHandler.handle(callbacks);
+		} catch (Exception e) {
+			throw new LoginException("Error with callback processing.");
+		}
+
+		final NameCallback nameCallback = (NameCallback) callbacks[0];
+		final PasswordCallback passwordCallback = (PasswordCallback) callbacks[1];
+
+		final String name = nameCallback.getName();
+		final String password = new String(passwordCallback.getPassword());
+
+		if (USERNAME.equals(name) && PASSWORD.equals(password)) {
+			succeeded = true;
+		} else {
+			throw new FailedLoginException("Sorry! No login for you.");
+		}
+		return succeeded;
+	}
+
+	public boolean logout() throws LoginException {
+		return false;
+	}
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfBeanScopeTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfBeanScopeTest.java
new file mode 100644
index 00000000000..2e27200831c
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfBeanScopeTest.java
@@ -0,0 +1,285 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+import java.net.SocketTimeoutException;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.net.ssl.HostnameVerifier;
+import jakarta.xml.ws.Endpoint;
+
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.ResolveEndpointFailedException;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.GreeterImplWithSleep;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxws.CxfConfigurer;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.support.jsse.KeyManagersParameters;
+import org.apache.camel.support.jsse.KeyStoreParameters;
+import org.apache.camel.support.jsse.SSLContextParameters;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Scope;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.transport.http.HTTPConduit;
+import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
+import org.apache.hello_world_soap_http.Greeter;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, CxfBeanScopeTest.class,
+                           CxfBeanScopeTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfBeanScopeTest {
+
+      
+    static int port = CXFTestSupport.getPort1();;
+    
+    protected static final String GREET_ME_OPERATION = "greetMe";
+    protected static final String TEST_MESSAGE = "Hello World!";
+    protected static final String SERVER_ADDRESS = "/CxfTimeoutTest/SoapContext/SoapPort";
+    protected static final String JAXWS_SERVER_ADDRESS
+            = "http://localhost:" + port + "/services/CxfTimeoutTest/SoapContext/SoapPort";
+
+    private Endpoint endpoint;
+    @BeforeEach
+    public void startService() {
+        Greeter implementor = new GreeterImplWithSleep();
+        endpoint = Endpoint.publish(SERVER_ADDRESS, implementor);
+    }
+    
+    @AfterEach
+    public void stopService() {
+        endpoint.stop();
+    }
+    
+    
+
+       
+    @Test
+    public void testSingltonScopeWithConflict() throws Exception {
+        try {
+            sendTimeOutMessage("cxf://bean:springEndpoint");
+            fail("Should get the Exception here.");
+        } catch (ResolveEndpointFailedException ex) {
+            assertTrue(ex.getMessage().contains(
+                "Different URI refer to the same CxfEndpoint Bean instance"));
+        }
+    }
+    
+    @Test
+    public void testSingltonScopeWithoutConflict() throws Exception {
+        sendTimeOutMessage("cxf://bean:springEndpoint?sslContextParameters=#mySslContext&hostnameVerifier=#defaultHostnameVerifier");
+    }
+    
+    @Test
+    public void testSingltonScopeWithoutConflictWithDifferentParaOrder() throws Exception {
+        sendTimeOutMessage("cxf://bean:springEndpoint?hostnameVerifier=#defaultHostnameVerifier&sslContextParameters=#mySslContext");
+    }
+    
+    @Test
+    public void testPrototyeScopeWithoutConflict() throws Exception {
+        //since it's prototype scope, so can't cause conflict even with different parameters
+        sendTimeOutMessage("cxf://bean:springEndpointNoParas?sslContextParameters=#mySslContext&hostnameVerifier=#defaultHostnameVerifier");
+    }
+
+    
+
+    protected void sendTimeOutMessage(String endpointUri) throws Exception {
+        Exchange reply = sendJaxWsMessage(endpointUri);
+        Exception e = reply.getException();
+        assertNotNull(e, "We should get the exception cause here");
+        assertTrue(e instanceof SocketTimeoutException, "We should get the time out exception here");
+    }
+
+    @Autowired
+    ProducerTemplate template;
+    protected Exchange sendJaxWsMessage(String endpointUri) throws InterruptedException {
+        Exchange exchange = template.send(endpointUri, new Processor() {
+            public void process(final Exchange exchange) {
+                final List<String> params = new ArrayList<>();
+                params.add(TEST_MESSAGE);
+                exchange.getIn().setBody(params);
+                exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION);
+            }
+        });
+        return exchange;
+    }
+
+    public static class MyCxfConfigurer implements CxfConfigurer {
+
+        @Override
+        public void configure(AbstractWSDLBasedEndpointFactory factoryBean) {
+            // Do nothing here
+        }
+
+        @Override
+        public void configureClient(Client client) {
+            // reset the timeout option to override the spring configuration one
+            HTTPConduit conduit = (HTTPConduit) client.getConduit();
+            HTTPClientPolicy policy = new HTTPClientPolicy();
+            policy.setReceiveTimeout(60000);
+            conduit.setClient(policy);
+
+        }
+
+        @Override
+        public void configureServer(Server server) {
+            // Do nothing here
+
+        }
+
+    }
+    
+    public static class OrigCxfConfigurer implements CxfConfigurer {
+
+        @Override
+        public void configure(AbstractWSDLBasedEndpointFactory factoryBean) {
+            // Do nothing here
+        }
+
+        @Override
+        public void configureClient(Client client) {
+            // reset the timeout option to override the spring configuration one
+            HTTPConduit conduit = (HTTPConduit) client.getConduit();
+            HTTPClientPolicy policy = new HTTPClientPolicy();
+            policy.setReceiveTimeout(100);
+            conduit.setClient(policy);
+
+        }
+
+        @Override
+        public void configureServer(Server server) {
+            // Do nothing here
+
+        }
+
+    }
+    
+    
+    
+    
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        HostnameVerifier defaultHostnameVerifier() {
+            return new org.apache.cxf.transport.https.httpclient.DefaultHostnameVerifier();
+        }
+        
+        @Bean
+        MyCxfConfigurer myConfigurer() {
+            return new MyCxfConfigurer();
+        }
+        
+        @Bean
+        OrigCxfConfigurer origConfigurer() {
+            return new OrigCxfConfigurer();
+        }
+        
+        @Bean
+        SSLContextParameters mySslContext() {
+            SSLContextParameters sslContext = new SSLContextParameters();
+            KeyManagersParameters keyManager = new KeyManagersParameters();
+            keyManager.setKeyPassword("changeit");
+            KeyStoreParameters keyStore = new KeyStoreParameters();
+            keyStore.setPassword("changeit");
+            keyStore.setResource("/localhost.p12");
+            keyManager.setKeyStore(keyStore);
+            sslContext.setKeyManagers(keyManager);
+            return sslContext;
+        }
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() throws InterruptedException {
+            ServletWebServerFactory webServerFactory = new UndertowServletWebServerFactory(port);
+            return webServerFactory;
+        }
+
+        
+        @Bean
+        CxfEndpoint springEndpoint() {
+            
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress(JAXWS_SERVER_ADDRESS);
+            cxfEndpoint.setCxfConfigurer(new OrigCxfConfigurer());
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        @Scope("prototype")
+        CxfEndpoint springEndpointNoParas() {
+            
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress(JAXWS_SERVER_ADDRESS);
+            cxfEndpoint.setCxfConfigurer(new OrigCxfConfigurer());
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("direct:start").
+                        to("cxf:bean:springEndpoint?sslContextParameters=#mySslContext&hostnameVerifier=#defaultHostnameVerifier");
+                    from("direct:doCatch").
+                        to("cxf:bean:springEndpointNoParas");
+                   
+                   
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfComponentEnableMtomTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfComponentEnableMtomTest.java
new file mode 100644
index 00000000000..0d5c74e5a9f
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfComponentEnableMtomTest.java
@@ -0,0 +1,145 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+import java.util.HashMap;
+import java.util.Map;
+
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.Endpoint;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.message.Message;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfComponentEnableMtomTest.class,
+                           CxfComponentEnableMtomTest.TestConfig.class,
+                           CxfAutoConfiguration.class
+})
+public class CxfComponentEnableMtomTest {
+
+    @Autowired
+    private CamelContext camelContext;
+    
+    
+    @Test
+    public void testIsMtomEnabledEnabledThroughBeanSetter() throws InterruptedException {
+        Endpoint endpoint = camelContext.getEndpoint("cxf:bean:mtomByBeanSetter");
+
+        if (endpoint instanceof CxfEndpoint) {
+            CxfEndpoint cxfEndpoint = (CxfEndpoint) endpoint;
+            assertTrue(cxfEndpoint.isMtomEnabled(), "Mtom should be enabled");
+        } else {
+            fail("CXF Endpoint not found");
+        }
+    }
+
+    @Test
+    public void testIsMtomEnabledEnabledThroughBeanProperties() throws InterruptedException {
+        Endpoint endpoint = camelContext.getEndpoint("cxf:bean:mtomByBeanProperties");
+
+        if (endpoint instanceof CxfEndpoint) {
+            CxfEndpoint cxfEndpoint = (CxfEndpoint) endpoint;
+            assertTrue(cxfEndpoint.isMtomEnabled(), "Mtom should be enabled");
+        } else {
+            fail("CXF Endpoint not found");
+        }
+    }
+
+    @Test
+    public void testIsMtomEnabledEnabledThroughURIProperties() throws InterruptedException {
+        Endpoint endpoint = camelContext.getEndpoint("cxf:bean:mtomByURIProperties?properties.mtom-enabled=true");
+
+        if (endpoint instanceof CxfEndpoint) {
+            CxfEndpoint cxfEndpoint = (CxfEndpoint) endpoint;
+            assertTrue(cxfEndpoint.isMtomEnabled(), "Mtom should be enabled");
+        } else {
+            fail("CXF Endpoint not found");
+        }
+    }
+
+    @Test
+    public void testIsMtomEnabledEnabledThroughQueryParameters() throws InterruptedException {
+        Endpoint endpoint = camelContext.getEndpoint("cxf:bean:mtomByQueryParameters?mtomEnabled=true");
+
+        if (endpoint instanceof CxfEndpoint) {
+            CxfEndpoint cxfEndpoint = (CxfEndpoint) endpoint;
+            assertTrue(cxfEndpoint.isMtomEnabled(), "Mtom should be enabled");
+        } else {
+            fail("CXF Endpoint not found");
+        }
+    }
+
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    
+    static class TestConfig {
+
+        @Bean("mtomByQueryParameters")
+        public CxfEndpoint mtomByQueryParameters(CamelContext context) {
+            CxfEndpoint endpoint = new CxfSpringEndpoint();
+            return endpoint;
+        }
+
+        @Bean("mtomByURIProperties")
+        public CxfEndpoint mtomByURIProperties() {
+            return new CxfSpringEndpoint();
+        }
+
+        @Bean("mtomByBeanProperties")
+        public CxfEndpoint mtomByBeanProperties() {
+            CxfEndpoint endpoint = new CxfSpringEndpoint();
+            Map<String, Object> properties = new HashMap<>();
+            properties.put(Message.MTOM_ENABLED, true);
+
+            endpoint.setProperties(properties);
+            return endpoint;
+
+        }
+
+        @Bean("mtomByBeanSetter")
+        public CxfEndpoint mtomByBeanSetter() {
+            CxfEndpoint endpoint = new CxfSpringEndpoint();
+            endpoint.setMtomEnabled(true);
+            return endpoint;
+
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerMessageTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerMessageTest.java
new file mode 100644
index 00000000000..fa7c76f7fb5
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerMessageTest.java
@@ -0,0 +1,153 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Message;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.HelloService;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
+
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.BusFactory;
+import org.apache.cxf.frontend.ClientFactoryBean;
+import org.apache.cxf.frontend.ClientProxyFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfConsumerMessageTest.class,
+        CxfConsumerMessageTest.TestConfiguration.class,
+        CxfConsumerMessageTest.ServletConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+       
+)
+public class CxfConsumerMessageTest {
+
+    private static final String TEST_MESSAGE = "Hello World!";
+
+    private static final String ECHO_METHOD = "ns1:echo xmlns:ns1=\"http://cxf.component.camel.apache.org/\"";
+
+    private static final String ECHO_RESPONSE = "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">"
+                                                + "<soap:Body><ns1:echoResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">"
+                                                + "<return xmlns=\"http://cxf.component.camel.apache.org/\">echo Hello World!</return>"
+                                                + "</ns1:echoResponse></soap:Body></soap:Envelope>";
+    private static final String ECHO_BOOLEAN_RESPONSE
+            = "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">"
+              + "<soap:Body><ns1:echoBooleanResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">"
+              + "<return xmlns=\"http://cxf.component.camel.apache.org/\">true</return>"
+              + "</ns1:echoBooleanResponse></soap:Body></soap:Envelope>";
+
+    protected final String simpleEndpointAddress = "/" + getClass().getSimpleName() + "-test";
+    protected final String simpleEndpointURI = "cxf://" + simpleEndpointAddress
+                                               + "?serviceClass=org.apache.camel.component.cxf.HelloService";
+
+    static int port = CXFTestSupport.getPort1();
+
+    @Autowired
+    ProducerTemplate template;
+    
+    
+    
+    @Test
+    public void testInvokingServiceFromClient() throws Exception {
+        ClientProxyFactoryBean proxyFactory = new ClientProxyFactoryBean();
+        ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean();
+        clientBean.setAddress("http://localhost:" + port 
+                              + "/services" + simpleEndpointAddress);
+        clientBean.setServiceClass(HelloService.class);
+        clientBean.setBus(BusFactory.getDefaultBus());
+
+        HelloService client = (HelloService) proxyFactory.create();
+
+        String result = client.echo(TEST_MESSAGE);
+        assertEquals(result, "echo " + TEST_MESSAGE, "We should get the echo string result from router");
+
+        Boolean bool = client.echoBoolean(Boolean.TRUE);
+        assertNotNull(bool, "The result should not be null");
+        assertEquals("true", bool.toString(), "We should get the echo boolean result from router");
+
+    }
+
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from(simpleEndpointURI + "&dataFormat=RAW").process(new Processor() {
+                        public void process(final Exchange exchange) {
+                            Message in = exchange.getIn();
+                            // check the content-length header is filtered 
+                            Object value = in.getHeader("Content-Length");
+                            assertNull(value, "The Content-Length header should be removed");
+                            // Get the request message
+                            String request = in.getBody(String.class);
+                            // Send the response message back
+                            if (request.indexOf(ECHO_METHOD) > 0) {
+                                exchange.getMessage().setBody(ECHO_RESPONSE);
+                            } else { // echoBoolean call
+                                exchange.getMessage().setBody(ECHO_BOOLEAN_RESPONSE);
+                            }
+
+                        }
+                    });
+                }
+            };
+        }
+    }
+    
+    @Configuration
+    class ServletConfiguration {
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+    }
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerPayLoadConverterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerPayLoadConverterTest.java
new file mode 100644
index 00000000000..a12ecefd852
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerPayLoadConverterTest.java
@@ -0,0 +1,101 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+
+import java.util.List;
+
+import javax.xml.transform.Source;
+
+import org.w3c.dom.Element;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CxfPayload;
+import org.apache.camel.converter.jaxp.XmlConverter;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.binding.soap.SoapHeader;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfConsumerPayLoadConverterTest.class,
+        CxfConsumerPayLoadConverterTest.TestConfiguration.class,
+        CxfConsumerMessageTest.ServletConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfConsumerPayLoadConverterTest extends CxfConsumerPayloadTest {
+
+        
+        
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from(simpleEndpointURI + "&dataFormat=PAYLOAD").to("log:info").process(new Processor() {
+                        @SuppressWarnings("unchecked")
+                        public void process(final Exchange exchange) throws Exception {
+                            CxfPayload<SoapHeader> requestPayload = exchange.getIn().getBody(CxfPayload.class);
+                            List<Source> inElements = requestPayload.getBodySources();
+                            // You can use a customer toStringConverter to turn a CxfPayLoad message into String as you want                        
+                            String request = exchange.getIn().getBody(String.class);
+                            String documentString = ECHO_RESPONSE;
+
+                            Element in = new XmlConverter().toDOMElement(inElements.get(0));
+                            // Just check the element namespace
+                            if (!in.getNamespaceURI().equals(ELEMENT_NAMESPACE)) {
+                                throw new IllegalArgumentException("Wrong element namespace");
+                            }
+                            if (in.getLocalName().equals("echoBoolean")) {
+                                documentString = ECHO_BOOLEAN_RESPONSE;
+                                checkRequest("ECHO_BOOLEAN_REQUEST", request);
+                            } else {
+                                documentString = ECHO_RESPONSE;
+                                checkRequest("ECHO_REQUEST", request);
+                            }
+                            // just set the documentString into to the message body
+                            exchange.getMessage().setBody(documentString);
+                        }
+                    });
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerPayloadFaultCauseEnabledTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerPayloadFaultCauseEnabledTest.java
new file mode 100644
index 00000000000..11c29dbf1f8
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerPayloadFaultCauseEnabledTest.java
@@ -0,0 +1,159 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+
+
+
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.ResourceBundle;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.soap.SOAPFault;
+import jakarta.xml.ws.BindingProvider;
+import jakarta.xml.ws.Holder;
+import jakarta.xml.ws.soap.SOAPFaultException;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.camel.wsdl_first.Person;
+import org.apache.camel.wsdl_first.PersonService;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.ext.logging.LoggingInInterceptor;
+import org.apache.cxf.ext.logging.LoggingOutInterceptor;
+import org.apache.cxf.frontend.ClientProxy;
+import org.apache.cxf.interceptor.Fault;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfConsumerPayloadFaultCauseEnabledTest.class,
+        CxfConsumerPayloadFaultCauseEnabledTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfConsumerPayloadFaultCauseEnabledTest {
+
+    protected static final QName SERVICE_QNAME = new QName("http://camel.apache.org/wsdl-first", "PersonService");
+    protected static final QName PORT_QNAME = new QName("http://camel.apache.org/wsdl-first", "soap");
+
+    static int port = CXFTestSupport.getPort1();
+    
+    
+    @Test
+    public void testInvokingFromCxfClient() throws Exception {
+        
+        URL wsdlURL = getClass().getClassLoader().getResource("person.wsdl");
+        PersonService ss = new PersonService(wsdlURL, SERVICE_QNAME);
+
+        Person client = ss.getSoap();
+
+        Client c = ClientProxy.getClient(client);
+        c.getInInterceptors().add(new LoggingInInterceptor());
+        c.getOutInterceptors().add(new LoggingOutInterceptor());
+        ((BindingProvider) client).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, 
+                     "http://localhost:" + port 
+                     + "/services/CxfConsumerPayloadFaultCauseEnabledTest/PersonService");
+
+        Holder<String> personId = new Holder<>();
+        personId.value = "";
+        Holder<String> ssn = new Holder<>();
+        Holder<String> name = new Holder<>();
+        try {
+            client.getPerson(personId, ssn, name);
+            fail("SOAPFault expected!");
+        } catch (Exception e) {
+            assertTrue(e instanceof SOAPFaultException);
+            SOAPFault fault = ((SOAPFaultException) e).getFault();
+            assertEquals("Someone messed up the service. Caused by: Homer", fault.getFaultString());
+        }
+    }
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+        @Bean
+        CxfEndpoint consumerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("/CxfConsumerPayloadFaultCauseEnabledTest/PersonService");
+            cxfEndpoint.setWsdlURL("classpath:person.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "PAYLOAD");
+            properties.put("exceptionMessageCauseEnabled", "true");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:consumerEndpoint").process(new Processor() {
+                        public void process(final Exchange exchange) throws Exception {
+                            Throwable cause = new IllegalArgumentException("Homer");
+                            Fault fault = new Fault("Someone messed up the service.", (ResourceBundle) null, cause);
+                            exchange.setException(fault);
+                        }
+                    });
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerPayloadTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerPayloadTest.java
new file mode 100644
index 00000000000..0bc605e4989
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerPayloadTest.java
@@ -0,0 +1,131 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.xml.transform.Source;
+import javax.xml.transform.dom.DOMSource;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CxfPayload;
+import org.apache.camel.converter.jaxp.XmlConverter;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.binding.soap.SoapHeader;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfConsumerPayloadTest.class,
+                           CxfConsumerPayloadTest.TestConfiguration.class,
+                           CxfConsumerMessageTest.ServletConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfConsumerPayloadTest extends CxfConsumerMessageTest {
+
+    protected static final String ECHO_RESPONSE = "<ns1:echoResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">"
+                                                  + "<return xmlns=\"http://cxf.component.camel.apache.org/\">echo Hello World!</return>"
+                                                  + "</ns1:echoResponse>";
+    protected static final String ECHO_BOOLEAN_RESPONSE = "<ns1:echoBooleanResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">"
+                                                          + "<return xmlns=\"http://cxf.component.camel.apache.org/\">true</return>"
+                                                          + "</ns1:echoBooleanResponse>";
+    protected static final String ECHO_REQUEST = "<ns1:echo xmlns:ns1=\"http://cxf.component.camel.apache.org/\">"
+                                                 + "<arg0 xmlns=\"http://cxf.component.camel.apache.org/\">Hello World!</arg0></ns1:echo>";
+    protected static final String ECHO_BOOLEAN_REQUEST = "<ns1:echoBoolean xmlns:ns1=\"http://cxf.component.camel.apache.org/\">"
+                                                         + "<arg0 xmlns=\"http://cxf.component.camel.apache.org/\">true</arg0></ns1:echoBoolean>";
+
+    protected static final String ELEMENT_NAMESPACE = "http://cxf.component.camel.apache.org/";
+    
+   
+    protected void checkRequest(String expect, String request) {
+
+        if (expect.equals("ECHO_REQUEST")) {
+            assertTrue(request.startsWith(ECHO_REQUEST.substring(0, 60))
+                       && request.endsWith(ECHO_REQUEST.substring(61)), "Get a wrong request");
+        } else {
+            assertTrue(request.startsWith(ECHO_BOOLEAN_REQUEST.substring(0, 67))
+                       && request.endsWith(ECHO_BOOLEAN_REQUEST.substring(68)), "Get a wrong request");
+        }
+    }
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from(simpleEndpointURI + "&dataFormat=PAYLOAD").to("log:info").process(new Processor() {
+                        @SuppressWarnings("unchecked")
+                        public void process(final Exchange exchange) throws Exception {
+                            CxfPayload<SoapHeader> requestPayload = exchange.getIn()
+                                .getBody(CxfPayload.class);
+                            List<Source> inElements = requestPayload.getBodySources();
+                            List<Source> outElements = new ArrayList<>();
+                            // You can use a customer toStringConverter to turn a CxfPayLoad message into
+                            // String as you want
+                            String request = exchange.getIn().getBody(String.class);
+                            XmlConverter converter = new XmlConverter();
+                            String documentString = ECHO_RESPONSE;
+
+                            Element in = new XmlConverter().toDOMElement(inElements.get(0));
+                            // Just check the element namespace
+                            if (!in.getNamespaceURI().equals(ELEMENT_NAMESPACE)) {
+                                throw new IllegalArgumentException("Wrong element namespace");
+                            }
+                            if (in.getLocalName().equals("echoBoolean")) {
+                                documentString = ECHO_BOOLEAN_RESPONSE;
+                                checkRequest("ECHO_BOOLEAN_REQUEST", request);
+                            } else {
+                                documentString = ECHO_RESPONSE;
+                                checkRequest("ECHO_REQUEST", request);
+                            }
+                            Document outDocument = converter.toDOMDocument(documentString, exchange);
+                            outElements.add(new DOMSource(outDocument.getDocumentElement()));
+                            // set the payload header with null
+                            CxfPayload<SoapHeader> responsePayload = new CxfPayload<>(null, outElements,
+                                                                                      null);
+                            exchange.getMessage().setBody(responsePayload);
+                        }
+                    });
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerProviderTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerProviderTest.java
new file mode 100644
index 00000000000..53b1cb8b8b1
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfConsumerProviderTest.java
@@ -0,0 +1,143 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+
+import org.w3c.dom.Node;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Message;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.converter.jaxp.XmlConverter;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfConsumerProviderTest.class,
+        CxfConsumerProviderTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfConsumerProviderTest {
+
+    protected static final String REQUEST_MESSAGE
+        = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"test/service\">"
+            + "<soapenv:Header/><soapenv:Body><ser:ping/></soapenv:Body></soapenv:Envelope>";
+
+    protected static final String RESPONSE_MESSAGE_BEGINE
+        = "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">"
+            + "<soap:Body><pong xmlns=\"test/service\"";
+    protected static final String RESPONSE_MESSAGE_END = "/></soap:Body></soap:Envelope>";
+
+    protected static final String RESPONSE = "<pong xmlns=\"test/service\"/>";
+
+    protected final String relativeAddress = "/" + getClass().getSimpleName() + "/test";
+    
+    protected final String simpleEndpointAddress = "http://localhost:" + port + "/services"
+                                            + relativeAddress;
+    protected final String simpleEndpointURI = "cxf://" + relativeAddress
+                                       + "?serviceClass=org.apache.camel.component.cxf.ServiceProvider";
+
+    static int port = CXFTestSupport.getPort1();
+
+    @Autowired
+    ProducerTemplate template;
+    
+    
+    
+    @Test
+    public void testInvokingServiceFromHttpCompnent() throws Exception {
+        // call the service with right post message
+
+        String response = template.requestBody(simpleEndpointAddress, REQUEST_MESSAGE, String.class);
+        assertTrue(response.startsWith(RESPONSE_MESSAGE_BEGINE), "Get a wrong response");
+        assertTrue(response.endsWith(RESPONSE_MESSAGE_END), "Get a wrong response");
+        try {
+            template.requestBody(simpleEndpointAddress, null, String.class);
+            fail("Excpetion to get exception here");
+        } catch (Exception ex) {
+            // do nothing here
+        }
+
+        response = template.requestBody(simpleEndpointAddress, REQUEST_MESSAGE, String.class);
+        assertTrue(response.startsWith(RESPONSE_MESSAGE_BEGINE), "Get a wrong response");
+        assertTrue(response.endsWith(RESPONSE_MESSAGE_END), "Get a wrong response");
+    }
+
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from(getFromEndpointUri()).process(new Processor() {
+                        public void process(final Exchange exchange) {
+                            Message in = exchange.getIn();
+                            Node node = in.getBody(Node.class);
+                            assertNotNull(node);
+                            XmlConverter xmlConverter = new XmlConverter();
+                            // Put the result back
+                            exchange.getMessage().setBody(xmlConverter.toSource(RESPONSE));
+                        }
+                    });
+                }
+            };
+        }
+    }
+    
+    protected String getFromEndpointUri() {
+        return simpleEndpointURI;
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfEndpointBeanTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfEndpointBeanTest.java
new file mode 100644
index 00000000000..14827484121
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfEndpointBeanTest.java
@@ -0,0 +1,157 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.handler.Handler;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.jaxws.CxfProducer;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.binding.soap.Soap12;
+import org.apache.cxf.binding.soap.SoapBindingConfiguration;
+import org.apache.cxf.configuration.security.AuthorizationPolicy;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.transport.http.HTTPConduit;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfEndpointBeanTest.class,
+                           CxfEndpointBeanTest.TestConfiguration.class
+})
+public class CxfEndpointBeanTest {
+    
+    private QName serviceName = QName.valueOf("{http://camel.apache.org/wsdl-first}PersonService");
+    private QName endpointName = QName.valueOf("{http://camel.apache.org/wsdl-first}soap");
+    static int port = CXFTestSupport.getPort1();
+    @Autowired
+    ApplicationContext ctx;
+    
+    @Test
+    public void testCxfEndpointsWithCamelContext() {
+        CamelContext context = ctx.getBean("camelContext", CamelContext.class);
+        // try to create a new CxfEndpoint which could override the old bean's setting
+        CxfEndpoint myLocalCxfEndpoint = (CxfEndpoint)context
+            .getEndpoint("cxf:bean:routerEndpoint?address=http://localhost:" + port + "/services"
+                         + "/CxfEndpointBeanTest/myCamelContext/");
+        assertEquals("http://localhost:" + port + "/services" + "/CxfEndpointBeanTest/myCamelContext/",
+                     myLocalCxfEndpoint.getAddress(), "Got the wrong endpoint address");
+
+        CxfEndpoint routerEndpoint = ctx.getBean("routerEndpoint", CxfEndpoint.class);
+        assertEquals("http://localhost:" + port + "/services" + "/CxfEndpointBeanTest/myCamelContext/",
+                     routerEndpoint.getAddress(), "Got the wrong endpoint address");
+    }
+
+    @Test
+    public void testPropertiesSettingOnCxfClient() throws Exception {
+        CxfEndpoint clientEndpoint = ctx.getBean("clientEndpoint", CxfEndpoint.class);
+        CxfProducer producer = (CxfProducer) clientEndpoint.createProducer();
+        // need to start the producer to get the client
+        producer.start();
+        Client client = producer.getClient();
+        HTTPConduit conduit = (HTTPConduit) client.getConduit();
+        assertEquals("test", conduit.getAuthorization().getUserName(), "Got the wrong user name");
+    }
+    
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.HelloService.class);
+            cxfEndpoint.setAddress("/CxfEndpointBeanTest/router");
+            cxfEndpoint.setContinuationTimeout(60000);
+            List<String> schemaLocations = new ArrayList<String>();
+            schemaLocations.add("classpath:wsdl/Message.xsd");
+            cxfEndpoint.setSchemaLocations(schemaLocations);
+            List<Handler> handlers = new ArrayList<Handler>();
+            handlers.add(new JaxwsTestHandler());
+            cxfEndpoint.setHandlers(handlers);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint clientEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.HelloService.class);
+            
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services/CxfEndpointBeanTest/helloworld");
+            
+            Map<String, Object> properties = new HashMap<String, Object>();
+            AuthorizationPolicy policy = new AuthorizationPolicy();
+            policy.setUserName("test");
+            properties.put("org.apache.cxf.configuration.security.AuthorizationPolicy", policy);
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint myEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.wsdl_first.Person.class);
+            cxfEndpoint.setAddress("/CxfEndpointBeanTest/test");
+            cxfEndpoint.setWsdlURL("person.wsdl");
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setLoggingFeatureEnabled(true);
+            cxfEndpoint.setLoggingSizeLimit(200);
+            
+            SoapBindingConfiguration bindingCfg = new SoapBindingConfiguration();
+            bindingCfg.setVersion(Soap12.getInstance());
+            cxfEndpoint.setBindingConfig(bindingCfg);
+            return cxfEndpoint;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct:start")
+                            .to("cxf:bean:myEndpoint");
+                    from("cxf:bean:myEndpoint").to("mock:result");
+                }
+            };
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfMessageHeaderTimeoutTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfMessageHeaderTimeoutTest.java
new file mode 100644
index 00000000000..60838cd4a4d
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfMessageHeaderTimeoutTest.java
@@ -0,0 +1,167 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+
+
+
+import java.net.SocketTimeoutException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import jakarta.xml.ws.Endpoint;
+
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.GreeterImplWithSleep;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
+import org.apache.hello_world_soap_http.Greeter;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfMessageHeaderTimeoutTest.class,
+        CxfMessageHeaderTimeoutTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfMessageHeaderTimeoutTest {
+    
+    
+    protected static final String GREET_ME_OPERATION = "greetMe";
+    protected static final String TEST_MESSAGE = "Hello World!";
+    protected static final String SERVER_ADDRESS
+            = "/CxfMessageHeaderTimeoutTest/SoapContext/SoapPort";
+
+    
+    
+    static int port = CXFTestSupport.getPort1();
+
+    private Endpoint endpoint;
+    
+    @BeforeEach
+    public void startService() {
+        Greeter implementor = new GreeterImplWithSleep();
+        endpoint = Endpoint.publish(SERVER_ADDRESS, implementor);
+    }
+    
+    @AfterEach
+    public void stopService() {
+        endpoint.stop();
+    }
+    
+    
+    @Autowired
+    ProducerTemplate template;
+    
+    @Test
+    public void testInvokingJaxWsServerWithCxfEndpoint() throws Exception {
+        sendTimeOutMessage("cxf://bean:springEndpoint");
+    }
+
+    protected void sendTimeOutMessage(String endpointUri) throws Exception {
+        Exchange reply = sendJaxWsMessage(endpointUri);
+        Exception e = reply.getException();
+        assertNotNull(e, "We should get the exception cause here");
+        assertTrue(e instanceof SocketTimeoutException, "We should get the time out exception here");
+    }
+
+    protected Exchange sendJaxWsMessage(String endpointUri) throws InterruptedException {
+        Exchange exchange = template.send(endpointUri, new Processor() {
+            public void process(final Exchange exchange) {
+                final List<String> params = new ArrayList<>();
+                params.add(TEST_MESSAGE);
+                exchange.getIn().setBody(params);
+                exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION);
+                // setup the receive timeout dynamically
+                Map<String, Object> requestContext = new HashMap<>();
+                HTTPClientPolicy clientPolicy = new HTTPClientPolicy();
+                clientPolicy.setReceiveTimeout(100);
+                requestContext.put(HTTPClientPolicy.class.getName(), clientPolicy);
+                exchange.getIn().setBody(params);
+                exchange.getIn().setHeader(Client.REQUEST_CONTEXT, requestContext);
+
+            }
+        });
+        return exchange;
+    }
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("direct:start").to("cxf:bean:springEndpoint");
+                }
+            };
+        }
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        @Bean
+        public CxfEndpoint springEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("http://localhost:" + port 
+                                   + "/services" + SERVER_ADDRESS);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            return cxfEndpoint;
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfNonWrapperTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfNonWrapperTest.java
new file mode 100644
index 00000000000..3eb12a93f58
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfNonWrapperTest.java
@@ -0,0 +1,142 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+
+
+
+import java.net.URL;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.BindingProvider;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.non_wrapper.Person;
+import org.apache.camel.non_wrapper.PersonProcessor;
+import org.apache.camel.non_wrapper.PersonService;
+import org.apache.camel.non_wrapper.UnknownPersonFault;
+import org.apache.camel.non_wrapper.types.GetPerson;
+import org.apache.camel.non_wrapper.types.GetPersonResponse;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfNonWrapperTest.class,
+        CxfNonWrapperTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfNonWrapperTest {
+    
+    private static final QName SERVICE_NAME = new QName("http://camel.apache.org/wsdl-first", "PersonService");
+    private static final QName PORT_NAME = new QName("http://camel.apache.org/wsdl-first", "soap");
+
+    
+    static int port = CXFTestSupport.getPort1();
+
+    @Test
+    public void testInvokingServiceFromCXFClient() throws Exception {
+
+        URL wsdlURL = getClass().getClassLoader().getResource("person-non-wrapper.wsdl");
+        PersonService ss = new PersonService(wsdlURL, new QName("http://camel.apache.org/non-wrapper", "PersonService"));
+        Person client = ss.getSoap();
+        ((BindingProvider) client).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfNonWrapperTest/PersonService/");
+
+        GetPerson request = new GetPerson();
+        request.setPersonId("hello");
+        GetPersonResponse response = client.getPerson(request);
+
+        assertEquals("Bonjour", response.getName(), "we should get the right answer from router");
+
+        request.setPersonId("");
+        try {
+            client.getPerson(request);
+            fail("We expect to get the UnknowPersonFault here");
+        } catch (UnknownPersonFault fault) {
+            // We expect to get fault here
+        }
+    }
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public PersonProcessor personProcessor() {
+            return new PersonProcessor();
+        }
+        
+           
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_NAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_NAME);
+            cxfEndpoint.setServiceClass(org.apache.camel.non_wrapper.Person.class);
+            cxfEndpoint.setAddress("/CxfNonWrapperTest/PersonService/");
+            cxfEndpoint.setDataFormat(DataFormat.POJO);
+            return cxfEndpoint;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint")
+                    .process("personProcessor");
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfOneWayRouteTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfOneWayRouteTest.java
new file mode 100644
index 00000000000..f8681da10fc
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfOneWayRouteTest.java
@@ -0,0 +1,219 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+
+
+
+import java.io.ByteArrayOutputStream;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.Service;
+
+import org.apache.camel.EndpointInject;
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.jaxws.DefaultCxfBinding;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.spi.Synchronization;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.Greeter;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfOneWayRouteTest.class,
+        CxfOneWayRouteTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfOneWayRouteTest {
+
+    private static final QName SERVICE_NAME = new QName("http://apache.org/hello_world_soap_http", "SOAPService");
+    private static final QName PORT_NAME = new QName("http://apache.org/hello_world_soap_http", "SoapPort");
+    private static final String ROUTER_ADDRESS = "/CxfOneWayRouteTest/router";
+
+    private static Exception bindingException;
+    private static boolean bindingDone;
+    private static boolean onCompeletedCalled;
+    
+    static int port = CXFTestSupport.getPort1();
+
+    @BeforeEach
+    public void setup() {
+        bindingException = null;
+        bindingDone = false;
+        onCompeletedCalled = false;
+    }
+    
+    
+    protected Greeter getCXFClient() throws Exception {
+        Service service = Service.create(SERVICE_NAME);
+        service.addPort(PORT_NAME, "http://schemas.xmlsoap.org/soap/", 
+                        "http://localhost:" + port 
+                        + "/services" + ROUTER_ADDRESS);
+        Greeter greeter = service.getPort(PORT_NAME, Greeter.class);
+        return greeter;
+    }
+
+ 
+
+    @EndpointInject("mock:result")
+    MockEndpoint mock;
+    
+       
+    @Bean
+    TestProcessor testProcessor() {
+        return new TestProcessor();
+    }
+    
+    @Test
+    public void testInvokingOneWayServiceFromCXFClient() throws Exception {
+        mock.expectedMessageCount(1);
+        mock.expectedFileExists("target/camel-file/cxf-oneway-route");
+
+        Greeter client = getCXFClient();
+        client.greetMeOneWay("lemac");
+
+        // may need to wait until the oneway call completes 
+        long waitUntil = System.currentTimeMillis() + 10000;
+        while (!bindingDone && System.currentTimeMillis() < waitUntil) {
+            Thread.sleep(1000);
+        }
+
+        mock.assertIsSatisfied();
+        assertTrue(onCompeletedCalled, "UnitOfWork done should be called");
+        assertNull(bindingException, "exception occured: " + bindingException);
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_NAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_NAME);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.GreeterImpl.class);
+            cxfEndpoint.setAddress(ROUTER_ADDRESS);
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("org.apache.cxf.oneway.robust", true);
+            cxfEndpoint.setProperties(properties);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            cxfEndpoint.setCxfBinding(new TestCxfBinding());
+            return cxfEndpoint;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint")
+                    .to("log:org.apache.camel?level=DEBUG")
+                    .to("bean:testProcessor")
+                    .to("file://target/camel-file/cxf-oneway-route")
+                    .to("mock:result");
+                }
+            };
+        }
+    }
+    
+    public static class TestProcessor implements Processor {
+        static final byte[] MAGIC = { (byte) 0xca, 0x3e, 0x1e };
+
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            // just check the MEP here
+            assertEquals(ExchangePattern.InOnly, exchange.getPattern(), "Don't get the right MEP");
+            // adding some binary segment
+            String msg = exchange.getIn().getBody(String.class);
+            ByteArrayOutputStream bos = new ByteArrayOutputStream();
+            bos.write(MAGIC);
+            bos.write(msg.getBytes());
+            exchange.getIn().setBody(bos.toByteArray());
+            // add compliation
+            exchange.getUnitOfWork().addSynchronization(new Synchronization() {
+                @Override
+                public void onComplete(Exchange exchange) {
+                    onCompeletedCalled = true;
+                }
+
+                @Override
+                public void onFailure(Exchange exchange) {
+                    // do nothing here
+                }
+            });
+        }
+    }
+
+    public static class TestCxfBinding extends DefaultCxfBinding {
+
+        @Override
+        public void populateCxfResponseFromExchange(Exchange camelExchange, org.apache.cxf.message.Exchange cxfExchange) {
+            try {
+                super.populateCxfResponseFromExchange(camelExchange, cxfExchange);
+            } catch (RuntimeException e) {
+                bindingException = e;
+                throw e;
+            } finally {
+                bindingDone = true;
+            }
+        }
+
+    }
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfPayLoadMessageXmlBindingRouterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfPayLoadMessageXmlBindingRouterTest.java
new file mode 100644
index 00000000000..7b716842d80
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfPayLoadMessageXmlBindingRouterTest.java
@@ -0,0 +1,177 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+import java.util.List;
+
+import javax.xml.transform.Source;
+
+import org.w3c.dom.Element;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.HelloService;
+import org.apache.camel.component.cxf.HelloServiceImpl;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.CxfPayload;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.converter.jaxp.XmlConverter;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.frontend.ClientFactoryBean;
+import org.apache.cxf.frontend.ClientProxyFactoryBean;
+import org.apache.cxf.frontend.ServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfPayLoadMessageXmlBindingRouterTest.class,
+                           CxfPayLoadMessageXmlBindingRouterTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfPayLoadMessageXmlBindingRouterTest {
+
+    protected static final String ROUTER_ADDRESS =  "/CxfPayLoadMessageXmlBindingRouterTest/router";
+    protected static final String SERVICE_ADDRESS = "/CxfPayLoadMessageXmlBindingRouterTest/helloworld";
+
+    protected static String getBindingId() {
+        return "http://cxf.apache.org/bindings/xformat";
+    }
+    
+    static int port = CXFTestSupport.getPort1();;
+    
+    @BeforeEach
+    public void startService() {
+        //start a service
+        ServerFactoryBean svrBean = new ServerFactoryBean();
+
+        svrBean.setAddress(SERVICE_ADDRESS);
+        svrBean.setServiceClass(HelloService.class);
+        svrBean.setServiceBean(new HelloServiceImpl());
+        svrBean.setBindingId(getBindingId());
+        Server server = svrBean.create();
+        server.start();
+    }
+    
+    
+    
+    protected HelloService getCXFClient() throws Exception {
+        ClientProxyFactoryBean proxyFactory = new ClientProxyFactoryBean();
+        ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean();
+        clientBean.setAddress("http://localhost:" + port 
+                              + "/services" + ROUTER_ADDRESS);
+        clientBean.setServiceClass(HelloService.class);
+        clientBean.setBindingId(getBindingId());
+
+        HelloService client = (HelloService) proxyFactory.create();
+        return client;
+    }
+    
+    @Test
+    public void testInvokingServiceFromCXFClient() throws Exception {
+        HelloService client = getCXFClient();
+        String result = client.echo("hello world");
+        assertEquals("echo hello world", result, "we should get the right answer from router");
+
+        int count = client.getInvocationCount();
+        client.ping();
+        //oneway ping invoked, so invocationCount ++
+        assertEquals(client.getInvocationCount(), ++count, "The ping should be invocated");
+    }
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() throws InterruptedException {
+            ServletWebServerFactory webServerFactory = new UndertowServletWebServerFactory(port);
+            return webServerFactory;
+        }
+
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.HelloService.class);
+            cxfEndpoint.setAddress(ROUTER_ADDRESS);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            cxfEndpoint.setBindingId(getBindingId());
+            return cxfEndpoint;
+        }
+
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.HelloService.class);
+            cxfEndpoint.setAddress("http://localhost:" 
+                + port  + "/services" + SERVICE_ADDRESS);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            cxfEndpoint.setBindingId(getBindingId());
+            return cxfEndpoint;
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("cxf:bean:routerEndpoint").process(new Processor() {
+                        public void process(Exchange exchange) throws Exception {
+                            CxfPayload<?> payload = exchange.getIn().getBody(CxfPayload.class);
+                            List<Source> elements = payload.getBodySources();
+                            assertNotNull(elements, "We should get the elements here");
+                            assertEquals(1, elements.size(), "Get the wrong elements size");
+
+                            Element el = new XmlConverter().toDOMElement(elements.get(0));
+                            assertEquals("http://cxf.component.camel.apache.org/", el.getNamespaceURI(),
+                                    "Get the wrong namespace URI");
+                        }
+
+                    })
+                            .to("cxf:bean:serviceEndpoint");
+
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfPayLoadSoapHeaderSpringTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfPayLoadSoapHeaderSpringTest.java
new file mode 100644
index 00000000000..39aed444d22
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfPayLoadSoapHeaderSpringTest.java
@@ -0,0 +1,213 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+
+
+
+
+import java.net.URL;
+import java.util.List;
+
+import javax.xml.namespace.QName;
+import javax.xml.transform.Source;
+import javax.xml.transform.dom.DOMSource;
+import jakarta.xml.ws.BindingProvider;
+import jakarta.xml.ws.Endpoint;
+
+import org.w3c.dom.Element;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.PizzaImpl;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.CxfPayload;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.converter.jaxp.XmlConverter;
+import org.apache.camel.pizza.Pizza;
+import org.apache.camel.pizza.PizzaService;
+import org.apache.camel.pizza.types.CallerIDHeaderType;
+import org.apache.camel.pizza.types.OrderPizzaResponseType;
+import org.apache.camel.pizza.types.OrderPizzaType;
+import org.apache.camel.pizza.types.ToppingsListType;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.binding.soap.SoapHeader;
+import org.apache.cxf.headers.Header;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfPayLoadSoapHeaderSpringTest.class,
+        CxfPayLoadSoapHeaderSpringTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfPayLoadSoapHeaderSpringTest {
+    
+    private final QName serviceName = new QName("http://camel.apache.org/pizza", "PizzaService");
+    
+    static int port = CXFTestSupport.getPort1();
+
+    protected void start(String n) {
+        Object implementor = new PizzaImpl();
+        String address = "/" + n
+                         + "/new_pizza_service/services/PizzaService";
+        Endpoint.publish(address, implementor);
+    }
+
+    @BeforeEach
+    public void startService() {
+        start(getClass().getSimpleName());
+    }
+
+       
+    
+    @Test
+    public void testPizzaService() {
+        Pizza port = getPort();
+
+        OrderPizzaType req = new OrderPizzaType();
+        ToppingsListType t = new ToppingsListType();
+        t.getTopping().add("test");
+        req.setToppings(t);
+
+        CallerIDHeaderType header = new CallerIDHeaderType();
+        header.setName("Willem");
+        header.setPhoneNumber("108");
+
+        OrderPizzaResponseType res = port.orderPizza(req, header);
+
+        assertEquals(208, res.getMinutesUntilReady());
+    }
+
+    private Pizza getPort() {
+        URL wsdl = getClass().getResource("/pizza_service.wsdl");
+        assertNotNull(wsdl, "WSDL is null");
+
+        PizzaService service = new PizzaService(wsdl, serviceName);
+        assertNotNull(service, "Service is null");
+
+        Pizza pizza = service.getPizzaPort();
+        ((BindingProvider) pizza).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/" + getClass().getSimpleName()
+                                                                + "/pizza_service/services/PizzaService");
+        return pizza;
+    }
+
+     
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setWsdlURL("pizza_service.wsdl");
+            cxfEndpoint.setAddress("/" + "CxfPayLoadSoapHeaderSpringTest" 
+                                   + "/pizza_service/services/PizzaService");
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setWsdlURL("pizza_service.wsdl");
+            cxfEndpoint.setAddress("http://localhost:" + port  
+                                   + "/services/" + "CxfPayLoadSoapHeaderSpringTest" 
+                                   + "/new_pizza_service/services/PizzaService");
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+        
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    // START SNIPPET: payload
+                    from("cxf:bean:routerEndpoint").process(new Processor() {
+                        @SuppressWarnings("unchecked")
+                        public void process(Exchange exchange) throws Exception {
+                            CxfPayload<SoapHeader> payload = exchange.getIn().getBody(CxfPayload.class);
+                            List<Source> elements = payload.getBodySources();
+                            assertNotNull(elements, "We should get the elements here");
+                            assertEquals(1, elements.size(), "Get the wrong elements size");
+
+                            Element el = new XmlConverter().toDOMElement(elements.get(0));
+                            elements.set(0, new DOMSource(el));
+                            assertEquals("http://camel.apache.org/pizza/types",
+                                    el.getNamespaceURI(), "Get the wrong namespace URI");
+
+                            List<SoapHeader> headers = payload.getHeaders();
+                            assertNotNull(headers, "We should get the headers here");
+                            assertEquals(1, headers.size(), "Get the wrong headers size");
+                            assertEquals("http://camel.apache.org/pizza/types",
+                                    ((Element) (headers.get(0).getObject())).getNamespaceURI(), "Get the wrong namespace URI");
+                            // alternatively you can also get the SOAP header via the camel header:
+                            headers = exchange.getIn().getHeader(Header.HEADER_LIST, List.class);
+                            assertNotNull(headers, "We should get the headers here");
+                            assertEquals(1, headers.size(), "Get the wrong headers size");
+                            assertEquals("http://camel.apache.org/pizza/types",
+                                    ((Element) (headers.get(0).getObject())).getNamespaceURI(), "Get the wrong namespace URI");
+
+                        }
+
+                    })
+                            .to("cxf:bean:serviceEndpoint");
+                    // END SNIPPET: payload
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfSpringCustomizedExceptionTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfSpringCustomizedExceptionTest.java
new file mode 100644
index 00000000000..7c00b156e9d
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfSpringCustomizedExceptionTest.java
@@ -0,0 +1,146 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Text;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.binding.soap.SoapFault;
+import org.apache.cxf.interceptor.Fault;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfSpringCustomizedExceptionTest.class,
+                           CxfSpringCustomizedExceptionTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfSpringCustomizedExceptionTest {
+
+    private static final String EXCEPTION_MESSAGE = "This is an exception test message";
+    private static final String DETAIL_TEXT = "This is a detail text node";
+    private static final SoapFault SOAP_FAULT;
+    static int port = CXFTestSupport.getPort1();
+
+    static {
+        // START SNIPPET: FaultDefine
+        SOAP_FAULT = new SoapFault(EXCEPTION_MESSAGE, Fault.FAULT_CODE_CLIENT);
+        Element detail = SOAP_FAULT.getOrCreateDetail();
+        Document doc = detail.getOwnerDocument();
+        Text tn = doc.createTextNode(DETAIL_TEXT);
+        detail.appendChild(tn);
+        // END SNIPPET: FaultDefine
+    }
+    
+    
+    
+    @Bean
+    private CxfEndpoint serviceEndpoint() {
+        CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+        cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.HelloService.class);
+        cxfEndpoint.setAddress("http://localhost:" + port 
+                               + "/services/CxfSpringCustomizedExceptionTest/router");
+        return cxfEndpoint;
+    }
+
+    @Autowired
+    ProducerTemplate template;
+    
+    @Test
+    public void testInvokingServiceFromCamel() throws Exception {
+        try {
+            template.sendBodyAndHeader("direct:start", ExchangePattern.InOut, "hello world", CxfConstants.OPERATION_NAME,
+                    "echo");
+            fail("Should have thrown an exception");
+        } catch (Exception ex) {
+            Throwable result = ex.getCause();
+            assertTrue(result instanceof SoapFault, "Exception is not instance of SoapFault");
+            assertEquals(DETAIL_TEXT, ((SoapFault) result).getDetail().getTextContent(), "Expect to get right detail message");
+            assertEquals("{http://schemas.xmlsoap.org/soap/envelope/}Client", ((SoapFault) result).getFaultCode().toString(),
+                    "Expect to get right fault-code");
+        }
+
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.HelloService.class);
+            cxfEndpoint.setAddress("/CxfSpringCustomizedExceptionTest/router");
+            return cxfEndpoint;
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct:start")
+                            .to("cxf:bean:serviceEndpoint");
+                    from("cxf:bean:routerEndpoint").process(new Processor() {
+                        public void process(final Exchange exchange) {
+                            exchange.getMessage().setBody(SOAP_FAULT);
+                        }
+                    }).to("log:mylog");
+
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfSpringRouterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfSpringRouterTest.java
new file mode 100644
index 00000000000..3c53764ff9e
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfSpringRouterTest.java
@@ -0,0 +1,163 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+
+
+
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.HelloService;
+import org.apache.camel.component.cxf.HelloServiceImpl;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.frontend.ClientFactoryBean;
+import org.apache.cxf.frontend.ClientProxyFactoryBean;
+import org.apache.cxf.frontend.ServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfSpringRouterTest.class,
+        CxfSpringRouterTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfSpringRouterTest {
+    
+    protected Server server;
+    
+    static int port = CXFTestSupport.getPort1();
+
+    @BeforeEach
+    public void startService() {
+        //start a service
+        ServerFactoryBean svrBean = new ServerFactoryBean();
+
+        svrBean.setAddress("/CxfSpringRouterTest/helloworld");
+        svrBean.setServiceClass(HelloService.class);
+        svrBean.setServiceBean(new HelloServiceImpl());
+        server = svrBean.create();
+        server.start();
+    }
+
+    @AfterEach
+    public void shutdownService() {
+        if (server != null) {
+            server.stop();
+        }
+    }
+
+    
+    
+    
+    @Bean
+    private CxfEndpoint routerEndpoint() {
+        CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+        cxfEndpoint.setServiceClass(HelloService.class);
+        cxfEndpoint.setAddress("/CxfSpringRouterTest/router");
+        return cxfEndpoint;
+    }
+    
+    @Bean
+    private CxfEndpoint serviceEndpoint() {
+        CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+        cxfEndpoint.setServiceClass(HelloService.class);
+        cxfEndpoint.setAddress("http://localhost:" + port 
+                               + "/services/CxfSpringRouterTest/helloworld");
+        return cxfEndpoint;
+    }
+    
+    protected HelloService getCXFClient() throws Exception {
+        ClientProxyFactoryBean proxyFactory = new ClientProxyFactoryBean();
+        ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean();
+        clientBean.setAddress("http://localhost:" + port 
+                              + "/services/CxfSpringRouterTest/router");
+        clientBean.setServiceClass(HelloService.class);
+
+        HelloService client = (HelloService) proxyFactory.create();
+        return client;
+    }
+
+    @Test
+    public void testInvokingServiceFromCXFClient() throws Exception {
+        HelloService client = getCXFClient();
+        String result = client.echo("hello world");
+        assertEquals("echo hello world", result, "we should get the right answer from router");
+
+    }
+
+    @Test
+    public void testOnwayInvocation() throws Exception {
+        HelloService client = getCXFClient();
+        int count = client.getInvocationCount();
+        client.ping();
+        //oneway ping invoked, so invocationCount ++
+        assertEquals(client.getInvocationCount(), ++count, "The ping should be invocated");
+    }
+
+     
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint").to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfTimeoutTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfTimeoutTest.java
new file mode 100644
index 00000000000..8ac48e2d8a8
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/CxfTimeoutTest.java
@@ -0,0 +1,268 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+import java.net.SocketTimeoutException;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.net.ssl.HostnameVerifier;
+import jakarta.xml.ws.Endpoint;
+
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.GreeterImplWithSleep;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxws.CxfConfigurer;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.support.jsse.KeyManagersParameters;
+import org.apache.camel.support.jsse.KeyStoreParameters;
+import org.apache.camel.support.jsse.SSLContextParameters;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Scope;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.transport.http.HTTPConduit;
+import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
+import org.apache.hello_world_soap_http.Greeter;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, CxfTimeoutTest.class,
+                           CxfTimeoutTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfTimeoutTest {
+
+      
+    static int port = CXFTestSupport.getPort1();;
+    
+    protected static final String GREET_ME_OPERATION = "greetMe";
+    protected static final String TEST_MESSAGE = "Hello World!";
+    protected static final String SERVER_ADDRESS = "/CxfTimeoutTest/SoapContext/SoapPort";
+    protected static final String JAXWS_SERVER_ADDRESS
+            = "http://localhost:" + port + "/services/CxfTimeoutTest/SoapContext/SoapPort";
+
+    private Endpoint endpoint;
+    @BeforeEach
+    public void startService() {
+        Greeter implementor = new GreeterImplWithSleep();
+        endpoint = Endpoint.publish(SERVER_ADDRESS, implementor);
+    }
+    
+    @AfterEach
+    public void stopService() {
+        endpoint.stop();
+    }
+    
+    
+
+    @Test
+    public void testInvokingJaxWsServerWithBusUriParams() throws Exception {
+        sendTimeOutMessage("cxf://" + JAXWS_SERVER_ADDRESS + "?serviceClass=org.apache.hello_world_soap_http.Greeter&bus=#cxf&cxfConfigurer=#origConfigurer");
+    }
+
+    @Test
+    public void testInvokingJaxWsServerWithoutBusUriParams() throws Exception {
+        sendTimeOutMessage("cxf://" + JAXWS_SERVER_ADDRESS + "?serviceClass=org.apache.hello_world_soap_http.Greeter&cxfConfigurer=#origConfigurer");
+    }
+
+    @Test
+    public void testInvokingJaxWsServerWithCxfEndpoint() throws Exception {
+        sendTimeOutMessage("cxf://bean:springEndpoint");
+    }
+
+    @Test
+    public void testInvokingFromCamelRoute() throws Exception {
+        sendTimeOutMessage("direct:start");
+    }
+
+    @Test
+    public void testDoCatchWithTimeOutException() throws Exception {
+        sendTimeOutMessage("direct:doCatch");
+    }
+
+    protected void sendTimeOutMessage(String endpointUri) throws Exception {
+        Exchange reply = sendJaxWsMessage(endpointUri);
+        Exception e = reply.getException();
+        assertNotNull(e, "We should get the exception cause here");
+        assertTrue(e instanceof SocketTimeoutException, "We should get the time out exception here");
+    }
+
+    @Autowired
+    ProducerTemplate template;
+    protected Exchange sendJaxWsMessage(String endpointUri) throws InterruptedException {
+        Exchange exchange = template.send(endpointUri, new Processor() {
+            public void process(final Exchange exchange) {
+                final List<String> params = new ArrayList<>();
+                params.add(TEST_MESSAGE);
+                exchange.getIn().setBody(params);
+                exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION);
+            }
+        });
+        return exchange;
+    }
+
+    public static class MyCxfConfigurer implements CxfConfigurer {
+
+        @Override
+        public void configure(AbstractWSDLBasedEndpointFactory factoryBean) {
+            // Do nothing here
+        }
+
+        @Override
+        public void configureClient(Client client) {
+            // reset the timeout option to override the spring configuration one
+            HTTPConduit conduit = (HTTPConduit) client.getConduit();
+            HTTPClientPolicy policy = new HTTPClientPolicy();
+            policy.setReceiveTimeout(60000);
+            conduit.setClient(policy);
+
+        }
+
+        @Override
+        public void configureServer(Server server) {
+            // Do nothing here
+
+        }
+
+    }
+    
+    public static class OrigCxfConfigurer implements CxfConfigurer {
+
+        @Override
+        public void configure(AbstractWSDLBasedEndpointFactory factoryBean) {
+            // Do nothing here
+        }
+
+        @Override
+        public void configureClient(Client client) {
+            // reset the timeout option to override the spring configuration one
+            HTTPConduit conduit = (HTTPConduit) client.getConduit();
+            HTTPClientPolicy policy = new HTTPClientPolicy();
+            policy.setReceiveTimeout(100);
+            conduit.setClient(policy);
+
+        }
+
+        @Override
+        public void configureServer(Server server) {
+            // Do nothing here
+
+        }
+
+    }
+    
+    
+    
+    
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        HostnameVerifier defaultHostnameVerifier() {
+            return new org.apache.cxf.transport.https.httpclient.DefaultHostnameVerifier();
+        }
+        
+        @Bean
+        MyCxfConfigurer myConfigurer() {
+            return new MyCxfConfigurer();
+        }
+        
+        @Bean
+        OrigCxfConfigurer origConfigurer() {
+            return new OrigCxfConfigurer();
+        }
+        
+        @Bean
+        SSLContextParameters mySslContext() {
+            SSLContextParameters sslContext = new SSLContextParameters();
+            KeyManagersParameters keyManager = new KeyManagersParameters();
+            keyManager.setKeyPassword("changeit");
+            KeyStoreParameters keyStore = new KeyStoreParameters();
+            keyStore.setPassword("changeit");
+            keyStore.setResource("/localhost.p12");
+            keyManager.setKeyStore(keyStore);
+            sslContext.setKeyManagers(keyManager);
+            return sslContext;
+        }
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() throws InterruptedException {
+            ServletWebServerFactory webServerFactory = new UndertowServletWebServerFactory(port);
+            return webServerFactory;
+        }
+
+        
+        @Bean
+        @Scope("prototype")
+        CxfEndpoint springEndpoint() {
+            
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress(JAXWS_SERVER_ADDRESS);
+            cxfEndpoint.setCxfConfigurer(new OrigCxfConfigurer());
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("direct:start").
+                        to("cxf:bean:springEndpoint?sslContextParameters=#mySslContext&hostnameVerifier=#defaultHostnameVerifier");
+                    from("direct:doCatch").
+                        to("cxf:bean:springEndpoint");
+                   
+                   
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/FileToCxfMessageDataFormatTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/FileToCxfMessageDataFormatTest.java
new file mode 100644
index 00000000000..24a6e4e40cd
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/FileToCxfMessageDataFormatTest.java
@@ -0,0 +1,176 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+
+
+
+import static org.apache.camel.test.junit5.TestSupport.deleteDirectory;
+
+import org.apache.camel.EndpointInject;
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.HelloService;
+import org.apache.camel.component.cxf.HelloServiceImpl;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.frontend.ServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        FileToCxfMessageDataFormatTest.class,
+        FileToCxfMessageDataFormatTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class FileToCxfMessageDataFormatTest {
+
+    
+    private static final Logger LOG = LoggerFactory.getLogger(FileToCxfMessageDataFormatTest.class);
+    
+    private Server server;
+    
+    static int port = CXFTestSupport.getPort1();
+
+    @BeforeEach
+    public void setUp() throws Exception {
+        deleteDirectory("target/filetocxf");
+
+        // set CXF
+        ServerFactoryBean factory = new ServerFactoryBean();
+
+        factory.setAddress("/FileToCxfMessageDataFormatTest/router");
+        factory.setServiceClass(HelloService.class);
+        factory.setServiceBean(new HelloServiceImpl());
+
+        server = factory.create();
+        server.start();
+
+    }
+
+    @AfterEach
+    public void tearDown() throws Exception {
+        server.stop();
+        server.destroy();
+    }
+
+    
+    
+    
+    @EndpointInject("mock:result")
+    MockEndpoint mock;
+    
+    @Autowired
+    ProducerTemplate template;
+    
+    @Test
+    public void testFileToCxfMessageDataFormat() throws Exception {
+        
+        mock.expectedMessageCount(1);
+
+        template.sendBodyAndHeader("file:target/filetocxf", createBody(), Exchange.FILE_NAME, "payload.xml");
+
+        mock.assertIsSatisfied();
+
+        String out = mock.getReceivedExchanges().get(0).getIn().getBody(String.class);
+        assertNotNull(out);
+        LOG.info("Reply payload as a String:\n" + out);
+        assertTrue(out.contains("echo Camel"), "Should invoke the echo operation");
+    }
+
+    private String createBody() throws Exception {
+        return "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cxf=\"http://cxf.component.camel.apache.org/\">\n"
+               + "   <soapenv:Header/>\n"
+               + "   <soapenv:Body>\n"
+               + "      <cxf:echo>\n"
+               + "          <cxf:arg0>Camel</cxf:arg0>\n"
+               + "      </cxf:echo>\n"
+               + "   </soapenv:Body>\n"
+               + "</soapenv:Envelope>";
+    }
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("http://localhost:" + port 
+                                   + "/services" + "/FileToCxfMessageDataFormatTest/router");
+            cxfEndpoint.setDataFormat(DataFormat.RAW);
+            return cxfEndpoint;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("file:target/filetocxf")
+                    .to("log:request")
+                    .to(ExchangePattern.InOut, "routerEndpoint")
+                    .to("log:reply")
+                    .to("mock:result");
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/JaxwsTestHandler.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/JaxwsTestHandler.java
new file mode 100644
index 00000000000..6fbbf528f84
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/JaxwsTestHandler.java
@@ -0,0 +1,82 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+import java.util.Set;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.handler.MessageContext;
+import jakarta.xml.ws.handler.soap.SOAPHandler;
+import jakarta.xml.ws.handler.soap.SOAPMessageContext;
+
+public class JaxwsTestHandler implements SOAPHandler<SOAPMessageContext> {
+
+    private int faultCount;
+    private int messageCount;
+    private int getHeadersCount;
+
+    public JaxwsTestHandler() {
+    }
+    
+    public int getGetHeadersCount() {
+        return getHeadersCount;
+    }
+
+    @Override
+    public Set<QName> getHeaders() {
+        getHeadersCount++;
+        return null;
+    }
+
+    @Override
+    public void close(MessageContext messagecontext) {
+
+    }
+
+    @Override
+    public boolean handleFault(SOAPMessageContext messagecontext) {
+        faultCount++;
+        return true;
+    }
+
+    @Override
+    public boolean handleMessage(SOAPMessageContext messagecontext) {
+        messageCount++;
+        return true;
+    }
+
+    public void reset() {
+        faultCount = 0;
+        messageCount = 0;
+        getHeadersCount = 0;
+    }
+
+    public int getFaultCount() {
+        return faultCount;
+    }
+
+    public int getMessageCount() {
+        return messageCount;
+    }
+
+    @Override
+    public String toString() {
+        return "faultCount=" + faultCount + ", messageCount="
+               + messageCount + ", getHeadersCount=" + getHeadersCount;
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/LoggingInterceptorInMessageModeTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/LoggingInterceptorInMessageModeTest.java
new file mode 100644
index 00000000000..90fbfc7348d
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/LoggingInterceptorInMessageModeTest.java
@@ -0,0 +1,209 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+
+
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.lang.reflect.Field;
+import java.util.HashMap;
+import java.util.Map;
+
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.HelloService;
+import org.apache.camel.component.cxf.HelloServiceImpl;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.frontend.ClientFactoryBean;
+import org.apache.cxf.frontend.ClientProxyFactoryBean;
+import org.apache.cxf.frontend.ServerFactoryBean;
+import org.apache.cxf.interceptor.Interceptor;
+import org.apache.cxf.interceptor.LoggingOutInterceptor;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        LoggingInterceptorInMessageModeTest.class,
+        LoggingInterceptorInMessageModeTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class LoggingInterceptorInMessageModeTest {
+    
+    
+    protected static final String ROUTER_ADDRESS = "/LoggingInterceptorInMessageModeTest/router";
+    protected static final String SERVICE_ADDRESS
+            = "/LoggingInterceptorInMessageModeTest/helloworld";
+
+    static Server server;
+
+    
+    static int port = CXFTestSupport.getPort1();
+
+        
+    @BeforeEach
+    public void startService() {
+      //start a service
+        ServerFactoryBean svrBean = new ServerFactoryBean();
+
+        svrBean.setAddress(SERVICE_ADDRESS);
+        svrBean.setServiceClass(HelloService.class);
+        svrBean.setServiceBean(new HelloServiceImpl());
+
+        server = svrBean.create();
+    }
+    
+    @AfterEach
+    public void stopService() {
+        server.stop();
+        server.destroy();
+    }
+    
+    
+    @Autowired
+    protected CamelContext context;
+    
+    @Test
+    public void testInvokingServiceFromCXFClient() throws Exception {
+
+        LoggingOutInterceptor logInterceptor = null;
+
+        for (Interceptor<?> interceptor : context.getEndpoint("cxf:bean:serviceEndpoint", CxfSpringEndpoint.class)
+                .getOutInterceptors()) {
+            if (interceptor instanceof LoggingOutInterceptor) {
+                logInterceptor = LoggingOutInterceptor.class.cast(interceptor);
+                break;
+            }
+        }
+
+        assertNotNull(logInterceptor);
+        // StringPrintWriter writer = new StringPrintWriter();
+        // Unfortunately, LoggingOutInterceptor does not have a setter for writer so
+        // we can't capture the output to verify.
+        // logInterceptor.setPrintWriter(writer);
+
+        ClientProxyFactoryBean proxyFactory = new ClientProxyFactoryBean();
+        ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean();
+        clientBean.setAddress("http://localhost:" + port
+                              + "/services" + ROUTER_ADDRESS);
+        clientBean.setServiceClass(HelloService.class);
+
+        HelloService client = (HelloService) proxyFactory.create();
+
+        String result = client.echo("hello world");
+        assertEquals("echo hello world", result, "we should get the right answer from router");
+
+    }
+
+    @SuppressWarnings("unused")
+    private static final class StringPrintWriter extends PrintWriter {
+        private StringPrintWriter() {
+            super(new StringWriter());
+        }
+
+        private StringPrintWriter(int initialSize) {
+            super(new StringWriter(initialSize));
+        }
+
+        private String getString() {
+            flush();
+            return ((StringWriter) out).toString();
+        }
+    }
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint").to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        @Bean
+        public CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress(ROUTER_ADDRESS);
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.HelloService.class);
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "RAW");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        public CxfEndpoint serviceEndpoint(LoggingOutInterceptor loggingOutInterceptor) {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("http://localhost:" + port 
+                                   + "/services" + SERVICE_ADDRESS);
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.HelloService.class);
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "RAW");
+            cxfEndpoint.setProperties(properties);
+            cxfEndpoint.getOutInterceptors().add(loggingOutInterceptor);
+            return cxfEndpoint;
+        }
+        
+        
+        @Bean
+        public LoggingOutInterceptor loggingOutInterceptor() {
+            LoggingOutInterceptor logger = new LoggingOutInterceptor("write");
+            return logger;
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/SpringBusFactoryTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/SpringBusFactoryTest.java
new file mode 100644
index 00000000000..697d8361658
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/SpringBusFactoryTest.java
@@ -0,0 +1,70 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot;
+
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.Bus;
+import org.apache.cxf.binding.soap.SoapBindingFactory;
+import org.apache.cxf.bus.spring.SpringBusFactory;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           SpringBusFactoryTest.class,
+                           
+})
+public class SpringBusFactoryTest {
+    @Autowired
+    ApplicationContext ctx;
+    
+    @Bean
+    Bus cxfBus() {
+        SpringBusFactory bf = new SpringBusFactory();
+        return bf.createBus("META-INF/cxf/cxf.xml", false);
+    }
+    
+    @Bean
+    Bus myBus() {
+        SpringBusFactory bf = new SpringBusFactory();
+        return bf.createBus("META-INF/cxf/cxf.xml", true);
+    }
+    
+    @Test
+    public void getTheBusInstance() {
+        Bus bus = ctx.getBean("cxfBus", Bus.class);
+        assertNotNull(bus, "The bus should not be null");
+
+        bus = ctx.getBean("myBus", Bus.class);
+        assertNotNull(bus, "The bus should not be null");
+
+        SoapBindingFactory soapBindingFactory = bus.getExtension(SoapBindingFactory.class);
+        assertNotNull(soapBindingFactory, "You should find the factory here");
+    }
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/converter/PayLoadConvertToPOJOTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/converter/PayLoadConvertToPOJOTest.java
new file mode 100644
index 00000000000..8ee6f77d530
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/converter/PayLoadConvertToPOJOTest.java
@@ -0,0 +1,130 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.converter;
+
+
+
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.non_wrapper.Person;
+import org.apache.camel.non_wrapper.types.GetPerson;
+import org.apache.camel.non_wrapper.types.GetPersonResponse;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        PayLoadConvertToPOJOTest.class,
+        PayLoadConvertToPOJOTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+        
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class PayLoadConvertToPOJOTest {
+    
+    
+    static int port = CXFTestSupport.getPort1();
+
+    @Test
+    public void testClient() throws Exception {
+
+        JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
+        factory.setAddress("http://localhost:" + port + "/services/"
+                           + getClass().getSimpleName() + "/CamelContext/RouterPort");
+        factory.setServiceClass(Person.class);
+        Person person = factory.create(Person.class);
+        GetPerson payload = new GetPerson();
+        payload.setPersonId("1234");
+
+        GetPersonResponse reply = person.getPerson(payload);
+        assertEquals("1234", reply.getPersonId(), "Get the wrong person id.");
+
+    }
+    
+    
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        @Bean
+        public CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("/PayLoadConvertToPOJOTest/CamelContext/RouterPort");
+            cxfEndpoint.setServiceClass(org.apache.camel.non_wrapper.Person.class);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+        
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint").streamCaching().process(new Processor() {
+
+                        @Override
+                        public void process(Exchange exchange) throws Exception {
+                            // just try to turn the payload to the parameter we want
+                            // to use
+                            GetPerson request = exchange.getIn().getBody(GetPerson.class);
+
+                            GetPersonResponse reply = new GetPersonResponse();
+                            reply.setPersonId(request.getPersonId());
+                            exchange.getMessage().setBody(reply);
+                        }
+
+                    });
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfDispatchMessageTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfDispatchMessageTest.java
new file mode 100644
index 00000000000..1af7b5e57cd
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfDispatchMessageTest.java
@@ -0,0 +1,159 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.dispatch;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+
+import org.w3c.dom.Document;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfDispatchMessageTest.class,
+                           CxfDispatchMessageTest.TestConfiguration.class,
+                           CxfDispatchTestSupport.ServletConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfDispatchMessageTest extends CxfDispatchTestSupport {
+
+    @Autowired
+    ProducerTemplate template;
+    
+    
+    
+    
+    
+    @Test
+    public void testDipatchMessage() throws Exception {
+        final String name = "Tila";
+        Exchange exchange = sendJaxWsDispatchMessage(name, false);
+        assertEquals(false, exchange.isFailed(), "The request should be handled sucessfully");
+
+        org.apache.camel.Message response = exchange.getMessage();
+        assertNotNull(response, "The response message must not be null");
+
+        String value = decodeResponseFromMessage(response.getBody(InputStream.class), exchange);
+        assertTrue(value.endsWith(name), "The response body must match the request");
+    }
+
+    @Test
+    public void testDipatchMessageOneway() throws Exception {
+        final String name = "Tila";
+        Exchange exchange = sendJaxWsDispatchMessage(name, true);
+        assertEquals(false, exchange.isFailed(), "The request should be handled sucessfully");
+
+        org.apache.camel.Message response = exchange.getOut();
+        assertNotNull(response, "The response message must not be null");
+
+        assertNull(response.getBody(), "The response body must be null");
+    }
+
+    protected Exchange sendJaxWsDispatchMessage(final String name, final boolean oneway) {
+        Exchange exchange = template.send("direct:producer", new Processor() {
+            public void process(final Exchange exchange) {
+                InputStream request
+                        = encodeRequestInMessage(oneway ? MESSAGE_ONEWAY_TEMPLATE : MESSAGE_TEMPLATE, name, exchange);
+                exchange.getIn().setBody(request, InputStream.class);
+                // set the operation for oneway; otherwise use the default operation                
+                if (oneway) {
+                    exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, INVOKE_ONEWAY_NAME);
+                }
+            }
+        });
+        return exchange;
+    }
+
+    private static InputStream encodeRequestInMessage(String form, String name, Exchange exchange) {
+        String payloadstr = String.format(form, name);
+        InputStream message = null;
+        try {
+            message = new ByteArrayInputStream(payloadstr.getBytes("utf-8"));
+        } catch (Exception e) {
+            // ignore and let it fail
+        }
+        return message;
+    }
+
+    private String decodeResponseFromMessage(InputStream message, Exchange exchange) {
+        String value = null;
+        try {
+            Document doc = getDocumentBuilderFactory().newDocumentBuilder().parse(message);
+            value = getResponseType(doc.getDocumentElement());
+        } catch (Exception e) {
+            // ignore and let it fail
+        }
+        return value;
+    }
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services" 
+                + "/CxfDispatchMessageTest/SoapContext/GreeterPort");
+            cxfEndpoint.setDataFormat(DataFormat.RAW);
+            cxfEndpoint.setSynchronous(true);
+            return cxfEndpoint;
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct:producer")
+                            .to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfDispatchPayloadTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfDispatchPayloadTest.java
new file mode 100644
index 00000000000..08f2b5fe6e9
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfDispatchPayloadTest.java
@@ -0,0 +1,161 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.dispatch;
+
+import java.io.ByteArrayInputStream;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CxfPayload;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.converter.CxfPayloadConverter;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.binding.soap.SoapHeader;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfDispatchPayloadTest.class,
+                           CxfDispatchPayloadTest.TestConfiguration.class,
+                           CxfDispatchTestSupport.ServletConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfDispatchPayloadTest extends CxfDispatchTestSupport {
+
+    @Autowired
+    ProducerTemplate template;
+    
+    
+    @Test
+    public void testDispatchPayload() throws Exception {
+        final String name = "Tila";
+        Exchange exchange = sendJaxWsDispatchPayload(name, false);
+        assertEquals(false, exchange.isFailed(), "The request should be handled sucessfully");
+
+        org.apache.camel.Message response = exchange.getMessage();
+        assertNotNull(response, "The response must not be null");
+
+        String value = decodeResponseFromPayload((CxfPayload<?>) response.getBody(CxfPayload.class), exchange);
+        assertTrue(value.endsWith(name), "The response must match the request");
+    }
+
+    @Test
+    public void testDispatchPayloadOneway() throws Exception {
+        final String name = "Tila";
+        Exchange exchange = sendJaxWsDispatchPayload(name, true);
+        assertEquals(false, exchange.isFailed(), "The request should be handled sucessfully");
+
+        org.apache.camel.Message response = exchange.getOut();
+        assertNotNull(response, "The response must not be null");
+
+        assertNull(response.getBody(), "The response must be null");
+    }
+
+    private Exchange sendJaxWsDispatchPayload(final String name, final boolean oneway) {
+        Exchange exchange = template.send("direct:producer", new Processor() {
+            public void process(final Exchange exchange) {
+                CxfPayload<SoapHeader> request = encodeRequestInPayload(oneway ? PAYLOAD_ONEWAY_TEMPLATE : PAYLOAD_TEMPLATE,
+                        name, exchange);
+                exchange.getIn().setBody(request, CxfPayload.class);
+                exchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, DISPATCH_NS);
+                // set the operation for oneway; otherwise use the default operation                
+                if (oneway) {
+                    exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, INVOKE_ONEWAY_NAME);
+                }
+            }
+        });
+        return exchange;
+    }
+
+    private static <T> CxfPayload<T> encodeRequestInPayload(String form, String name, Exchange exchange) {
+        String payloadstr = String.format(form, name);
+        CxfPayload<T> payload = null;
+        try {
+            Document doc = getDocumentBuilderFactory().newDocumentBuilder()
+                    .parse(new ByteArrayInputStream(payloadstr.getBytes("utf-8")));
+            payload = CxfPayloadConverter.documentToCxfPayload(doc, exchange);
+        } catch (Exception e) {
+            // ignore and let it fail
+        }
+        return payload;
+    }
+
+    private <T> String decodeResponseFromPayload(CxfPayload<T> payload, Exchange exchange) {
+        String value = null;
+        NodeList nodes = CxfPayloadConverter.cxfPayloadToNodeList(payload, exchange);
+        if (nodes != null && nodes.getLength() == 1 && nodes.item(0) instanceof Element) {
+            value = getResponseType((Element) nodes.item(0));
+        }
+        return value;
+    }
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services" 
+                + "/CxfDispatchPayloadTest/SoapContext/GreeterPort");
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            cxfEndpoint.setSynchronous(true);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct:producer")
+                        .to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfDispatchTestSupport.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfDispatchTestSupport.java
new file mode 100644
index 00000000000..7bddd02ff98
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfDispatchTestSupport.java
@@ -0,0 +1,122 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.dispatch;
+
+
+import javax.xml.parsers.DocumentBuilderFactory;
+import jakarta.xml.ws.Endpoint;
+
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfDispatchTestSupport.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public abstract class CxfDispatchTestSupport {
+
+    
+      
+    protected static final String DISPATCH_NS = "http://camel.apache.org/cxf/jaxws/dispatch";
+    protected static final String INVOKE_NAME = "Invoke";
+    protected static final String INVOKE_ONEWAY_NAME = "InvokeOneWay";
+
+    protected static final String PAYLOAD_TEMPLATE
+            = "<ns1:greetMe xmlns:ns1=\"http://apache.org/hello_world_soap_http/types\"><ns1:requestType>%s</ns1:requestType></ns1:greetMe>";
+    protected static final String PAYLOAD_ONEWAY_TEMPLATE
+            = "<ns1:greetMeOneWay xmlns:ns1=\"http://apache.org/hello_world_soap_http/types\"><ns1:requestType>%s</ns1:requestType></ns1:greetMeOneWay>";
+    protected static final String MESSAGE_TEMPLATE
+            = "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body>"
+              + PAYLOAD_TEMPLATE
+              + "</soap:Body></soap:Envelope>";
+    protected static final String MESSAGE_ONEWAY_TEMPLATE
+            = "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body>"
+              + PAYLOAD_ONEWAY_TEMPLATE
+              + "</soap:Body></soap:Envelope>";
+    private static DocumentBuilderFactory documentBuilderFactory;
+    
+    static int port = CXFTestSupport.getPort1();
+
+    protected Endpoint endpoint;
+    
+    @BeforeEach
+    public void startService() {
+        Object implementor = new GreeterImpl();
+        String address = "/"
+                         + getClass().getSimpleName() + "/SoapContext/GreeterPort";
+        endpoint = Endpoint.publish(address, implementor);
+    }
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    protected static String getResponseType(Element node) {
+        NodeList nodes = node.getElementsByTagNameNS("http://apache.org/hello_world_soap_http/types", "responseType");
+        if (nodes != null && nodes.getLength() == 1) {
+            Node c = nodes.item(0).getFirstChild();
+            if (c != null) {
+                return c.getNodeValue();
+            }
+        }
+        return null;
+    }
+
+    protected static synchronized DocumentBuilderFactory getDocumentBuilderFactory() {
+        if (documentBuilderFactory == null) {
+            documentBuilderFactory = DocumentBuilderFactory.newInstance();
+            documentBuilderFactory.setNamespaceAware(true);
+            documentBuilderFactory.setIgnoringElementContentWhitespace(true);
+            documentBuilderFactory.setIgnoringComments(true);
+        }
+        return documentBuilderFactory;
+    }
+    
+    @Configuration
+    class ServletConfiguration {
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+
+    }
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfSoapMessageProviderTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfSoapMessageProviderTest.java
new file mode 100644
index 00000000000..8271425e581
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/dispatch/CxfSoapMessageProviderTest.java
@@ -0,0 +1,188 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.dispatch;
+
+
+
+
+import java.lang.reflect.UndeclaredThrowableException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.BindingProvider;
+import jakarta.xml.ws.handler.Handler;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.ParameterProcessor;
+import org.apache.camel.component.cxf.SoapTargetBean;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.support.AbstractApplicationContext;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.wsdl_first.JaxwsTestHandler;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.Greeter;
+import org.apache.hello_world_soap_http.SOAPService;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfSoapMessageProviderTest.class,
+        CxfSoapMessageProviderTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfSoapMessageProviderTest {
+    
+   
+    
+    static int port = CXFTestSupport.getPort1();
+
+
+           
+    @Test
+    public void testSOAPMessageModeDocLit() throws Exception {
+        JaxwsTestHandler fromHandler = getMandatoryBean(JaxwsTestHandler.class, "fromEndpointJaxwsHandler");
+        fromHandler.reset();
+
+        QName serviceName = new QName("http://apache.org/hello_world_soap_http", "SOAPProviderService");
+        QName portName = new QName("http://apache.org/hello_world_soap_http", "SoapProviderPort");
+
+        URL wsdl = getClass().getResource("/wsdl/hello_world.wsdl");
+        assertNotNull(wsdl);
+
+        SOAPService service = new SOAPService(wsdl, serviceName);
+        assertNotNull(service);
+
+        String response1 = new String("TestSOAPOutputPMessage");
+        String response2 = new String("Bonjour");
+        try {
+            Greeter greeter = service.getPort(portName, Greeter.class);
+            ((BindingProvider) greeter).getRequestContext()
+                    .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                            "http://localhost:" + port + "/services/CxfSoapMessageProviderTest/SoapContext/SoapProviderPort");
+            for (int idx = 0; idx < 2; idx++) {
+                String greeting = greeter.greetMe("Milestone-" + idx);
+                assertNotNull(greeting, "no response received from service");
+                assertEquals(response1, greeting);
+
+                String reply = greeter.sayHi();
+                assertNotNull(reply, "no response received from service");
+                assertEquals(response2, reply);
+            }
+        } catch (UndeclaredThrowableException ex) {
+            throw (Exception) ex.getCause();
+        }
+
+        assertEquals(8, fromHandler.getMessageCount(), "Can't get the right message count");
+        assertEquals(0, fromHandler.getFaultCount(), "Can't get the right fault count");
+       
+    }
+    
+    @Autowired
+    AbstractApplicationContext applicationContext;
+    
+    private <T> T getMandatoryBean(Class<T> type, String name) {
+        Object value = applicationContext.getBean(name);
+        assertNotNull(value, "No spring bean found for name <" + name + ">");
+        if (type.isInstance(value)) {
+            return type.cast(value);
+        } else {
+            fail("Spring bean <" + name + "> is not an instanceof " + type.getName() + " but is of type "
+                 + ObjectHelper.className(value));
+            return null;
+        }
+    }
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public SoapTargetBean targetBean() {
+            return new SoapTargetBean();
+        }
+        
+        @Bean
+        public ParameterProcessor parameterProcessor() {
+            return new ParameterProcessor();
+        }
+        
+        @Bean
+        public JaxwsTestHandler fromEndpointJaxwsHandler() {
+            return new JaxwsTestHandler();
+        }
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+        @Bean
+        CxfEndpoint soapMessageEndpoint(JaxwsTestHandler fromEndpointJaxwsHandler) {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.SoapMessageProvider.class);
+            cxfEndpoint.setAddress("/CxfSoapMessageProviderTest/SoapContext/SoapProviderPort");
+            List<Handler> handlers = new ArrayList<Handler>();
+            handlers.add(fromEndpointJaxwsHandler);
+            cxfEndpoint.setHandlers(handlers);
+            return cxfEndpoint;
+        }
+        
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:soapMessageEndpoint")
+                    .process("parameterProcessor")
+                    .to("bean:targetBean?method=invokeSoapMessage");
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/AbstractCXFGreeterRouterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/AbstractCXFGreeterRouterTest.java
new file mode 100644
index 00000000000..09cea7164ad
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/AbstractCXFGreeterRouterTest.java
@@ -0,0 +1,132 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.greeterroute;
+
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.Service;
+
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.RuntimeCamelException;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.http.base.HttpOperationFailedException;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.Greeter;
+import org.apache.hello_world_soap_http.NoSuchCodeLitFault;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           AbstractCXFGreeterRouterTest.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public abstract class AbstractCXFGreeterRouterTest {
+
+    
+    private final String testDocLitFaultBody = "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">"
+                                               + "<soap:Body><testDocLitFault xmlns=\"http://apache.org/hello_world_soap_http/types\">"
+                                               + "<faultType>NoSuchCodeLitFault</faultType></testDocLitFault>"
+                                               + "</soap:Body></soap:Envelope>";
+    
+    protected String routerAddress = "http://localhost:" + port + "/services/" 
+        + getClass().getSimpleName() + "/CamelContext/RouterPort";
+    
+    protected final QName serviceName = new QName("http://apache.org/hello_world_soap_http", "SOAPService");
+    protected final QName routerPortName = new QName("http://apache.org/hello_world_soap_http", "RouterPort");
+    protected final QName endpointName = new QName("http://apache.org/hello_world_soap_http", "SoapPort");
+
+    static int port = CXFTestSupport.getPort1();
+    
+    @Autowired
+    ProducerTemplate template;
+
+    
+
+    @Test
+    public void testInvokingServiceFromCXFClient() throws Exception {
+        Service service = Service.create(serviceName);
+        service.addPort(routerPortName, "http://schemas.xmlsoap.org/soap/",
+                routerAddress);
+        Greeter greeter = service.getPort(routerPortName, Greeter.class);
+
+        String reply = greeter.greetMe("test");
+        assertNotNull(reply, "No response received from service");
+        assertEquals("Hello test", reply, "Got the wrong reply");
+        reply = greeter.sayHi();
+        assertNotNull(reply, "No response received from service");
+        assertEquals("Bonjour", reply, "Got the wrong reply");
+
+        greeter.greetMeOneWay("call greetMe OneWay !");
+
+        // test throw the exception
+        try {
+            greeter.testDocLitFault("NoSuchCodeLitFault");
+            // should get the exception here
+            fail("Should get the NoSuchCodeLitFault here.");
+        } catch (NoSuchCodeLitFault fault) {
+            // expect the fault here
+            assertNotNull(fault.getFaultInfo(), "The fault info should not be null");
+        }
+
+    }
+
+    @Test
+    public void testRoutingSOAPFault() {
+        Exception ex = assertThrows(RuntimeCamelException.class,
+                () -> template.sendBody(routerAddress, testDocLitFaultBody));
+
+        assertTrue(ex.getCause() instanceof HttpOperationFailedException, "It should get the response error");
+        assertEquals(500, ((HttpOperationFailedException) ex.getCause()).getStatusCode(),
+                "Get a wrong response code");
+    }
+
+    @Test
+    public void testPublishEndpointUrl() throws Exception {
+        String response = template.requestBody(routerAddress
+                                                + "?wsdl",
+                null, String.class);
+        assertTrue(response.indexOf("http://www.simple.com/services/test") > 0, "Can't find the right service location.");
+    }
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+    }
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CXFGreeterEnrichTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CXFGreeterEnrichTest.java
new file mode 100644
index 00000000000..f6bffd1583d
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CXFGreeterEnrichTest.java
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.greeterroute;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import jakarta.xml.ws.Endpoint;
+
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.WriteXmlDeclarationInterceptor;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CXFGreeterEnrichTest.class,
+                           CXFGreeterEnrichTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class,
+                           AbstractCXFGreeterRouterTest.TestConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CXFGreeterEnrichTest extends AbstractCXFGreeterRouterTest {
+
+    private static String backServiceAddress = "/CXFGreeterEnrichTest/SoapContext/SoapPort";
+    protected Endpoint endpoint;
+    
+    
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @BeforeEach
+    public void startService() {
+        Object implementor = new GreeterImpl();
+        endpoint = Endpoint.publish(backServiceAddress, implementor);
+    }
+
+    
+    
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.GreeterImpl.class);
+            cxfEndpoint.setAddress("/CXFGreeterEnrichTest/CamelContext/RouterPort");
+            cxfEndpoint.setSkipFaultLogging(true);
+            //This interceptor will force the CXF server send the XML start document to client
+            cxfEndpoint.getOutInterceptors().
+                add(new WriteXmlDeclarationInterceptor());
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("publishedEndpointUrl", "http://www.simple.com/services/test");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services" + backServiceAddress);
+            cxfEndpoint.setWsdlURL("testutils/hello_world.wsdl");
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("cxf:bean:routerEndpoint")
+                            .enrich().simple("ref:serviceEndpoint");
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CXFGreeterRouterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CXFGreeterRouterTest.java
new file mode 100644
index 00000000000..050f770d9a3
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CXFGreeterRouterTest.java
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.greeterroute;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import jakarta.xml.ws.Endpoint;
+
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.WriteXmlDeclarationInterceptor;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CXFGreeterRouterTest.class,
+                           CXFGreeterRouterTest.TestConfiguration.class,
+                           AbstractCXFGreeterRouterTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CXFGreeterRouterTest extends AbstractCXFGreeterRouterTest {
+
+    private static String backServiceAddress = "/CXFGreeterRouterTest/SoapContext/SoapPort";
+    protected static Endpoint endpoint;
+    
+    
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @BeforeEach
+    public void startService() {
+        Object implementor = new GreeterImpl();
+        endpoint = Endpoint.publish(backServiceAddress, implementor);
+    }
+
+    
+    
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.GreeterImpl.class);
+            cxfEndpoint.setAddress("/CXFGreeterRouterTest/CamelContext/RouterPort");
+            cxfEndpoint.setSkipFaultLogging(true);
+            //This interceptor will force the CXF server send the XML start document to client
+            cxfEndpoint.getOutInterceptors().
+                add(new WriteXmlDeclarationInterceptor());
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("publishedEndpointUrl", "http://www.simple.com/services/test");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services" + backServiceAddress);
+            cxfEndpoint.setWsdlURL("testutils/hello_world.wsdl");
+            return cxfEndpoint;
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("cxf:bean:routerEndpoint")
+                            .to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterCXFMessageRouterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterCXFMessageRouterTest.java
new file mode 100644
index 00000000000..f427aabc596
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterCXFMessageRouterTest.java
@@ -0,0 +1,113 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.greeterroute;
+
+import jakarta.xml.ws.Endpoint;
+
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfGreeterCXFMessageRouterTest.class,
+                           CxfGreeterCXFMessageRouterTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class,
+                           AbstractCXFGreeterRouterTest.TestConfiguration.class,
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfGreeterCXFMessageRouterTest extends AbstractCXFGreeterRouterTest {
+
+    private static String backServiceAddress = "/CxfGreeterCXFMessageRouterTest/SoapContext/SoapPort";
+    protected static Endpoint endpoint;
+    
+    
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @BeforeEach
+    public void startService() {
+        Object implementor = new GreeterImpl();
+        endpoint = Endpoint.publish(backServiceAddress, implementor);
+    }
+
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.GreeterImpl.class);
+            cxfEndpoint.setAddress("/CxfGreeterCXFMessageRouterTest/CamelContext/RouterPort");
+            cxfEndpoint.setLoggingFeatureEnabled(true);
+            cxfEndpoint.setDataFormat(DataFormat.CXF_MESSAGE);
+            cxfEndpoint.setPublishedEndpointUrl("http://www.simple.com/services/test");
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services" + backServiceAddress);
+            cxfEndpoint.setWsdlURL("testutils/hello_world.wsdl");
+            cxfEndpoint.setDataFormat(DataFormat.CXF_MESSAGE);
+            return cxfEndpoint;
+        }
+
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint")
+                            .to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterCXFMessageWithoutSEIRouterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterCXFMessageWithoutSEIRouterTest.java
new file mode 100644
index 00000000000..51b56ed928d
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterCXFMessageWithoutSEIRouterTest.java
@@ -0,0 +1,118 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.greeterroute;
+
+import jakarta.xml.ws.Endpoint;
+
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfGreeterCXFMessageWithoutSEIRouterTest.class,
+                           CxfGreeterCXFMessageWithoutSEIRouterTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class,
+                           AbstractCXFGreeterRouterTest.TestConfiguration.class,
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfGreeterCXFMessageWithoutSEIRouterTest extends CxfGreeterCXFMessageRouterTest {
+
+    private static String backServiceAddress = "/CxfGreeterCXFMessageWithoutSEIRouterTest/SoapContext/SoapPort";
+    protected static Endpoint endpoint;
+    
+    
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @BeforeEach
+    public void startService() {
+        Object implementor = new GreeterImpl();
+        endpoint = Endpoint.publish(backServiceAddress, implementor);
+    }
+
+    
+    
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setWsdlURL("testutils/hello_world.wsdl");
+            cxfEndpoint.setAddress("/CxfGreeterCXFMessageWithoutSEIRouterTest/CamelContext/RouterPort");
+            cxfEndpoint.setLoggingFeatureEnabled(true);
+            cxfEndpoint.setDataFormat(DataFormat.CXF_MESSAGE);
+            cxfEndpoint.setPublishedEndpointUrl("http://www.simple.com/services/test");
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services" + backServiceAddress);
+            cxfEndpoint.setWsdlURL("testutils/hello_world.wsdl");
+            cxfEndpoint.setDataFormat(DataFormat.CXF_MESSAGE);
+            return cxfEndpoint;
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+
+                    from("cxf:bean:routerEndpoint")
+                            .to("cxf:bean:serviceEndpoint");
+                }
+                
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterConverterRouterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterConverterRouterTest.java
new file mode 100644
index 00000000000..7d8c8f37cf0
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterConverterRouterTest.java
@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.greeterroute;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import jakarta.xml.ws.Endpoint;
+
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfGreeterConverterRouterTest.class,
+                           CxfGreeterConverterRouterTest.TestConfiguration.class,
+                           AbstractCXFGreeterRouterTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfGreeterConverterRouterTest extends AbstractCXFGreeterRouterTest {
+
+    private static String backServiceAddress = "/CxfGreeterConverterRouterTest/SoapContext/SoapPort";
+    protected static Endpoint endpoint;
+    
+    
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @BeforeEach
+    public void startService() {
+        Object implementor = new GreeterImpl();
+        endpoint = Endpoint.publish(backServiceAddress, implementor);
+    }
+
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("/CxfGreeterConverterRouterTest/CamelContext/RouterPort");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("publishedEndpointUrl", "http://www.simple.com/services/test");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services" + backServiceAddress);
+            cxfEndpoint.setWsdlURL("testutils/hello_world.wsdl");
+            return cxfEndpoint;
+        }
+
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("cxf:bean:routerEndpoint")
+                            .to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterMessageCamelHttpRouterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterMessageCamelHttpRouterTest.java
new file mode 100644
index 00000000000..23bed875cb9
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterMessageCamelHttpRouterTest.java
@@ -0,0 +1,106 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.greeterroute;
+
+
+import jakarta.xml.ws.Endpoint;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfGreeterMessageCamelHttpRouterTest.class,
+        CxfGreeterMessageCamelHttpRouterTest.TestConfiguration.class,
+        AbstractCXFGreeterRouterTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfGreeterMessageCamelHttpRouterTest extends CxfGreeterMessageRouterTest {
+
+    protected static Endpoint endpoint;
+    protected static String serverAddress = "http://localhost:" + port + "/services" 
+                                            + "/CxfGreeterMessageCamelHttpRouterTest/SoapContext/SoapPort";
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @BeforeEach
+    public void startService() {
+        Object implementor = new GreeterImpl();
+        String address = "/CxfGreeterMessageCamelHttpRouterTest/SoapContext/SoapPort";
+        endpoint = Endpoint.publish(address, implementor);
+    }
+    
+        
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.GreeterImpl.class);
+            cxfEndpoint.setAddress("/CxfGreeterMessageCamelHttpRouterTest/CamelContext/RouterPort");
+            cxfEndpoint.setDataFormat(DataFormat.RAW);
+            cxfEndpoint.setPublishedEndpointUrl("http://www.simple.com/services/test");
+            return cxfEndpoint;
+        }
+        
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint")
+                            .removeHeaders("CamelHttp*")
+                            .to(serverAddress + "?throwExceptionOnFailure=false");
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterMessageRouterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterMessageRouterTest.java
new file mode 100644
index 00000000000..ca9301f09ec
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterMessageRouterTest.java
@@ -0,0 +1,113 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.greeterroute;
+
+import jakarta.xml.ws.Endpoint;
+
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfGreeterMessageRouterTest.class,
+                           CxfGreeterMessageRouterTest.TestConfiguration.class,
+                           AbstractCXFGreeterRouterTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfGreeterMessageRouterTest extends AbstractCXFGreeterRouterTest {
+
+    private static String backServiceAddress = "/CxfGreeterMessageRouterTest/SoapContext/SoapPort";
+    protected static Endpoint endpoint;
+    
+    
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @BeforeEach
+    public void startService() {
+        Object implementor = new GreeterImpl();
+        endpoint = Endpoint.publish(backServiceAddress, implementor);
+    }
+
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.GreeterImpl.class);
+            cxfEndpoint.setAddress("/CxfGreeterMessageRouterTest/CamelContext/RouterPort");
+            cxfEndpoint.setLoggingFeatureEnabled(true);
+            cxfEndpoint.setDataFormat(DataFormat.RAW);
+            cxfEndpoint.setPublishedEndpointUrl("http://www.simple.com/services/test");
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services" + backServiceAddress);
+            cxfEndpoint.setWsdlURL("testutils/hello_world.wsdl");
+            cxfEndpoint.setDataFormat(DataFormat.RAW);
+            return cxfEndpoint;
+        }
+
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint")
+                            .to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterPayLoadRouterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterPayLoadRouterTest.java
new file mode 100644
index 00000000000..444bd9c39dc
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterPayLoadRouterTest.java
@@ -0,0 +1,115 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.greeterroute;
+
+import jakarta.xml.ws.Endpoint;
+
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfGreeterPayLoadRouterTest.class,
+                           CxfGreeterPayLoadRouterTest.TestConfiguration.class,
+                           AbstractCXFGreeterRouterTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfGreeterPayLoadRouterTest extends AbstractCXFGreeterRouterTest {
+
+    private static String backServiceAddress = "/CxfGreeterPayLoadRouterTest/SoapContext/SoapPort";
+    protected static Endpoint endpoint;
+    
+    
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @BeforeEach
+    public void startService() {
+        Object implementor = new GreeterImpl();
+        endpoint = Endpoint.publish(backServiceAddress, implementor);
+    }
+
+    
+    
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.GreeterImpl.class);
+            cxfEndpoint.setAddress("/CxfGreeterPayLoadRouterTest/CamelContext/RouterPort");
+            cxfEndpoint.setLoggingFeatureEnabled(true);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            cxfEndpoint.setPublishedEndpointUrl("http://www.simple.com/services/test");
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services" + backServiceAddress);
+            cxfEndpoint.setWsdlURL("testutils/hello_world.wsdl");
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint")
+                            .to("cxf://http://localhost:" + port + "/services" + backServiceAddress
+                                + "?wsdlURL=testutils/hello_world.wsdl" 
+                                + "&dataFormat=PAYLOAD&serviceClass=org.apache.hello_world_soap_http.Greeter");
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterPayLoadWithFeatureRouterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterPayLoadWithFeatureRouterTest.java
new file mode 100644
index 00000000000..f3a587d44a0
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterPayLoadWithFeatureRouterTest.java
@@ -0,0 +1,115 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.greeterroute;
+
+import jakarta.xml.ws.Endpoint;
+
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.TestCxfFeature;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfGreeterPayLoadWithFeatureRouterTest.class,
+                           CxfGreeterPayLoadWithFeatureRouterTest.TestConfiguration.class,
+                           AbstractCXFGreeterRouterTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfGreeterPayLoadWithFeatureRouterTest extends AbstractCXFGreeterRouterTest {
+
+    private static String backServiceAddress = "/CxfGreeterPayLoadWithFeatureRouterTest/SoapContext/SoapPort";
+    protected static Endpoint endpoint;
+    
+    
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @BeforeEach
+    public void startService() {
+        Object implementor = new GreeterImpl();
+        endpoint = Endpoint.publish(backServiceAddress, implementor);
+    }
+
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.GreeterImpl.class);
+            cxfEndpoint.setAddress("/CxfGreeterPayLoadWithFeatureRouterTest/CamelContext/RouterPort");
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            cxfEndpoint.setPublishedEndpointUrl("http://www.simple.com/services/test");
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services" + backServiceAddress);
+            cxfEndpoint.setWsdlURL("testutils/hello_world.wsdl");
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            cxfEndpoint.getFeatures().add(new TestCxfFeature());
+            return cxfEndpoint;
+        }
+
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("cxf:bean:routerEndpoint")
+                            .to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterWSDLOnlyRouterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterWSDLOnlyRouterTest.java
new file mode 100644
index 00000000000..4c0015453e1
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfGreeterWSDLOnlyRouterTest.java
@@ -0,0 +1,113 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.greeterroute;
+
+import jakarta.xml.ws.Endpoint;
+
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfGreeterWSDLOnlyRouterTest.class,
+                           CxfGreeterWSDLOnlyRouterTest.TestConfiguration.class,
+                           AbstractCXFGreeterRouterTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfGreeterWSDLOnlyRouterTest extends AbstractCXFGreeterRouterTest {
+
+    private static String backServiceAddress = "/CxfGreeterWSDLOnlyRouterTest/SoapContext/SoapPort";
+    protected static Endpoint endpoint;
+    
+    
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @BeforeEach
+    public void startService() {
+        Object implementor = new GreeterImpl();
+        endpoint = Endpoint.publish(backServiceAddress, implementor);
+    }
+
+    
+    
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("/CxfGreeterWSDLOnlyRouterTest/CamelContext/RouterPort");
+            cxfEndpoint.setWsdlURL("testutils/hello_world.wsdl");
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setPublishedEndpointUrl("http://www.simple.com/services/test");
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services" + backServiceAddress);
+            cxfEndpoint.setWsdlURL("testutils/hello_world.wsdl");
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint")
+                            .to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfPayloadProviderRouterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfPayloadProviderRouterTest.java
new file mode 100644
index 00000000000..f9620380f66
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/greeterroute/CxfPayloadProviderRouterTest.java
@@ -0,0 +1,186 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.greeterroute;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import jakarta.xml.ws.Endpoint;
+import jakarta.xml.ws.Service;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.interceptor.Fault;
+import org.apache.cxf.message.Message;
+import org.apache.cxf.phase.AbstractPhaseInterceptor;
+import org.apache.cxf.phase.Phase;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.Greeter;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfPayloadProviderRouterTest.class,
+                           CxfPayloadProviderRouterTest.TestConfiguration.class,
+                           AbstractCXFGreeterRouterTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfPayloadProviderRouterTest extends AbstractCXFGreeterRouterTest {
+
+    private static String backServiceAddress = "/CxfPayloadProviderRouterTest/SoapContext/SoapPort";
+    protected static Endpoint endpoint;
+    protected static GreeterImpl implementor;
+    
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @BeforeEach
+    public void startService() {
+        implementor = new GreeterImpl();
+        endpoint = Endpoint.publish(backServiceAddress, implementor);
+    }
+
+    @Override
+    @Test
+    public void testPublishEndpointUrl() throws Exception {
+        final String path = getClass().getSimpleName() + "/CamelContext/RouterPort/" + getClass().getSimpleName();
+        String response = template.requestBody("http://localhost:" + port + "/services/" + path
+                                               + "?wsdl",
+                null, String.class);
+        assertTrue(response.indexOf(path) > 0, "Can't find the right service location.");
+    }
+
+    @Test
+    public void testInvokeGreetMeOverProvider() throws Exception {
+        Service service = Service.create(serviceName);
+        service.addPort(routerPortName, "http://schemas.xmlsoap.org/soap/",
+                "http://localhost:" + port + "/services/"
+                    + getClass().getSimpleName()
+                    + "/CamelContext/RouterPort");
+        Greeter greeter = service.getPort(routerPortName, Greeter.class);
+        org.apache.cxf.endpoint.Client client = org.apache.cxf.frontend.ClientProxy.getClient(greeter);
+        VerifyInboundInterceptor icp = new VerifyInboundInterceptor();
+        client.getInInterceptors().add(icp);
+
+        int ic = implementor.getInvocationCount();
+
+        icp.setCalled(false);
+        String reply = greeter.greetMe("test");
+        assertEquals("Hello test", reply, "Got the wrong reply");
+        assertTrue(icp.isCalled(), "No Inbound message received");
+        assertEquals(++ic, implementor.getInvocationCount(), "The target service not invoked");
+
+        icp.setCalled(false);
+        greeter.greetMeOneWay("call greetMe OneWay !");
+        assertFalse(icp.isCalled(), "An unnecessary inbound message");
+        // wait a few seconds for the async oneway service to be invoked
+        Thread.sleep(3000);
+        assertEquals(++ic, implementor.getInvocationCount(), "The target service not invoked");
+    }
+
+    static class VerifyInboundInterceptor extends AbstractPhaseInterceptor<Message> {
+        private boolean called;
+
+        VerifyInboundInterceptor() {
+            super(Phase.USER_PROTOCOL);
+        }
+
+        @Override
+        public void handleMessage(Message message) throws Fault {
+            called = true;
+        }
+
+        public boolean isCalled() {
+            return called;
+        }
+
+        public void setCalled(boolean b) {
+            called = b;
+        }
+
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("/CxfPayloadProviderRouterTest/CamelContext/RouterPort");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("jaxws.provider.interpretNullAsOneway", true);
+            cxfEndpoint.setProperties(properties);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            cxfEndpoint.setSynchronous(true);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services" + backServiceAddress);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            cxfEndpoint.setSynchronous(true);
+            return cxfEndpoint;
+        }
+
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint")
+                            .setHeader("operationNamespace", constant("http://camel.apache.org/cxf/jaxws/dispatch"))
+                            .setHeader("operationName", constant("Invoke"))
+                            .to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+    }
+    
+    
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/jms/CxfEndpointJMSConsumerTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/jms/CxfEndpointJMSConsumerTest.java
new file mode 100644
index 00000000000..695903b9153
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/jms/CxfEndpointJMSConsumerTest.java
@@ -0,0 +1,129 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.jms;
+
+
+
+
+import javax.xml.namespace.QName;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.test.infra.artemis.services.ArtemisService;
+import org.apache.camel.test.infra.artemis.services.ArtemisServiceFactory;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.hello_world_soap_http.Greeter;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfEndpointJMSConsumerTest.class,
+        CxfEndpointJMSConsumerTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }
+)
+public class CxfEndpointJMSConsumerTest {
+    @org.junit.jupiter.api.extension.RegisterExtension
+    private static ArtemisService broker = ArtemisServiceFactory.createVMService();
+    private String namespace = "http://apache.org/hello_world_soap_http";
+    private QName serviceName = new QName(namespace, "SOAPService");
+    private QName endpointName = new QName(namespace, "SoapPort");
+    // Here we just the address with JMS URI
+    String address = "jms:jndi:dynamicQueues/test.cxf.jmstransport.queue"
+                     + "?jndiInitialContextFactory"
+                     + "=org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory"
+                     + "&jndiConnectionFactoryName=ConnectionFactory&jndiURL="
+                     + broker.serviceAddress();
+        
+    
+    
+    @Test
+    public void testInvocation() {
+        // Here we just the address with JMS URI
+        String address = "jms:jndi:dynamicQueues/test.cxf.jmstransport.queue"
+                         + "?jndiInitialContextFactory"
+                         + "=org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory"
+                         + "&jndiConnectionFactoryName=ConnectionFactory&jndiURL="
+                         + broker.serviceAddress();
+
+        JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
+        factory.setServiceClass(Greeter.class);
+        factory.setAddress(address);
+        Greeter greeter = factory.create(Greeter.class);
+        String response = greeter.greetMe("Camel");
+        assertEquals("Hello Camel", response, "Get a wrong response");
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint jmsEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress(address);
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            return cxfEndpoint;
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:jmsEndpoint").process(new Processor() {
+                        @Override
+                        public void process(Exchange exchange) throws Exception {
+                            // just set the response for greetme operation here
+                            String me = exchange.getIn().getBody(String.class);
+                            exchange.getMessage().setBody("Hello " + me);
+                        }
+                    });
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfJavaMtomProducerPayloadTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfJavaMtomProducerPayloadTest.java
new file mode 100644
index 00000000000..dc3228565f3
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfJavaMtomProducerPayloadTest.java
@@ -0,0 +1,104 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+import java.awt.Image;
+import java.util.List;
+
+import jakarta.xml.ws.Holder;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.attachment.AttachmentMessage;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, CxfJavaMtomProducerPayloadTest.class,
+                           CxfAutoConfiguration.class,
+                           CxfMtomConsumerTest.TestConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfJavaMtomProducerPayloadTest extends CxfMtomConsumerTest {
+    protected String MTOM_ENDPOINT_URI_MTOM_ENABLE = "cxf://http://localhost:" + port + "/services" 
+                                                                  + MTOM_ENDPOINT_ADDRESS
+                                                                  + "?serviceClass=org.apache.camel.cxf.mtom_feature.Hello"
+                                                                  + "&properties.mtom-enabled=true"
+                                                                  + "&defaultOperationName=Detail";
+    private static final Logger LOG = LoggerFactory.getLogger(CxfJavaMtomProducerPayloadTest.class);
+
+    @Autowired
+    CamelContext context;
+    
+      
+    @Override
+    @SuppressWarnings("unchecked")
+    @Test
+    public void testInvokingService() throws Exception {
+        if (MtomTestHelper.isAwtHeadless(null, LOG)) {
+            return;
+        }
+
+        final Holder<byte[]> photo = new Holder<>("RequestFromCXF".getBytes("UTF-8"));
+        final Holder<Image> image = new Holder<>(getImage("/java.jpg"));
+
+        Exchange exchange = context.createProducerTemplate().send(MTOM_ENDPOINT_URI_MTOM_ENABLE,
+                                                                  new Processor() {
+
+                                                                      @Override
+                                                                      public void process(Exchange exchange)
+                                                                          throws Exception {
+                                                                          exchange.getIn()
+                                                                              .setBody(new Object[] {
+                                                                                                     photo,
+                                                                                                     image
+                                                                          });
+
+                                                                      }
+
+                                                                  });
+
+        AttachmentMessage out = exchange.getMessage(AttachmentMessage.class);
+        assertEquals(2, out.getAttachments().size(), "We should get 2 attachements here.");
+        assertEquals("application/xop+xml", out.getHeader("Content-Type"), "Get a wrong Content-Type header");
+        // Get the parameter list
+        List<?> parameter = out.getBody(List.class);
+        // Get the operation name
+        final Holder<byte[]> responsePhoto = (Holder<byte[]>)parameter.get(1);
+        assertNotNull(responsePhoto.value, "The photo should not be null");
+        assertEquals(new String(responsePhoto.value, "UTF-8"), "ResponseFromCamel",
+                     "Should get the right response");
+
+        final Holder<Image> responseImage = (Holder<Image>)parameter.get(2);
+        assertNotNull(responseImage.value, "We should get the image here");
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomConsumerMutipleParameterTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomConsumerMutipleParameterTest.java
new file mode 100644
index 00000000000..fbe4f581e6f
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomConsumerMutipleParameterTest.java
@@ -0,0 +1,152 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+import java.awt.image.BufferedImage;
+import java.util.List;
+
+import java.awt.Image;
+import javax.imageio.ImageIO;
+import jakarta.xml.ws.BindingProvider;
+import jakarta.xml.ws.soap.SOAPBinding;
+
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.attachment.AttachmentMessage;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.ext.logging.LoggingFeature;
+import org.apache.cxf.frontend.ClientFactoryBean;
+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfMtomConsumerMutipleParameterTest.class,
+                           CxfMtomConsumerMutipleParameterTest.TestConfiguration.class, 
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfMtomConsumerMutipleParameterTest {
+
+    protected String MTOM_ENDPOINT_ADDRESS = "/CxfMtomConsumerTest/jaxws-mtom/hello";
+    protected String MTOM_ENDPOINT_URI = "cxf://" + MTOM_ENDPOINT_ADDRESS
+                                                      + "?serviceClass=org.apache.camel.component.cxf.soap.springboot.mtom.ImageService&properties.mtom-enabled=true";
+    private static final Logger LOG = LoggerFactory.getLogger(CxfMtomConsumerMutipleParameterTest.class);
+
+    static int port = CXFTestSupport.getPort1();
+    
+    
+
+    
+    private ImageService getPort() {
+              
+        JaxWsProxyFactoryBean proxyFactory = new JaxWsProxyFactoryBean();
+        ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean();
+        clientBean.setAddress("http://localhost:" + port + "/services" + MTOM_ENDPOINT_ADDRESS);
+        clientBean.setServiceClass(ImageService.class);
+        proxyFactory.getFeatures().add(new LoggingFeature());
+        ImageService imageService = (ImageService) proxyFactory.create();
+        return imageService;
+    }
+
+    protected Image getImage(String name) throws Exception {
+        return ImageIO.read(getClass().getResource(name));
+    }
+
+        
+    @Test
+    public void testInvokingServiceBare() throws Exception {
+        if (MtomTestHelper.isAwtHeadless(null, LOG)) {
+            return;
+        }
+
+        Image image = getImage("/java.jpg");
+        
+        ImageService port = getPort();
+
+        SOAPBinding binding = (SOAPBinding) ((BindingProvider) port).getBinding();
+        binding.setMTOMEnabled(true);
+
+        String ret = port.uploadImage(image, "RequestFromCXF");
+
+        assertEquals(ret,
+                     "RequestFromCXF hello", "Should get the right response");
+
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from(MTOM_ENDPOINT_URI).process(new Processor() {
+                        public void process(final Exchange exchange) throws Exception {
+                            AttachmentMessage in = exchange.getIn(AttachmentMessage.class);
+                            assertNull(in.getAttachments(), "We should not get any attachements here.");
+                            assertEquals("application/xop+xml", in.getHeader("Content-Type"), "Get a wrong Content-Type header");
+                            // Get the parameter list
+                            List<?> parameter = in.getBody(List.class);
+                            // Get the operation name
+                            String name = (String)parameter.get(1);
+                            assertNotNull(name, "The name should not be null");
+                            assertEquals(name,
+                                    "RequestFromCXF", "Should get the right request");
+                            BufferedImage image = (BufferedImage) parameter.get(0);
+                            assertNotNull(image, "We should get the image here");
+                            exchange.getMessage().setBody(name + " hello");
+
+                        }
+                    });
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomConsumerPayloadModeTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomConsumerPayloadModeTest.java
new file mode 100644
index 00000000000..3e053018886
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomConsumerPayloadModeTest.java
@@ -0,0 +1,206 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import jakarta.activation.DataHandler;
+import jakarta.mail.util.ByteArrayDataSource;
+import javax.xml.namespace.QName;
+import javax.xml.transform.Source;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.xpath.XPathConstants;
+
+import org.w3c.dom.Element;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.attachment.AttachmentMessage;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.CxfPayload;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.converter.jaxp.XmlConverter;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.binding.soap.SoapHeader;
+import org.apache.cxf.helpers.IOUtils;
+import org.apache.cxf.helpers.XPathUtils;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.staxutils.StaxUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfMtomConsumerPayloadModeTest.class,
+                           CxfMtomConsumerPayloadModeTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfMtomConsumerPayloadModeTest {
+    
+    private final QName SERVICE_QNAME = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloService");
+    private final QName PORT_QNAME = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloPort");
+    
+    
+    
+    private static final Logger LOG = LoggerFactory.getLogger(CxfMtomConsumerPayloadModeTest.class);
+
+    static int port = CXFTestSupport.getPort1();
+    
+    @Autowired
+    private ProducerTemplate template;
+
+    @Test
+    public void testConsumer() throws Exception {
+        if (MtomTestHelper.isAwtHeadless(null, LOG)) {
+            return;
+        }
+
+        Exchange exchange = template.send("cxf:bean:consumerEndpoint", new Processor() {
+
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                List<Source> elements = new ArrayList<>();
+                elements.add(new DOMSource(StaxUtils.read(new StringReader(getRequestMessage())).getDocumentElement()));
+                CxfPayload<SoapHeader> body = new CxfPayload<>(
+                        new ArrayList<SoapHeader>(),
+                        elements, null);
+                exchange.getIn().setBody(body);
+                exchange.getIn(AttachmentMessage.class).addAttachment(MtomTestHelper.REQ_PHOTO_CID,
+                        new DataHandler(new ByteArrayDataSource(MtomTestHelper.REQ_PHOTO_DATA, "application/octet-stream")));
+
+                exchange.getIn(AttachmentMessage.class).addAttachment(MtomTestHelper.REQ_IMAGE_CID,
+                        new DataHandler(new ByteArrayDataSource(MtomTestHelper.requestJpeg, "image/jpeg")));
+            }
+        });
+        assertEquals(exchange.getIn(AttachmentMessage.class).getAttachments().size(), 2);
+    }
+
+    protected String getRequestMessage() {
+        return MtomTestHelper.REQ_MESSAGE;
+    }
+
+    
+ // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        @Bean
+        public CxfEndpoint consumerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("/" + getClass().getSimpleName()+ "/jaxws-mtom/hello");
+            cxfEndpoint.setWsdlURL("mtom.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "PAYLOAD");
+            properties.put("mtom-enabled", true);
+            properties.put("loggingFeatureEnabled", false);
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:consumerEndpoint").process(new Processor() {
+                        
+                        @SuppressWarnings("unchecked")
+                        public void process(Exchange exchange) throws Exception {
+                            CxfPayload<SoapHeader> in = exchange.getIn().getBody(CxfPayload.class);
+
+                            // verify request
+                            assertEquals(1, in.getBody().size());
+
+                            Map<String, String> ns = new HashMap<>();
+                            ns.put("ns", MtomTestHelper.SERVICE_TYPES_NS);
+                            ns.put("xop", MtomTestHelper.XOP_NS);
+
+                            XPathUtils xu = new XPathUtils(ns);
+                            Element body = new XmlConverter().toDOMElement(in.getBody().get(0));
+                            Element ele = (Element) xu.getValue("//ns:Detail/ns:photo/xop:Include", body,
+                                    XPathConstants.NODE);
+                            String photoId = ele.getAttribute("href").substring(4); // skip "cid:"
+                            assertEquals(MtomTestHelper.REQ_PHOTO_CID, photoId);
+
+                            ele = (Element) xu.getValue("//ns:Detail/ns:image/xop:Include", body,
+                                    XPathConstants.NODE);
+                            String imageId = ele.getAttribute("href").substring(4); // skip "cid:"
+                            assertEquals(MtomTestHelper.REQ_IMAGE_CID, imageId);
+
+                            DataHandler dr = exchange.getIn(AttachmentMessage.class).getAttachment(photoId);
+                            assertEquals("application/octet-stream", dr.getContentType());
+                            assertArrayEquals(MtomTestHelper.REQ_PHOTO_DATA, IOUtils.readBytesFromStream(dr.getInputStream()));
+
+                            dr = exchange.getIn(AttachmentMessage.class).getAttachment(imageId);
+                            assertEquals("image/jpeg", dr.getContentType());
+                            assertArrayEquals(MtomTestHelper.requestJpeg, IOUtils.readBytesFromStream(dr.getInputStream()));
+
+                            // create response
+                            List<Source> elements = new ArrayList<>();
+                            elements.add(new DOMSource(StaxUtils.read(new StringReader(MtomTestHelper.RESP_MESSAGE)).getDocumentElement()));
+                            CxfPayload<SoapHeader> sbody = new CxfPayload<>(
+                                    new ArrayList<SoapHeader>(),
+                                    elements, null);
+                            exchange.getIn().setBody(sbody);
+                            exchange.getIn(AttachmentMessage.class).addAttachment(MtomTestHelper.RESP_PHOTO_CID,
+                                    new DataHandler(new ByteArrayDataSource(MtomTestHelper.RESP_PHOTO_DATA, "application/octet-stream")));
+
+                            exchange.getIn(AttachmentMessage.class).addAttachment(MtomTestHelper.RESP_IMAGE_CID,
+                                    new DataHandler(new ByteArrayDataSource(MtomTestHelper.responseJpeg, "image/jpeg")));
+
+                        }
+                    });
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomConsumerTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomConsumerTest.java
new file mode 100644
index 00000000000..76e9ad13a9a
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomConsumerTest.java
@@ -0,0 +1,168 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+import java.awt.Image;
+import java.net.URL;
+import java.util.List;
+
+import javax.imageio.ImageIO;
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.BindingProvider;
+import jakarta.xml.ws.Holder;
+import jakarta.xml.ws.soap.SOAPBinding;
+
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.attachment.AttachmentMessage;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.cxf.mtom_feature.Hello;
+import org.apache.camel.cxf.mtom_feature.HelloService;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.ext.logging.LoggingInInterceptor;
+import org.apache.cxf.ext.logging.LoggingOutInterceptor;
+import org.apache.cxf.frontend.ClientProxy;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfMtomConsumerTest.class,
+                           CxfMtomConsumerTest.TestConfiguration.class, 
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfMtomConsumerTest {
+
+    protected String MTOM_ENDPOINT_ADDRESS = "/CxfMtomConsumerTest/jaxws-mtom/hello";
+    protected String MTOM_ENDPOINT_URI = "cxf://" + MTOM_ENDPOINT_ADDRESS
+                                                      + "?serviceClass=org.apache.camel.cxf.mtom_feature.Hello&properties.mtom-enabled=true";
+
+    private static final Logger LOG = LoggerFactory.getLogger(CxfMtomConsumerTest.class);
+
+    private final QName serviceName = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloService");
+
+    static int port = CXFTestSupport.getPort1();
+    
+    
+
+    
+    private Hello getPort() {
+        URL wsdl = getClass().getResource("/mtom.wsdl");
+        assertNotNull(wsdl, "WSDL is null");
+
+        HelloService service = new HelloService(wsdl, serviceName);
+        assertNotNull(service, "Service is null");
+        Hello hello = service.getHelloPort();
+
+        ((BindingProvider) hello).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services" + MTOM_ENDPOINT_ADDRESS);
+        Client c = ClientProxy.getClient(hello);
+        c.getInInterceptors().add(new LoggingInInterceptor());
+        c.getOutInterceptors().add(new LoggingOutInterceptor());
+        return hello;
+    }
+
+    protected Image getImage(String name) throws Exception {
+        return ImageIO.read(getClass().getResource(name));
+    }
+
+    @Test
+    public void testInvokingService() throws Exception {
+        if (MtomTestHelper.isAwtHeadless(null, LOG)) {
+            return;
+        }
+
+        Holder<byte[]> photo = new Holder<>("RequestFromCXF".getBytes("UTF-8"));
+        Holder<Image> image = new Holder<>(getImage("/java.jpg"));
+
+        Hello port = getPort();
+
+        SOAPBinding binding = (SOAPBinding) ((BindingProvider) port).getBinding();
+        binding.setMTOMEnabled(true);
+
+        port.detail(photo, image);
+
+        assertEquals("ResponseFromCamel", new String(photo.value, "UTF-8"));
+        assertNotNull(image.value);
+
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from(MTOM_ENDPOINT_URI).process(new Processor() {
+                        @SuppressWarnings("unchecked")
+                        public void process(final Exchange exchange) throws Exception {
+                            AttachmentMessage in = exchange.getIn(AttachmentMessage.class);
+                            assertNull(in.getAttachments(), "We should not get any attachements here.");
+                            assertEquals("application/xop+xml", in.getHeader("Content-Type"), "Get a wrong Content-Type header");
+                            // Get the parameter list
+                            List<?> parameter = in.getBody(List.class);
+                            // Get the operation name
+                            Holder<byte[]> photo = (Holder<byte[]>) parameter.get(0);
+                            assertNotNull(photo.value, "The photo should not be null");
+                            assertEquals(new String(photo.value, "UTF-8"),
+                                    "RequestFromCXF", "Should get the right request");
+                            photo.value = "ResponseFromCamel".getBytes("UTF-8");
+                            Holder<Image> image = (Holder<Image>) parameter.get(1);
+                            assertNotNull(image.value, "We should get the image here");
+                            // set the holder message back    
+                            exchange.getMessage().setBody(new Object[] { null, photo, image });
+
+                        }
+                    });
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomDisabledConsumerPayloadModeTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomDisabledConsumerPayloadModeTest.java
new file mode 100644
index 00000000000..09efce69416
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomDisabledConsumerPayloadModeTest.java
@@ -0,0 +1,192 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import jakarta.activation.DataHandler;
+import jakarta.mail.util.ByteArrayDataSource;
+import javax.xml.namespace.QName;
+import javax.xml.transform.Source;
+import javax.xml.transform.dom.DOMSource;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.attachment.AttachmentMessage;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.CxfPayload;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.mtom.CxfMtomConsumerPayloadModeTest;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.binding.soap.SoapHeader;
+import org.apache.cxf.helpers.IOUtils;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.staxutils.StaxUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+/**
+ * Unit test for exercising SOAP with Attachment (SwA) feature of a CxfConsumer in PAYLOAD mode. That is, testing
+ * attachment with MTOM optimization off.
+ */
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, CxfMtomDisabledConsumerPayloadModeTest.class,
+                           CxfMtomDisabledConsumerPayloadModeTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfMtomDisabledConsumerPayloadModeTest {
+    
+    
+    private final QName SERVICE_QNAME = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloService");
+    private final QName PORT_QNAME = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloPort");
+    
+    static int port = CXFTestSupport.getPort1();
+    
+    
+    private static final Logger LOG = LoggerFactory.getLogger(CxfMtomConsumerPayloadModeTest.class);
+
+    @Autowired
+    private ProducerTemplate template;
+
+    @Test
+    public void testConsumer() throws Exception {
+        if (MtomTestHelper.isAwtHeadless(null, LOG)) {
+            return;
+        }
+
+        template.send("cxf:bean:consumerEndpoint", new Processor() {
+
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                List<Source> elements = new ArrayList<>();
+                elements.add(new DOMSource(StaxUtils.read(new StringReader(getRequestMessage())).getDocumentElement()));
+                CxfPayload<SoapHeader> body = new CxfPayload<>(
+                        new ArrayList<SoapHeader>(),
+                        elements, null);
+                exchange.getIn().setBody(body);
+                exchange.getIn(AttachmentMessage.class).addAttachment(MtomTestHelper.REQ_PHOTO_CID,
+                        new DataHandler(new ByteArrayDataSource(MtomTestHelper.REQ_PHOTO_DATA, "application/octet-stream")));
+
+                exchange.getIn(AttachmentMessage.class).addAttachment(MtomTestHelper.REQ_IMAGE_CID,
+                        new DataHandler(new ByteArrayDataSource(MtomTestHelper.requestJpeg, "image/jpeg")));
+            }
+        });
+    }
+
+    protected String getRequestMessage() {
+        return MtomTestHelper.MTOM_DISABLED_REQ_MESSAGE;
+    }
+
+
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        @Bean
+        public CxfEndpoint consumerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("/" + getClass().getSimpleName()+ "/jaxws-mtom/hello");
+            cxfEndpoint.setWsdlURL("mtom.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "PAYLOAD");
+            properties.put("mtom-enabled", false);
+            properties.put("loggingFeatureEnabled", false);
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:consumerEndpoint").process(new Processor() {
+                        
+                        @SuppressWarnings("unchecked")
+                        public void process(Exchange exchange) throws Exception {
+                            CxfPayload<SoapHeader> in = exchange.getIn().getBody(CxfPayload.class);
+
+                            // verify request
+                            assertEquals(1, in.getBody().size());
+
+                            DataHandler dr = exchange.getIn(AttachmentMessage.class).getAttachment(MtomTestHelper.REQ_PHOTO_CID);
+                            assertEquals("application/octet-stream", dr.getContentType());
+                            assertArrayEquals(MtomTestHelper.REQ_PHOTO_DATA, IOUtils.readBytesFromStream(dr.getInputStream()));
+
+                            dr = exchange.getIn(AttachmentMessage.class).getAttachment(MtomTestHelper.REQ_IMAGE_CID);
+                            assertEquals("image/jpeg", dr.getContentType());
+                            assertArrayEquals(MtomTestHelper.requestJpeg, IOUtils.readBytesFromStream(dr.getInputStream()));
+
+                            // create response
+                            List<Source> elements = new ArrayList<>();
+                            elements.add(new DOMSource(
+                                    StaxUtils.read(new StringReader(MtomTestHelper.MTOM_DISABLED_RESP_MESSAGE)).getDocumentElement()));
+                            CxfPayload<SoapHeader> body = new CxfPayload<>(
+                                    new ArrayList<SoapHeader>(),
+                                    elements, null);
+                            exchange.getMessage().setBody(body);
+                            exchange.getMessage(AttachmentMessage.class).addAttachment(MtomTestHelper.RESP_PHOTO_CID,
+                                    new DataHandler(new ByteArrayDataSource(MtomTestHelper.RESP_PHOTO_DATA, "application/octet-stream")));
+
+                            exchange.getMessage(AttachmentMessage.class).addAttachment(MtomTestHelper.RESP_IMAGE_CID,
+                                    new DataHandler(new ByteArrayDataSource(MtomTestHelper.responseJpeg, "image/jpeg")));
+
+                        }
+                    });
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomDisabledProducerPayloadModeTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomDisabledProducerPayloadModeTest.java
new file mode 100644
index 00000000000..9f37c471479
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomDisabledProducerPayloadModeTest.java
@@ -0,0 +1,287 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+
+
+
+import java.awt.Image;
+import java.awt.image.BufferedImage;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import jakarta.activation.DataHandler;
+import jakarta.activation.DataSource;
+import jakarta.annotation.Resource;
+import javax.imageio.ImageIO;
+import jakarta.mail.util.ByteArrayDataSource;
+import javax.xml.namespace.QName;
+import javax.xml.transform.Source;
+import javax.xml.transform.dom.DOMSource;
+import jakarta.xml.ws.Endpoint;
+import jakarta.xml.ws.Holder;
+import jakarta.xml.ws.WebServiceContext;
+import jakarta.xml.ws.handler.MessageContext;
+import jakarta.xml.ws.soap.SOAPBinding;
+
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Processor;
+import org.apache.camel.attachment.AttachmentMessage;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.CxfPayload;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.mtom.HelloImpl;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.cxf.mtom_feature.Hello;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.apache.cxf.attachment.AttachmentDataSource;
+import org.apache.cxf.binding.soap.SoapHeader;
+import org.apache.cxf.helpers.CastUtils;
+import org.apache.cxf.helpers.IOUtils;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.staxutils.StaxUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfMtomDisabledProducerPayloadModeTest.class,
+        CxfMtomDisabledProducerPayloadModeTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfMtomDisabledProducerPayloadModeTest {
+
+    protected final QName SERVICE_QNAME = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloService");
+    protected final QName PORT_QNAME = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloPort");
+    private static final Logger LOG = LoggerFactory.getLogger(CxfMtomDisabledProducerPayloadModeTest.class);
+
+    @Autowired
+    protected CamelContext context;
+    private Endpoint endpoint;
+    
+    static int port = CXFTestSupport.getPort1();
+    
+    
+    
+
+    @BeforeEach
+    public void setUp() throws Exception {
+        endpoint = Endpoint.publish("/" + getClass().getSimpleName()
+                                    + "/jaxws-mtom/hello",
+                getServiceImpl());
+        SOAPBinding binding = (SOAPBinding) endpoint.getBinding();
+        binding.setMTOMEnabled(isMtomEnabled());
+    }
+
+    @AfterEach
+    public void tearDown() throws Exception {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @Test
+    public void testProducer() throws Exception {
+        if (MtomTestHelper.isAwtHeadless(null, LOG)) {
+            return;
+        }
+
+        Exchange exchange = context.createProducerTemplate().send("direct:testEndpoint", new Processor() {
+
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                List<Source> elements = new ArrayList<>();
+                elements.add(new DOMSource(
+                        StaxUtils.read(new StringReader(MtomTestHelper.MTOM_DISABLED_REQ_MESSAGE)).getDocumentElement()));
+                CxfPayload<SoapHeader> body = new CxfPayload<>(
+                        new ArrayList<SoapHeader>(),
+                        elements, null);
+                exchange.getIn().setBody(body);
+                exchange.getIn(AttachmentMessage.class).addAttachment(MtomTestHelper.REQ_PHOTO_CID,
+                        new DataHandler(new ByteArrayDataSource(MtomTestHelper.REQ_PHOTO_DATA, "application/octet-stream")));
+
+                exchange.getIn(AttachmentMessage.class).addAttachment(MtomTestHelper.REQ_IMAGE_CID,
+                        new DataHandler(new ByteArrayDataSource(MtomTestHelper.requestJpeg, "image/jpeg")));
+
+            }
+
+        });
+
+        // process response - verify response attachments
+
+        CxfPayload<?> out = exchange.getMessage().getBody(CxfPayload.class);
+        assertEquals(1, out.getBody().size());
+
+        DataHandler dr = exchange.getMessage(AttachmentMessage.class).getAttachment(MtomTestHelper.RESP_PHOTO_CID);
+        assertEquals("application/octet-stream", dr.getContentType());
+        assertArrayEquals(MtomTestHelper.RESP_PHOTO_DATA, IOUtils.readBytesFromStream(dr.getInputStream()));
+
+        dr = exchange.getMessage(AttachmentMessage.class).getAttachment(MtomTestHelper.RESP_IMAGE_CID);
+        assertEquals("image/jpeg", dr.getContentType());
+
+        BufferedImage image = ImageIO.read(dr.getInputStream());
+        assertEquals(560, image.getWidth());
+        assertEquals(300, image.getHeight());
+
+    }
+
+    public static class MyHelloImpl extends HelloImpl implements Hello {
+
+        @Resource
+        WebServiceContext ctx;
+
+        @Override
+        public void detail(Holder<byte[]> photo, Holder<Image> image) {
+
+            // verify request attachments
+            Map<String, DataHandler> map
+                    = CastUtils.cast((Map<?, ?>) ctx.getMessageContext().get(MessageContext.INBOUND_MESSAGE_ATTACHMENTS));
+            assertEquals(2, map.size());
+
+            DataHandler dh = map.get(MtomTestHelper.REQ_PHOTO_CID);
+            assertEquals("application/octet-stream", dh.getContentType());
+            byte[] bytes = null;
+            try {
+                bytes = IOUtils.readBytesFromStream(dh.getInputStream());
+            } catch (IOException e) {
+                LOG.warn("I/O error reading bytes from stream: {}", e.getMessage(), e);
+            }
+            assertArrayEquals(MtomTestHelper.REQ_PHOTO_DATA, bytes);
+
+            dh = map.get(MtomTestHelper.REQ_IMAGE_CID);
+            assertEquals("image/jpeg", dh.getContentType());
+
+            BufferedImage bufferedImage = null;
+            try {
+                bufferedImage = ImageIO.read(dh.getInputStream());
+
+            } catch (IOException e) {
+                LOG.warn("I/O error reading bytes from stream: {}", e.getMessage(), e);
+            }
+            assertNotNull(bufferedImage);
+            assertEquals(41, bufferedImage.getWidth());
+            assertEquals(39, bufferedImage.getHeight());
+
+            // add output attachments
+            map = CastUtils.cast((Map<?, ?>) ctx.getMessageContext().get(MessageContext.OUTBOUND_MESSAGE_ATTACHMENTS));
+
+            try {
+                DataSource ds = new AttachmentDataSource("image/jpeg", getClass().getResourceAsStream("/Splash.jpg"));
+                map.put(MtomTestHelper.RESP_IMAGE_CID, new DataHandler(ds));
+
+            } catch (Exception e) {
+                LOG.warn("I/O error: {}", e.getMessage(), e);
+            }
+
+            try {
+                DataSource ds = new AttachmentDataSource(
+                        "application/octet-stream",
+                        new ByteArrayInputStream(MtomTestHelper.RESP_PHOTO_DATA));
+                map.put(MtomTestHelper.RESP_PHOTO_CID, new DataHandler(ds));
+
+            } catch (Exception e) {
+                LOG.warn("I/O error: {}", e.getMessage(), e);
+            }
+
+        }
+    }
+
+    
+    protected boolean isMtomEnabled() {
+        return false;
+    }
+
+    protected Object getServiceImpl() {
+        return new MyHelloImpl();
+    }
+
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+       
+        @Bean
+        public CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services/" 
+                + "CxfMtomDisabledProducerPayloadModeTest" + "/jaxws-mtom/hello");
+            cxfEndpoint.setWsdlURL("mtom.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "PAYLOAD");
+            properties.put("loggingFeatureEnabled", false);
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct:testEndpoint").
+                    to("cxf:bean:serviceEndpoint?defaultOperationName=Detail");
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomPOJOProducerTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomPOJOProducerTest.java
new file mode 100644
index 00000000000..41229f9a0e2
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomPOJOProducerTest.java
@@ -0,0 +1,192 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+
+
+
+import java.awt.Image;
+import java.awt.image.BufferedImage;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.imageio.ImageIO;
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.Endpoint;
+import jakarta.xml.ws.Holder;
+import jakarta.xml.ws.soap.SOAPBinding;
+
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.attachment.AttachmentMessage;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.mtom.HelloImpl;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfMtomPOJOProducerTest.class,
+        CxfMtomPOJOProducerTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfMtomPOJOProducerTest {
+
+    protected final QName SERVICE_QNAME = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloService");
+    protected final QName PORT_QNAME = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloPort");
+    private static final Logger LOG = LoggerFactory.getLogger(CxfMtomPOJOProducerTest.class);
+
+    @Autowired
+    protected CamelContext context;
+    private Endpoint endpoint;
+    
+    static int port = CXFTestSupport.getPort1();
+    
+
+    @BeforeEach
+    public void setUp() throws Exception {
+        endpoint = Endpoint.publish("/CxfMtomPOJOProducerTest/jaxws-mtom/hello", getImpl());
+        SOAPBinding binding = (SOAPBinding) endpoint.getBinding();
+        binding.setMTOMEnabled(true);
+
+    }
+
+    @AfterEach
+    public void tearDown() throws Exception {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+
+    @SuppressWarnings("unchecked")
+    @Test
+    public void testInvokingServiceFromCxfProducer() throws Exception {
+        if (MtomTestHelper.isAwtHeadless(null, LOG)) {
+            return;
+        }
+
+        final Holder<byte[]> photo = new Holder<>(MtomTestHelper.REQ_PHOTO_DATA);
+        final Holder<Image> image = new Holder<>(getImage("/java.jpg"));
+
+        Exchange exchange = context.createProducerTemplate().send("direct://testEndpoint", new Processor() {
+
+            @Override
+            public void process(Exchange exchange) throws Exception {
+                exchange.getIn().setBody(new Object[] { photo, image });
+
+            }
+
+        });
+
+        assertEquals(2, exchange.getMessage(AttachmentMessage.class).getAttachments().size(),
+                "The attachement size should be 2");
+
+        Object[] result = exchange.getMessage().getBody(Object[].class);
+        Holder<byte[]> photo1 = (Holder<byte[]>) result[1];
+        assertArrayEquals(MtomTestHelper.RESP_PHOTO_DATA, photo1.value);
+        Holder<Image> image1 = (Holder<Image>) result[2];
+        assertNotNull(image1.value);
+        if (image.value instanceof BufferedImage) {
+            assertEquals(560, ((BufferedImage) image1.value).getWidth());
+            assertEquals(300, ((BufferedImage) image1.value).getHeight());
+        }
+
+    }
+
+    private Image getImage(String name) throws Exception {
+        return ImageIO.read(getClass().getResource(name));
+    }
+
+    protected Object getImpl() {
+        return new HelloImpl();
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+       
+        @Bean
+        public CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services/" 
+                + "CxfMtomPOJOProducerTest" + "/jaxws-mtom/hello");
+            cxfEndpoint.setWsdlURL("mtom.wsdl");
+            cxfEndpoint.setServiceClass(org.apache.camel.cxf.mtom_feature.Hello.class);
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("mtom-enabled", true);
+            properties.put("loggingFeatureEnabled", false);
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct:testEndpoint").
+                    to("cxf:bean:serviceEndpoint?defaultOperationName=Detail");
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomProducerPayloadModeTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomProducerPayloadModeTest.java
new file mode 100644
index 00000000000..8416fa2eb9a
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomProducerPayloadModeTest.java
@@ -0,0 +1,241 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+
+
+
+import java.awt.image.BufferedImage;
+import java.io.StringReader;
+import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import jakarta.activation.DataHandler;
+import javax.imageio.ImageIO;
+import jakarta.mail.util.ByteArrayDataSource;
+import javax.xml.namespace.QName;
+import javax.xml.transform.Source;
+import javax.xml.transform.dom.DOMSource;
+import jakarta.xml.ws.Endpoint;
+import jakarta.xml.ws.soap.SOAPBinding;
+import javax.xml.xpath.XPathConstants;
+
+import org.w3c.dom.Element;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Processor;
+import org.apache.camel.attachment.AttachmentMessage;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.CxfPayload;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.mtom.HelloImpl;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.converter.jaxp.XmlConverter;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import org.apache.cxf.binding.soap.SoapHeader;
+import org.apache.cxf.helpers.IOUtils;
+import org.apache.cxf.helpers.XPathUtils;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.staxutils.StaxUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfMtomProducerPayloadModeTest.class,
+        CxfMtomProducerPayloadModeTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfMtomProducerPayloadModeTest {
+
+    protected final QName SERVICE_QNAME = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloService");
+    protected final QName PORT_QNAME = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloPort");
+    private static final Logger LOG = LoggerFactory.getLogger(CxfMtomProducerPayloadModeTest.class);
+
+    @Autowired
+    protected CamelContext context;
+    private Endpoint endpoint;
+    
+    static int port = CXFTestSupport.getPort1();
+    
+    
+
+    @BeforeEach
+    public void setUp() throws Exception {
+        endpoint = Endpoint.publish("/" + getClass().getSimpleName()
+                                    + "/jaxws-mtom/hello",
+                getServiceImpl());
+        SOAPBinding binding = (SOAPBinding) endpoint.getBinding();
+        binding.setMTOMEnabled(isMtomEnabled());
+    }
+
+    @AfterEach
+    public void tearDown() throws Exception {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    @Test
+    public void testProducer() throws Exception {
+        if (MtomTestHelper.isAwtHeadless(null, LOG)) {
+            return;
+        }
+
+        // START SNIPPET: producer
+
+        Exchange exchange = context.createProducerTemplate().send("direct:testEndpoint", new Processor() {
+
+            public void process(Exchange exchange) throws Exception {
+                exchange.setPattern(ExchangePattern.InOut);
+                List<Source> elements = new ArrayList<>();
+                elements.add(new DOMSource(StaxUtils.read(new StringReader(MtomTestHelper.REQ_MESSAGE)).getDocumentElement()));
+                CxfPayload<SoapHeader> body = new CxfPayload<>(
+                        new ArrayList<SoapHeader>(),
+                        elements, null);
+                exchange.getIn().setBody(body);
+                exchange.getIn(AttachmentMessage.class).addAttachment(MtomTestHelper.REQ_PHOTO_CID,
+                        new DataHandler(new ByteArrayDataSource(MtomTestHelper.REQ_PHOTO_DATA, "application/octet-stream")));
+
+                exchange.getIn(AttachmentMessage.class).addAttachment(MtomTestHelper.REQ_IMAGE_CID,
+                        new DataHandler(new ByteArrayDataSource(MtomTestHelper.requestJpeg, "image/jpeg")));
+
+            }
+
+        });
+
+        // process response 
+
+        CxfPayload<SoapHeader> out = exchange.getMessage().getBody(CxfPayload.class);
+        assertEquals(1, out.getBody().size());
+
+        Map<String, String> ns = new HashMap<>();
+        ns.put("ns", MtomTestHelper.SERVICE_TYPES_NS);
+        ns.put("xop", MtomTestHelper.XOP_NS);
+
+        XPathUtils xu = new XPathUtils(ns);
+        Element oute = new XmlConverter().toDOMElement(out.getBody().get(0));
+        Element ele = (Element) xu.getValue("//ns:DetailResponse/ns:photo/xop:Include", oute,
+                XPathConstants.NODE);
+        String photoId = ele.getAttribute("href").substring(4); // skip "cid:"
+
+        ele = (Element) xu.getValue("//ns:DetailResponse/ns:image/xop:Include", oute,
+                XPathConstants.NODE);
+        String imageId = ele.getAttribute("href").substring(4); // skip "cid:"
+
+        DataHandler dr = exchange.getMessage(AttachmentMessage.class).getAttachment(decodingReference(photoId));
+        assertEquals("application/octet-stream", dr.getContentType());
+        assertArrayEquals(MtomTestHelper.RESP_PHOTO_DATA, IOUtils.readBytesFromStream(dr.getInputStream()));
+
+        dr = exchange.getMessage(AttachmentMessage.class).getAttachment(decodingReference(imageId));
+        assertEquals("image/jpeg", dr.getContentType());
+
+        BufferedImage image = ImageIO.read(dr.getInputStream());
+        assertEquals(560, image.getWidth());
+        assertEquals(300, image.getHeight());
+
+        // END SNIPPET: producer
+
+    }
+
+    // CXF encoding the XOP reference since 3.0.1
+    private String decodingReference(String reference) throws UnsupportedEncodingException {
+        return java.net.URLDecoder.decode(reference, "UTF-8");
+    }
+
+    protected boolean isMtomEnabled() {
+        return true;
+    }
+
+    protected Object getServiceImpl() {
+        return new HelloImpl();
+    }
+
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+       
+        @Bean
+        public CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services/" 
+                + "CxfMtomProducerPayloadModeTest" + "/jaxws-mtom/hello");
+            cxfEndpoint.setWsdlURL("mtom.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "PAYLOAD");
+            properties.put("mtom-enabled", true);
+            properties.put("loggingFeatureEnabled", false);
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct:testEndpoint").
+                    to("cxf:bean:serviceEndpoint?defaultOperationName=Detail");
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterCxfMessageModeTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterCxfMessageModeTest.java
new file mode 100644
index 00000000000..bce7fe1939a
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterCxfMessageModeTest.java
@@ -0,0 +1,102 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+
+import jakarta.xml.ws.BindingProvider;
+
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.cxf.mtom_feature.Hello;
+import org.apache.camel.cxf.mtom_feature.HelloService;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfMtomRouterCxfMessageModeTest.class,
+                           CxfMtomRouterPayloadModeTest.TestConfiguration.class,
+                           CxfMtomRouterCxfMessageModeTest.EndpointConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfMtomRouterCxfMessageModeTest extends CxfMtomRouterPayloadModeTest {
+    
+       
+    
+
+    @Override
+    protected Hello getPort() {
+        URL wsdl = getClass().getResource("/mtom.wsdl");
+        assertNotNull(wsdl, "WSDL is null");
+
+        HelloService service = new HelloService(wsdl, HelloService.SERVICE);
+        assertNotNull(service, "Service is null");
+        Hello hello = service.getHelloPort();
+        ((BindingProvider) hello).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services" + "/CxfMtomRouterCxfMessageModeTest/jaxws-mtom/hello");
+        return hello;
+    }
+    
+    @Configuration
+    class EndpointConfiguration {
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("/" + "CxfMtomRouterCxfMessageModeTest" 
+                + "/jaxws-mtom/hello");
+            cxfEndpoint.setWsdlURL("mtom.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "CXF_MESSAGE");
+            properties.put("mtom-enabled", "true");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services/" 
+                + "CxfMtomRouterCxfMessageModeTest" + "/jaxws-mtom/backend");
+            cxfEndpoint.setWsdlURL("mtom.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "CXF_MESSAGE");
+            properties.put("mtom-enabled", "true");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+    }
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterPayloadMode12Test.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterPayloadMode12Test.java
new file mode 100644
index 00000000000..00801ffd5de
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterPayloadMode12Test.java
@@ -0,0 +1,109 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.BindingProvider;
+
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.mtom.HelloImpl12;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.cxf.mtom_feature.Hello;
+import org.apache.camel.cxf.mtom_feature.HelloService12;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfMtomRouterPayloadMode12Test.class,
+                           CxfMtomRouterPayloadModeTest.TestConfiguration.class,
+                           CxfMtomRouterPayloadMode12Test.EndpointConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfMtomRouterPayloadMode12Test extends CxfMtomRouterPayloadModeTest {
+    
+    protected final QName SERVICE_QNAME = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloService12");
+    
+        
+    @Override
+    protected Object getImpl() {
+        return new HelloImpl12();
+    }
+
+    @Override
+    protected Hello getPort() {
+        URL wsdl = getClass().getResource("/mtom.wsdl");
+        assertNotNull(wsdl, "WSDL is null");
+
+        HelloService12 service = new HelloService12(wsdl, HelloService12.SERVICE);
+        assertNotNull(service, "Service is null");
+        Hello hello = service.getHelloPort();
+        ((BindingProvider) hello).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services" + "/CxfMtomRouterPayloadMode12Test/jaxws-mtom/hello");
+        return hello;
+    }
+
+    @Configuration
+    class EndpointConfiguration {
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("/" + "CxfMtomRouterPayloadMode12Test" 
+                + "/jaxws-mtom/hello");
+            cxfEndpoint.setWsdlURL("mtom.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "PAYLOAD");
+            properties.put("mtom-enabled", "true");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services/" 
+                + "CxfMtomRouterPayloadMode12Test" + "/jaxws-mtom/backend");
+            cxfEndpoint.setWsdlURL("mtom.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "PAYLOAD");
+            properties.put("mtom-enabled", "true");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+
+    }
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterPayloadModeTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterPayloadModeTest.java
new file mode 100644
index 00000000000..8e7659006eb
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterPayloadModeTest.java
@@ -0,0 +1,214 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+
+
+
+import java.awt.Image;
+import java.awt.image.BufferedImage;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.imageio.ImageIO;
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.BindingProvider;
+import jakarta.xml.ws.Endpoint;
+import jakarta.xml.ws.Holder;
+import jakarta.xml.ws.soap.SOAPBinding;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.mtom.HelloImpl;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.cxf.mtom_feature.Hello;
+import org.apache.camel.cxf.mtom_feature.HelloService;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfMtomRouterPayloadModeTest.class,
+        CxfMtomRouterPayloadModeTest.TestConfiguration.class,
+        CxfMtomRouterPayloadModeTest.EndpointConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfMtomRouterPayloadModeTest {
+
+    protected final QName SERVICE_QNAME = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloService");
+    protected final QName PORT_QNAME = new QName("http://apache.org/camel/cxf/mtom_feature", "HelloPort");
+    private static final Logger LOG = LoggerFactory.getLogger(CxfMtomRouterPayloadModeTest.class);
+
+    @Autowired
+    protected CamelContext context;
+    private Endpoint endpoint;
+    
+    static int port = CXFTestSupport.getPort1();
+    
+    
+
+    @BeforeEach
+    public void setUp() throws Exception {
+        endpoint = Endpoint.publish("/"
+                                    + getClass().getSimpleName() + "/jaxws-mtom/backend",
+                getImpl());
+        SOAPBinding binding = (SOAPBinding) endpoint.getBinding();
+        binding.setMTOMEnabled(true);
+
+    }
+
+    @AfterEach
+    public void tearDown() throws Exception {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @Test
+    public void testInvokingServiceFromCXFClient() throws Exception {
+        if (MtomTestHelper.isAwtHeadless(null, LOG)) {
+            return;
+        }
+
+        Holder<byte[]> photo = new Holder<>(MtomTestHelper.REQ_PHOTO_DATA);
+        Holder<Image> image = new Holder<>(getImage("/java.jpg"));
+
+        Hello port = getPort();
+
+        SOAPBinding binding = (SOAPBinding) ((BindingProvider) port).getBinding();
+        binding.setMTOMEnabled(true);
+
+        port.detail(photo, image);
+
+        assertArrayEquals(MtomTestHelper.RESP_PHOTO_DATA, photo.value);
+        assertNotNull(image.value);
+        if (image.value instanceof BufferedImage) {
+            assertEquals(560, ((BufferedImage) image.value).getWidth());
+            assertEquals(300, ((BufferedImage) image.value).getHeight());
+        }
+
+    }
+
+    protected Hello getPort() {
+        URL wsdl = getClass().getResource("/mtom.wsdl");
+        assertNotNull(wsdl, "WSDL is null");
+
+        HelloService service = new HelloService(wsdl, HelloService.SERVICE);
+        assertNotNull(service, "Service is null");
+        Hello hello = service.getHelloPort();
+        ((BindingProvider) hello).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfMtomRouterPayloadModeTest/jaxws-mtom/hello");
+        return hello;
+    }
+
+    private Image getImage(String name) throws Exception {
+        return ImageIO.read(getClass().getResource(name));
+    }
+
+    protected Object getImpl() {
+        return new HelloImpl();
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+        
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint").
+                    to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+    }
+    
+    @Configuration
+    class EndpointConfiguration {
+        @Bean
+        public CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("/" + "CxfMtomRouterPayloadModeTest"
+                + "/jaxws-mtom/hello");
+            cxfEndpoint.setWsdlURL("mtom.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "PAYLOAD");
+            properties.put("mtom-enabled", "true");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        public CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services/" 
+                + "CxfMtomRouterPayloadModeTest" + "/jaxws-mtom/backend");
+            cxfEndpoint.setWsdlURL("mtom.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "PAYLOAD");
+            properties.put("mtom-enabled", "true");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+    }
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterRawModeTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterRawModeTest.java
new file mode 100644
index 00000000000..e16b5e3f82d
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/CxfMtomRouterRawModeTest.java
@@ -0,0 +1,102 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+
+import jakarta.xml.ws.BindingProvider;
+
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.cxf.mtom_feature.Hello;
+import org.apache.camel.cxf.mtom_feature.HelloService;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfMtomRouterRawModeTest.class,
+                           CxfMtomRouterRawModeTest.TestConfiguration.class,
+                           CxfMtomRouterRawModeTest.EndpointConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfMtomRouterRawModeTest extends CxfMtomRouterPayloadModeTest {
+    
+    
+    
+
+    @Override
+    protected Hello getPort() {
+        URL wsdl = getClass().getResource("/mtom.wsdl");
+        assertNotNull(wsdl, "WSDL is null");
+
+        HelloService service = new HelloService(wsdl, HelloService.SERVICE);
+        assertNotNull(service, "Service is null");
+        Hello hello = service.getHelloPort();
+        ((BindingProvider) hello).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services" + "/CxfMtomRouterRawModeTest/jaxws-mtom/hello");
+        return hello;
+    }
+    
+    @Configuration
+    class EndpointConfiguration {
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("/" + "CxfMtomRouterRawModeTest" 
+                + "/jaxws-mtom/hello");
+            cxfEndpoint.setWsdlURL("mtom.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "RAW");
+            properties.put("mtom-enabled", "true");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_QNAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_QNAME);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services/" 
+                + "CxfMtomRouterRawModeTest" + "/jaxws-mtom/backend");
+            cxfEndpoint.setWsdlURL("mtom.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "RAW");
+            properties.put("mtom-enabled", "true");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/ImageService.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/ImageService.java
new file mode 100644
index 00000000000..e95b1aac50d
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/ImageService.java
@@ -0,0 +1,33 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+import java.awt.Image;
+import jakarta.jws.WebParam;
+import jakarta.jws.WebService;
+import jakarta.xml.ws.soap.MTOM;
+
+@WebService(name = "ImageService", targetNamespace = "http://apache.org/camel/cxf/mtom_feature")
+@MTOM
+public interface ImageService {
+
+    Image downloadImage(@WebParam(name = "name") String name);
+
+    
+    String uploadImage(@WebParam(name = "data") Image data, @WebParam(name = "name") String name);
+
+}
\ No newline at end of file
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/MtomTestHelper.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/MtomTestHelper.java
new file mode 100644
index 00000000000..179c0ecfbc7
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/mtom/MtomTestHelper.java
@@ -0,0 +1,102 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.mtom;
+
+import java.io.IOException;
+
+import org.apache.cxf.helpers.IOUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import static org.junit.jupiter.api.Assertions.assertFalse;
+
+/**
+ * Package local test helper
+ */
+public final class MtomTestHelper {
+    static final String SERVICE_TYPES_NS = "http://apache.org/camel/cxf/mtom_feature/types";
+    static final String XOP_NS = "http://www.w3.org/2004/08/xop/include";
+    static final byte[] REQ_PHOTO_DATA = { 1, 0, -1, 34, 23, 3, 23, 55, 33 };
+    static final byte[] RESP_PHOTO_DATA = { 5, -7, 23, 1, 0, -1, 34, 23, 3, 23, 55, 33, 3 };
+
+    static final String REQ_PHOTO_CID = "e33b6792-6666-4837-b0d9-68c88c8cadcb-1@apache.org";
+    static final String REQ_IMAGE_CID = "e33b6792-6666-4837-b0d9-68c88c8cadcb-2@apache.org";
+
+    static final String REQ_MESSAGE = "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
+                                      + "<Detail xmlns=\"http://apache.org/camel/cxf/mtom_feature/types\">"
+                                      + "<photo><xop:Include xmlns:xop=\"http://www.w3.org/2004/08/xop/include\""
+                                      + " href=\"cid:" + REQ_PHOTO_CID + "\"/>"
+                                      + "</photo><image><xop:Include xmlns:xop=\"http://www.w3.org/2004/08/xop/include\""
+                                      + " href=\"cid:" + REQ_IMAGE_CID + "\"/></image></Detail>";
+
+    static final String MTOM_DISABLED_REQ_MESSAGE = "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
+                                                    + "<Detail xmlns=\"http://apache.org/camel/cxf/mtom_feature/types\">"
+                                                    + "<photo>cid:" + REQ_PHOTO_CID + "</photo>"
+                                                    + "<image>cid:" + REQ_IMAGE_CID + "</image></Detail>";
+
+    static final String RESP_PHOTO_CID = "4c7b78dc-356a-4fca-8877-068ee2f31824-7@apache.org";
+    static final String RESP_IMAGE_CID = "4c7b78dc-356a-4fca-8877-068ee2f31824-8@apache.org";
+
+    static final String RESP_MESSAGE = "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
+                                       + "<DetailResponse xmlns=\"http://apache.org/camel/cxf/mtom_feature/types\">"
+                                       + "<photo><xop:Include xmlns:xop=\"http://www.w3.org/2004/08/xop/include\""
+                                       + " href=\"cid:" + RESP_PHOTO_CID + "\"/>"
+                                       + "</photo><image><xop:Include xmlns:xop=\"http://www.w3.org/2004/08/xop/include\""
+                                       + " href=\"cid:" + RESP_IMAGE_CID + "\"/></image></DetailResponse>";
+
+    static final String MTOM_DISABLED_RESP_MESSAGE = "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
+                                                     + "<DetailResponse xmlns=\"http://apache.org/camel/cxf/mtom_feature/types\">"
+                                                     + "<photo>cid:" + RESP_PHOTO_CID + "</photo>"
+                                                     + "<image>cid:" + RESP_IMAGE_CID + "</image></DetailResponse>";
+
+    static byte[] requestJpeg;
+    static byte[] responseJpeg;
+
+    private static final Logger LOG = LoggerFactory.getLogger(MtomTestHelper.class);
+
+    static {
+        try {
+            requestJpeg = IOUtils.readBytesFromStream(MtomTestHelper.class.getResourceAsStream("/java.jpg"));
+            responseJpeg = IOUtils.readBytesFromStream(MtomTestHelper.class.getResourceAsStream("/Splash.jpg"));
+        } catch (IOException e) {
+            LOG.warn("I/O error reading bytes from stream: {}", e.getMessage(), e);
+        }
+    }
+
+    private MtomTestHelper() {
+        // utility class
+    }
+
+    static boolean isAwtHeadless(org.apache.commons.logging.Log log, org.slf4j.Logger logger) {
+        assertFalse(log == null && logger == null, "Both loggers are not allowed to be null!");
+        boolean headless = Boolean.getBoolean("java.awt.headless");
+        if (headless) {
+            // having the conversion characters %c{1} inside log4j.properties will reveal us the
+            // test class currently running as we make use of it's logger to warn about skipping!
+            String warning = "Running headless. Skipping test as Images may not work.";
+            if (log != null) {
+                log.warn(warning);
+            }
+
+            if (logger != null) {
+                logger.warn("Running headless. Skipping test as Images may not work.");
+            }
+        }
+
+        return headless;
+    }
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadConsumerDuplicateNamespaceStreamCacheTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadConsumerDuplicateNamespaceStreamCacheTest.java
new file mode 100644
index 00000000000..928e7c8b280
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadConsumerDuplicateNamespaceStreamCacheTest.java
@@ -0,0 +1,70 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.namespace;
+
+
+
+
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfPayloadConsumerDuplicateNamespaceStreamCacheTest.class,
+        CxfPayloadConsumerNamespaceOnEnvelopeStreamCacheTest.TestConfiguration.class,
+        CxfAutoConfiguration.class,
+        CxfPayloadConsumerNamespaceOnEnvelopeTest.EndpointConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfPayloadConsumerDuplicateNamespaceStreamCacheTest extends CxfPayloadConsumerNamespaceOnEnvelopeStreamCacheTest {
+    
+    
+    /*
+     * The soap namespace prefix is already defined on the root tag of the
+     * payload. If this is set another time from the envelope, the result will
+     * be an invalid XML.
+     */
+    protected static final String REQUEST_MESSAGE
+            = "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">"
+              + "<soap:Body><ns2:getToken xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ns2=\"http://camel.apache.org/cxf/namespace\">"
+              + "<arg0 xsi:type=\"xs:string\">Send</arg0></ns2:getToken></soap:Body></soap:Envelope>";
+
+    @Override
+    @Test
+    public void testInvokeRouter() {
+        Object returnValue = template.requestBody("direct:router", REQUEST_MESSAGE);
+        assertNotNull(returnValue);
+        assertTrue(returnValue instanceof String);
+        assertTrue(((String) returnValue).contains("Return Value"));
+        assertTrue(((String) returnValue).contains("http://www.w3.org/2001/XMLSchema-instance"));
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadConsumerNamespaceOnEnvelopeStreamCacheTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadConsumerNamespaceOnEnvelopeStreamCacheTest.java
new file mode 100644
index 00000000000..54e22556b35
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadConsumerNamespaceOnEnvelopeStreamCacheTest.java
@@ -0,0 +1,75 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.namespace;
+
+import org.w3c.dom.Document;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class,
+                           CxfPayloadConsumerNamespaceOnEnvelopeStreamCacheTest.class,
+                           CxfPayloadConsumerNamespaceOnEnvelopeStreamCacheTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class,
+                           CxfPayloadConsumerNamespaceOnEnvelopeTest.EndpointConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfPayloadConsumerNamespaceOnEnvelopeStreamCacheTest
+    extends CxfPayloadConsumerNamespaceOnEnvelopeTest {
+    
+        
+   
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct:router")
+                        // Use message mode to send the raw message
+                        .to("cxf:bean:serviceEndpoint")
+                        // Convert to String to make testing the result easier
+                        .convertBodyTo(String.class);
+                    // The consumer is running in payload mode
+                    from("cxf:bean:routerEndpoint")
+                        // Use stream caching to trigger the issue
+                        .streamCaching()
+                        // Parse to DOM to make sure it's still valid XML
+                        .convertBodyTo(Document.class).setBody().constant(RESPONSE_PAYLOAD);
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadConsumerNamespaceOnEnvelopeTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadConsumerNamespaceOnEnvelopeTest.java
new file mode 100644
index 00000000000..c143728e37a
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadConsumerNamespaceOnEnvelopeTest.java
@@ -0,0 +1,150 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.namespace;
+
+
+import javax.xml.namespace.QName;
+
+import org.w3c.dom.Document;
+
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfPayloadConsumerNamespaceOnEnvelopeTest.class,
+                           CxfPayloadConsumerNamespaceOnEnvelopeTest.TestConfiguration.class,
+                           CxfPayloadConsumerNamespaceOnEnvelopeTest.EndpointConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfPayloadConsumerNamespaceOnEnvelopeTest {
+
+    /*
+     * The request message is generated directly. The issue here is that the xsi and xs namespaces are defined
+     * on the SOAP envelope but are used within the payload. This can cause issues with some type conversions
+     * in PAYLOAD mode, as the Camel-CXF endpoint will return some kind of window within the StAX parsing (and
+     * the namespace definitions are outside). If some CXF proxy is used to send the message the namespaces
+     * will be defined within the payload (and everything works fine).
+     */
+    protected static final String RESPONSE_PAYLOAD = "<ns2:getTokenResponse xmlns:ns2=\"http://camel.apache.org/cxf/namespace\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">"
+                                                     + "<return xsi:type=\"xs:string\">Return Value</return></ns2:getTokenResponse>";
+    protected static final String REQUEST_MESSAGE = "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">"
+                                                    + "<soap:Body><ns2:getToken xmlns:ns2=\"http://camel.apache.org/cxf/namespace\"><arg0 xsi:type=\"xs:string\">Send</arg0></ns2:getToken></soap:Body></soap:Envelope>";
+    
+    private QName serviceName = QName.valueOf("{http://camel.apache.org/cxf/namespace}GetTokenService");
+
+    @Autowired
+    ProducerTemplate template;
+    
+    static int port = CXFTestSupport.getPort1();
+
+    
+    
+    @Test
+    public void testInvokeRouter() {
+        Object returnValue = template.requestBody("direct:router", REQUEST_MESSAGE);
+        assertNotNull(returnValue);
+        assertTrue(returnValue instanceof String);
+        assertTrue(((String)returnValue).contains("Return Value"));
+        assertTrue(((String)returnValue).contains("http://www.w3.org/2001/XMLSchema-instance"));
+    }
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+                
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct:router")
+                        // Use message mode to send the raw message
+                        .to("cxf:bean:serviceEndpoint")
+                        // Convert to String to make testing the result easier
+                        .convertBodyTo(String.class);
+                    // The consumer is running in payload mode
+                    from("cxf:bean:routerEndpoint")
+                        // Convert the CxfPayload to a String to trigger the issue
+                        .convertBodyTo(String.class)
+                        // Parse to DOM to make sure it's still valid XML
+                        .convertBodyTo(Document.class).setBody().constant(RESPONSE_PAYLOAD);
+                }
+            };
+        }
+        
+        
+        
+        
+    }
+
+    @Configuration
+    public class EndpointConfiguration {
+        
+        @Bean
+        ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("/GetToken/SoapContext/SoapPort");
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setWsdlURL("GetToken.wsdl");
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services/GetToken/SoapContext/SoapPort");
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setWsdlURL("GetToken.wsdl");
+            cxfEndpoint.setDataFormat(DataFormat.RAW);
+            return cxfEndpoint;
+        }
+
+    }
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadProducerNamespaceOnEnvelopeStreamCacheTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadProducerNamespaceOnEnvelopeStreamCacheTest.java
new file mode 100644
index 00000000000..20654d68529
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadProducerNamespaceOnEnvelopeStreamCacheTest.java
@@ -0,0 +1,84 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.namespace;
+
+
+
+
+import org.w3c.dom.Document;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfPayloadProducerNamespaceOnEnvelopeStreamCacheTest.class,
+        CxfPayloadProducerNamespaceOnEnvelopeStreamCacheTest.TestConfiguration.class,
+        CxfPayloadProducerNamespaceOnEnvelopeTest.EndpointConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfPayloadProducerNamespaceOnEnvelopeStreamCacheTest extends CxfPayloadProducerNamespaceOnEnvelopeTest {
+    
+    
+    
+    
+        
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct:router") //
+                            .streamCaching()
+                            // call an external Web service in payload mode
+                            .to("cxf:bean:serviceEndpoint?dataFormat=PAYLOAD")
+                            // Check that the issue doesn't occur if stream caching is enabled
+                            // Parse to DOM to make sure it's still valid XML
+                            .convertBodyTo(Document.class)
+                            // Convert back to String to make testing the result
+                            // easier
+                            .convertBodyTo(String.class);
+                    // This route just returns the test message
+                    from("cxf:bean:routerEndpoint?dataFormat=RAW").setBody().constant(RESPONSE_MESSAGE);
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadProducerNamespaceOnEnvelopeTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadProducerNamespaceOnEnvelopeTest.java
new file mode 100644
index 00000000000..d163277480b
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/namespace/CxfPayloadProducerNamespaceOnEnvelopeTest.java
@@ -0,0 +1,151 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.namespace;
+
+
+
+
+import javax.xml.namespace.QName;
+
+import org.w3c.dom.Document;
+
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CxfPayloadProducerNamespaceOnEnvelopeTest.class,
+        CxfPayloadProducerNamespaceOnEnvelopeTest.TestConfiguration.class,
+        CxfPayloadProducerNamespaceOnEnvelopeTest.EndpointConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CxfPayloadProducerNamespaceOnEnvelopeTest {
+    
+    
+    protected static final String RESPONSE_MESSAGE
+        = "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"><soap:Body>"
+            + "<ns2:getTokenResponse xmlns:ns2=\"http://camel.apache.org/cxf/namespace\"><return xsi:type=\"xs:string\">Return Value</return></ns2:getTokenResponse></soap:Body></soap:Envelope>";
+    protected static final String REQUEST_PAYLOAD = "<ns2:getToken xmlns:ns2=\"http://camel.apache.org/cxf/namespace\"/>";
+    
+    private static QName SERVICENAME = QName.valueOf("{http://camel.apache.org/cxf/namespace}GetTokenService");
+    
+    static int port = CXFTestSupport.getPort1();
+
+
+    
+    
+    
+    
+    @Autowired
+    ProducerTemplate template;
+    
+    @Test
+    public void testInvokeRouter() {
+        Object returnValue = template.requestBody("direct:router", REQUEST_PAYLOAD);
+        assertNotNull(returnValue);
+        assertTrue(returnValue instanceof String);
+        assertTrue(((String) returnValue).contains("Return Value"));
+        assertTrue(((String) returnValue).contains("http://www.w3.org/2001/XMLSchema-instance"));
+    }
+    
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("direct:router") //
+                        // call an external Web service in payload mode
+                        .to("cxf:bean:serviceEndpoint")
+                        // Convert the CxfPayload to a String to trigger the
+                        // issue
+                        .convertBodyTo(String.class)
+                        // Parse to DOM to make sure it's still valid XML
+                        .convertBodyTo(Document.class)
+                        // Convert back to String to make testing the result
+                        // easier
+                        .convertBodyTo(String.class);
+                    // This route just returns the test message
+                    from("cxf:bean:routerEndpoint").setBody().constant(RESPONSE_MESSAGE);
+                }
+            };
+        }
+    }
+    
+    @Configuration
+    class EndpointConfiguration {
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICENAME);
+            cxfEndpoint.setAddress("/GetToken/SoapContext/SoapPort");
+            cxfEndpoint.setDataFormat(DataFormat.RAW);
+            return cxfEndpoint;
+        }
+        
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICENAME);
+            cxfEndpoint.setAddress("http://localhost:" + port 
+                + "/services/GetToken/SoapContext/SoapPort");
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+    }
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/noparam/NoParamTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/noparam/NoParamTest.java
new file mode 100644
index 00000000000..bb9e55f31de
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/noparam/NoParamTest.java
@@ -0,0 +1,124 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.noparam;
+
+
+
+
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        NoParamTest.class,
+        NoParamTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class NoParamTest {
+    
+    private static final Logger LOGGER = LoggerFactory.getLogger(NoParamTest.class);
+    
+    static int port = CXFTestSupport.getPort1();
+
+
+     
+    
+    
+    @Autowired
+    ProducerTemplate template;
+        
+    @Test
+    public void testNullBody() throws Exception {
+        Object body = template.sendBody("direct:noParam", ExchangePattern.InOut, null);
+        assertNotNull(body);
+        LOGGER.error(body.toString());
+    }
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+        @Bean
+        CxfEndpoint noParamEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.noparam.NoParamEndpoint.class);
+            cxfEndpoint.setAddress("/camel-noparam/");
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint noParamServiceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.noparam.NoParamEndpoint.class);
+            cxfEndpoint.setAddress("http://localhost:" + port 
+                                   + "/services/camel-noparam/");
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:noParamEndpoint")
+                    .transform(constant("OK"))
+                    .to("mock:end");
+                    
+                    from("direct:noParam")
+                    .to("cxf:bean:noParamServiceEndpoint");
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/soap/headers/CxfMessageHeadersRelayTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/soap/headers/CxfMessageHeadersRelayTest.java
new file mode 100644
index 00000000000..c0c94683202
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/soap/headers/CxfMessageHeadersRelayTest.java
@@ -0,0 +1,980 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.soap.headers;
+
+import java.io.StringReader;
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Proxy;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import jakarta.xml.bind.JAXBContext;
+import jakarta.xml.bind.JAXBElement;
+import jakarta.xml.bind.JAXBException;
+import javax.xml.namespace.QName;
+import javax.xml.transform.Source;
+import javax.xml.transform.dom.DOMSource;
+import jakarta.xml.ws.BindingProvider;
+import jakarta.xml.ws.Endpoint;
+import jakarta.xml.ws.Holder;
+
+import org.w3c.dom.Node;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.CxfPayload;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.soap.headers.Constants;
+import org.apache.camel.component.cxf.soap.headers.CustomHeaderFilter;
+import org.apache.camel.component.cxf.soap.headers.HeaderService;
+import org.apache.camel.component.cxf.soap.headers.HeaderTester;
+import org.apache.camel.component.cxf.soap.headers.HeaderTesterImpl;
+import org.apache.camel.component.cxf.soap.headers.HeaderTesterWithInsertionImpl;
+import org.apache.camel.component.cxf.soap.headers.InHeader;
+import org.apache.camel.component.cxf.soap.headers.InHeaderResponse;
+import org.apache.camel.component.cxf.soap.headers.InoutHeader;
+import org.apache.camel.component.cxf.soap.headers.InoutHeaderResponse;
+import org.apache.camel.component.cxf.soap.headers.Me;
+import org.apache.camel.component.cxf.soap.headers.OutHeader;
+import org.apache.camel.component.cxf.soap.headers.OutHeaderResponse;
+import org.apache.camel.component.cxf.soap.headers.SOAPHeaderData;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.component.cxf.transport.header.CxfHeaderFilterStrategy;
+import org.apache.camel.component.cxf.transport.header.MessageHeaderFilter;
+import org.apache.camel.component.cxf.transport.header.SoapMessageHeaderFilter;
+import org.apache.camel.spi.HeaderFilterStrategy;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.support.DefaultExchange;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Scope;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.binding.soap.SoapHeader;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.ext.logging.LoggingFeature;
+import org.apache.cxf.headers.Header;
+import org.apache.cxf.headers.Header.Direction;
+import org.apache.cxf.helpers.CastUtils;
+import org.apache.cxf.jaxb.JAXBDataBinding;
+import org.apache.cxf.message.MessageContentsList;
+import org.apache.cxf.outofband.header.OutofBandHeader;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.staxutils.StaxUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfMessageHeadersRelayTest.class,
+                           CxfMessageHeadersRelayTest.TestConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfMessageHeadersRelayTest {
+
+    private static QName SERVICENAME = QName.valueOf("{http://apache.org/camel/component/cxf/soap/headers}HeaderService");
+    
+    static int port = CXFTestSupport.getPort1();
+        
+
+    private static final Logger LOG = LoggerFactory.getLogger(CxfMessageHeadersRelayTest.class);
+
+    @Autowired
+    protected CamelContext context;
+    
+    @Autowired
+    protected ProducerTemplate template;
+
+    private Endpoint relayEndpoint;
+    private Endpoint noRelayEndpoint;
+    private Endpoint relayEndpointWithInsertion;
+
+    @BeforeEach
+    public void setUp() throws Exception {
+        relayEndpoint = Endpoint.publish("/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpointBackend",
+                new HeaderTesterImpl());
+        noRelayEndpoint = Endpoint.publish("/CxfMessageHeadersRelayTest/HeaderService/routerNoRelayEndpointBackend",
+                new HeaderTesterImpl(false));
+        relayEndpointWithInsertion = Endpoint.publish("/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpointWithInsertionBackend",
+                new HeaderTesterWithInsertionImpl());
+
+    }
+
+    @AfterEach
+    public void tearDown() throws Exception {
+
+        if (relayEndpoint != null) {
+            relayEndpoint.stop();
+            relayEndpoint = null;
+        }
+
+        if (noRelayEndpoint != null) {
+            noRelayEndpoint.stop();
+            noRelayEndpoint = null;
+        }
+
+        if (relayEndpointWithInsertion != null) {
+            relayEndpointWithInsertion.stop();
+            relayEndpointWithInsertion = null;
+        }
+    }
+
+    protected static void addOutOfBoundHeader(HeaderTester proxy, boolean invalid) throws JAXBException {
+        InvocationHandler handler = Proxy.getInvocationHandler(proxy);
+        BindingProvider bp = null;
+
+        try {
+            if (handler instanceof BindingProvider) {
+                bp = (BindingProvider) handler;
+                Map<String, Object> requestContext = bp.getRequestContext();
+                requestContext.put(Header.HEADER_LIST, buildOutOfBandHeaderList(invalid));
+            }
+        } catch (JAXBException ex) {
+            throw ex;
+        }
+
+    }
+
+    @Test
+    public void testInHeaderCXFClientRelay() throws Exception {
+        HeaderService s = new HeaderService(
+                getClass().getClassLoader().getResource("soap_header.wsdl"),
+                HeaderService.SERVICE);
+        HeaderTester proxy = s.getSoapPortRelay();
+        ((BindingProvider) proxy).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                     "http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpoint");
+        InHeader me = new InHeader();
+        me.setRequestType("CXF user");
+        InHeaderResponse response = proxy.inHeader(me, Constants.IN_HEADER_DATA);
+        assertEquals("pass", response.getResponseType(), "Expected in band header to propagate but it didn't");
+    }
+
+    @Test
+    public void testOutHeaderCXFClientRelay() throws Exception {
+        HeaderService s = new HeaderService(
+                getClass().getClassLoader().getResource("soap_header.wsdl"),
+                HeaderService.SERVICE);
+        HeaderTester proxy = s.getSoapPortRelay();
+        ((BindingProvider) proxy).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpoint");
+
+        OutHeader me = new OutHeader();
+        me.setRequestType("CXF user");
+        Holder<OutHeaderResponse> result = new Holder<>(new OutHeaderResponse());
+        Holder<SOAPHeaderData> header = new Holder<>(new SOAPHeaderData());
+        proxy.outHeader(me, result, header);
+        assertEquals("pass", result.value.getResponseType(), "Expected in band header to propagate but it didn't");
+        assertTrue(Constants.equals(Constants.OUT_HEADER_DATA, header.value),
+                "Expected in band response header to propagate but it either didn't "
+                                                                              + " or its contents do not match");
+    }
+
+    @Test
+    public void testInOutHeaderCXFClientRelay() throws Exception {
+        HeaderService s = new HeaderService(
+                getClass().getClassLoader().getResource("soap_header.wsdl"),
+                HeaderService.SERVICE);
+        HeaderTester proxy = s.getSoapPortRelay();
+        ((BindingProvider) proxy).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpoint");
+        InoutHeader me = new InoutHeader();
+        me.setRequestType("CXF user");
+        Holder<SOAPHeaderData> header = new Holder<>(Constants.IN_OUT_REQUEST_HEADER_DATA);
+        InoutHeaderResponse result = proxy.inoutHeader(me, header);
+        assertEquals("pass", result.getResponseType(), "Expected in band header to propagate but it didn't");
+        assertTrue(Constants.equals(Constants.IN_OUT_RESPONSE_HEADER_DATA, header.value),
+                "Expected in band response header to propagate but it either didn't "
+                                                                                          + " or its contents do not match");
+    }
+
+    @Test
+    public void testInOutOfBandHeaderCXFClientRelay() throws Exception {
+        HeaderService s = new HeaderService(
+                getClass().getClassLoader().getResource("soap_header.wsdl"),
+                HeaderService.SERVICE);
+        HeaderTester proxy = s.getSoapPortRelay();
+        ((BindingProvider) proxy).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpoint");
+        addOutOfBoundHeader(proxy, false);
+        Me me = new Me();
+        me.setFirstName("john");
+        me.setLastName("Doh");
+
+        Me response = proxy.inOutOfBandHeader(me);
+        assertEquals("pass", response.getFirstName(), "Expected the out of band header to propagate but it didn't");
+    }
+
+    @Test
+    public void testInoutOutOfBandHeaderCXFClientRelay() throws Exception {
+        HeaderService s = new HeaderService(
+                getClass().getClassLoader().getResource("soap_header.wsdl"),
+                HeaderService.SERVICE);
+        HeaderTester proxy = s.getSoapPortRelay();
+        ((BindingProvider) proxy).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpoint");
+        addOutOfBoundHeader(proxy, false);
+        Me me = new Me();
+        me.setFirstName("john");
+        me.setLastName("Doh");
+        Me response = proxy.inoutOutOfBandHeader(me);
+        assertEquals("pass", response.getFirstName(), "Expected the out of band header to propagate but it didn't");
+        validateReturnedOutOfBandHeader(proxy);
+    }
+
+    @Test
+    public void testInoutOutOfBandHeaderCXFClientRelayWithHeaderInsertion() throws Exception {
+        HeaderService s = new HeaderService(
+                getClass().getClassLoader().getResource("soap_header.wsdl"),
+                HeaderService.SERVICE);
+        HeaderTester proxy = s.getSoapPortRelayWithInsertion();
+        ((BindingProvider) proxy).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpointWithInsertion");
+        addOutOfBoundHeader(proxy, false);
+        Me me = new Me();
+        me.setFirstName("john");
+        me.setLastName("Doh");
+        Me response = proxy.inoutOutOfBandHeader(me);
+        assertEquals("pass", response.getFirstName(), "Expected the out of band header to propagate but it didn't");
+
+        InvocationHandler handler = Proxy.getInvocationHandler(proxy);
+        BindingProvider bp = null;
+        if (!(handler instanceof BindingProvider)) {
+            fail("Unable to cast dynamic proxy InocationHandler to BindingProvider type");
+        }
+
+        bp = (BindingProvider) handler;
+        Map<String, Object> responseContext = bp.getResponseContext();
+        validateReturnedOutOfBandHeaderWithInsertion(responseContext, true);
+    }
+
+    @Test
+    public void testOutOutOfBandHeaderCXFClientRelay() throws Exception {
+        HeaderService s = new HeaderService(
+                getClass().getClassLoader().getResource("soap_header.wsdl"),
+                HeaderService.SERVICE);
+        HeaderTester proxy = s.getSoapPortRelay();
+        ((BindingProvider) proxy).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpoint");
+        Me me = new Me();
+        me.setFirstName("john");
+        me.setLastName("Doh");
+        Me response = proxy.outOutOfBandHeader(me);
+        assertEquals("pass", response.getFirstName(), "Expected the out of band header to propagate but it didn't");
+        validateReturnedOutOfBandHeader(proxy);
+    }
+
+    @Test
+    public void testInOutOfBandHeaderCXFClientNoRelay() throws Exception {
+
+        HeaderService s = new HeaderService(
+                getClass().getClassLoader().getResource("soap_header.wsdl"),
+                HeaderService.SERVICE);
+        HeaderTester proxy = s.getSoapPortNoRelay();
+        ((BindingProvider) proxy).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerNoRelayEndpoint");
+
+        addOutOfBoundHeader(proxy, false);
+        Me me = new Me();
+        me.setFirstName("john");
+        me.setLastName("Doh");
+        Me response = proxy.inOutOfBandHeader(me);
+        assertEquals("pass", response.getFirstName(), "Expected the in out of band header *not* to propagate but it did");
+
+    }
+
+    @Test
+    public void testOutOutOfBandHeaderCXFClientNoRelay() throws Exception {
+
+        HeaderService s = new HeaderService(
+                getClass().getClassLoader().getResource("soap_header.wsdl"),
+                HeaderService.SERVICE);
+        HeaderTester proxy = s.getSoapPortNoRelay();
+        ((BindingProvider) proxy).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerNoRelayEndpoint");
+        Me me = new Me();
+        me.setFirstName("john");
+        me.setLastName("Doh");
+        Thread.sleep(5000);
+        Me response = proxy.outOutOfBandHeader(me);
+        assertEquals("pass", response.getFirstName(), "Expected the out out of band header *not* to propagate but it did");
+        validateReturnedOutOfBandHeader(proxy, false);
+    }
+
+    @Test
+    public void testInoutOutOfBandHeaderCXFClientNoRelay() throws Exception {
+        HeaderService s = new HeaderService(
+                getClass().getClassLoader().getResource("soap_header.wsdl"),
+                HeaderService.SERVICE);
+        HeaderTester proxy = s.getSoapPortNoRelay();
+        ((BindingProvider) proxy).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerNoRelayEndpoint");
+        addOutOfBoundHeader(proxy, false);
+        Me me = new Me();
+        me.setFirstName("john");
+        me.setLastName("Doh");
+        Me response = proxy.inoutOutOfBandHeader(me);
+        assertEquals("pass", response.getFirstName(), "Expected the in out of band header to *not* propagate but it did");
+        validateReturnedOutOfBandHeader(proxy, false);
+    }
+
+    @Test
+    public void testInHeaderCXFClientNoRelay() throws Exception {
+        HeaderService s = new HeaderService(
+                getClass().getClassLoader().getResource("soap_header.wsdl"),
+                HeaderService.SERVICE);
+        HeaderTester proxy = s.getSoapPortNoRelay();
+        ((BindingProvider) proxy).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerNoRelayEndpoint");
+        InHeader me = new InHeader();
+        me.setRequestType("CXF user");
+        InHeaderResponse response = null;
+        try {
+            response = proxy.inHeader(me, Constants.IN_HEADER_DATA);
+        } catch (Exception e) {
+            // do nothing
+        }
+        assertEquals("pass", response.getResponseType(), "Expected in in band header *not* to propagate but it did");
+    }
+
+    @Test
+    public void testOutHeaderCXFClientNoRelay() throws Exception {
+        Thread.sleep(5000);
+
+        HeaderService s = new HeaderService(
+                getClass().getClassLoader().getResource("soap_header.wsdl"),
+                HeaderService.SERVICE);
+        HeaderTester proxy = s.getSoapPortNoRelay();
+        ((BindingProvider) proxy).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerNoRelayEndpoint");
+        OutHeader me = new OutHeader();
+        me.setRequestType("CXF user");
+        Holder<OutHeaderResponse> result = new Holder<>(new OutHeaderResponse());
+        Holder<SOAPHeaderData> header = new Holder<>(new SOAPHeaderData());
+        try {
+            proxy.outHeader(me, result, header);
+        } catch (Exception e) {
+            // do nothing
+        }
+        assertEquals("pass", result.value.getResponseType(),
+                "Ultimate remote HeaderTester.outHeader() destination was not reached");
+        assertNull(header.value, "Expected in band response header *not* to propagate but it did");
+    }
+
+    @Test
+    public void testInoutHeaderCXFClientNoRelay() throws Exception {
+        HeaderService s = new HeaderService(
+                getClass().getClassLoader().getResource("soap_header.wsdl"),
+                HeaderService.SERVICE);
+        HeaderTester proxy = s.getSoapPortNoRelay();
+        ((BindingProvider) proxy).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerNoRelayEndpoint");
+        InoutHeader me = new InoutHeader();
+        me.setRequestType("CXF user");
+        Holder<SOAPHeaderData> header = new Holder<>(Constants.IN_OUT_REQUEST_HEADER_DATA);
+        InoutHeaderResponse result = null;
+        try {
+            result = proxy.inoutHeader(me, header);
+        } catch (Exception e) {
+            // do nothing
+        }
+        assertEquals("pass", result.getResponseType(), "Expected in band out header *not* to propagate but it did");
+        assertNull(header.value, "Expected in band response header *not* to propagate but did");
+    }
+
+    @Test
+
+    public void testInoutHeaderCXFClientNoServiceClassNoRelay() throws Exception {
+        // TODO: Fix this test later
+        QName qname = QName.valueOf("{http://apache.org/camel/component/cxf/soap/headers}SOAPHeaderInfo");
+        String uri = "cxf:bean:routerNoRelayNoServiceClassEndpoint?headerFilterStrategy=#dropAllMessageHeadersStrategy"
+            + "&address=http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerNoRelayNoServiceClassEndpoint";
+        String requestHeader = "<ns2:SOAPHeaderInfo xmlns:ns2=\"http://apache.org/camel/"
+                               + "component/cxf/soap/headers\"><originator>CxfSoapHeaderRoutePropagationTest.testInOutHeader Requestor"
+                               + "</originator><message>Invoking CxfSoapHeaderRoutePropagationTest.testInOutHeader() Request"
+                               + "</message></ns2:SOAPHeaderInfo>";
+        String requestBody = "<ns2:inoutHeader xmlns:ns2=\"http://apache.org/camel/component/cxf/soap/headers\">"
+                             + "<requestType>CXF user</requestType></ns2:inoutHeader>";
+        List<Source> elements = new ArrayList<>();
+        elements.add(new DOMSource(StaxUtils.read(new StringReader(requestBody)).getDocumentElement()));
+        final List<SoapHeader> headers = new ArrayList<>();
+        headers.add(new SoapHeader(
+                qname,
+                StaxUtils.read(new StringReader(requestHeader)).getDocumentElement()));
+        final CxfPayload<SoapHeader> cxfPayload = new CxfPayload<>(headers, elements, null);
+
+        Exchange exchange = template.request(uri, new Processor() {
+            public void process(Exchange exchange) throws Exception {
+                exchange.getIn().setBody(cxfPayload);
+                exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, "inoutHeader");
+                exchange.getIn().setHeader(Header.HEADER_LIST, headers);
+            }
+
+        });
+
+        CxfPayload<?> out = exchange.getMessage().getBody(CxfPayload.class);
+        assertEquals(1, out.getBodySources().size());
+
+        assertTrue(out.getBodySources().get(0) instanceof DOMSource);
+
+        assertEquals(0, out.getHeaders().size());
+
+        String responseExp = "<ns2:inoutHeaderResponse xmlns:ns2=\"http://apache.org/camel/"
+                             + "component/cxf/soap/headers\"><responseType>pass</responseType>"
+                             + "</ns2:inoutHeaderResponse>";
+        String response = StaxUtils.toString(out.getBody().get(0));
+        //REVISIT use a more reliable comparison to tolerate some namespaces being added to the root element
+        assertTrue(response.startsWith(responseExp.substring(0, 87))
+                && response.endsWith(responseExp.substring(88, responseExp.length())), response);
+    }
+
+    @Test
+    public void testMessageHeadersRelaysSpringContext() throws Exception {
+        CxfEndpoint endpoint = context.getEndpoint(
+                "cxf:bean:serviceExtraRelays?headerFilterStrategy=#customMessageFilterStrategy", CxfEndpoint.class);
+        CxfHeaderFilterStrategy strategy = (CxfHeaderFilterStrategy) endpoint.getHeaderFilterStrategy();
+        List<MessageHeaderFilter> filters = strategy.getMessageHeaderFilters();
+        assertEquals(2, filters.size(), "Expected number of filters");
+        Map<String, MessageHeaderFilter> messageHeaderFilterMap = strategy.getMessageHeaderFiltersMap();
+        for (String ns : new CustomHeaderFilter().getActivationNamespaces()) {
+            assertEquals(CustomHeaderFilter.class, messageHeaderFilterMap.get(ns).getClass(),
+                    "Expected a filter class for namespace: " + ns);
+        }
+    }
+
+    @Test
+    public void testInOutOfBandHeaderCamelTemplateDirect() throws Exception {
+        doTestInOutOfBandHeaderCamelTemplate("direct:directProducer");
+    }
+
+    @Test
+    public void testOutOutOfBandHeaderCamelTemplateDirect() throws Exception {
+        doTestOutOutOfBandHeaderCamelTemplate("direct:directProducer");
+    }
+
+    @Test
+    public void testInOutOutOfBandHeaderCamelTemplateDirect() throws Exception {
+        doTestInOutOutOfBandHeaderCamelTemplate("direct:directProducer");
+    }
+
+    @Test
+    public void testInOutOfBandHeaderCamelTemplateRelay() throws Exception {
+        doTestInOutOfBandHeaderCamelTemplate("direct:relayProducer");
+    }
+
+    @Test
+    public void testOutOutOfBandHeaderCamelTemplateRelay() throws Exception {
+        doTestOutOutOfBandHeaderCamelTemplate("direct:relayProducer");
+    }
+
+    @Test
+    public void testInOutOutOfBandHeaderCamelTemplateRelay() throws Exception {
+        doTestInOutOutOfBandHeaderCamelTemplate("direct:relayProducer");
+    }
+
+    protected void doTestInOutOfBandHeaderCamelTemplate(String producerUri) throws Exception {
+        // START SNIPPET: sending
+        Exchange senderExchange = new DefaultExchange(context, ExchangePattern.InOut);
+        final List<Object> params = new ArrayList<>();
+        Me me = new Me();
+        me.setFirstName("john");
+        me.setLastName("Doh");
+
+        params.add(me);
+        senderExchange.getIn().setBody(params);
+        senderExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, "inOutOfBandHeader");
+
+        List<Header> headers = buildOutOfBandHeaderList(false);
+        Map<String, Object> requestContext = new HashMap<>();
+        requestContext.put(Header.HEADER_LIST, headers);
+        senderExchange.getIn().setHeader(Client.REQUEST_CONTEXT, requestContext);
+
+        Exchange exchange = template.send(producerUri, senderExchange);
+
+        org.apache.camel.Message out = exchange.getMessage();
+        MessageContentsList result = (MessageContentsList) out.getBody();
+        Map<String, Object> responseContext = CastUtils.cast((Map<?, ?>) out.getHeader(Client.RESPONSE_CONTEXT));
+        assertNotNull(responseContext);
+        assertTrue(result.get(0) != null && ((Me) result.get(0)).getFirstName().equals("pass"),
+                "Expected the out of band header to propagate but it didn't");
+
+    }
+
+    protected void doTestOutOutOfBandHeaderCamelTemplate(String producerUri) throws Exception {
+        // START SNIPPET: sending
+        Exchange senderExchange = new DefaultExchange(context, ExchangePattern.InOut);
+        final List<Object> params = new ArrayList<>();
+        Me me = new Me();
+        me.setFirstName("john");
+        me.setLastName("Doh");
+
+        params.add(me);
+        senderExchange.getIn().setBody(params);
+        senderExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, "outOutOfBandHeader");
+
+        Exchange exchange = template.send(producerUri, senderExchange);
+
+        org.apache.camel.Message out = exchange.getMessage();
+        MessageContentsList result = (MessageContentsList) out.getBody();
+        assertTrue(result.get(0) != null && ((Me) result.get(0)).getFirstName().equals("pass"),
+                "Expected the out of band header to propagate but it didn't");
+        Map<String, Object> responseContext = CastUtils.cast((Map<?, ?>) out.getHeader(Client.RESPONSE_CONTEXT));
+        assertNotNull(responseContext);
+        validateReturnedOutOfBandHeader(responseContext);
+    }
+
+    public void doTestInOutOutOfBandHeaderCamelTemplate(String producerUri) throws Exception {
+        // START SNIPPET: sending
+        Exchange senderExchange = new DefaultExchange(context, ExchangePattern.InOut);
+        final List<Object> params = new ArrayList<>();
+        Me me = new Me();
+        me.setFirstName("john");
+        me.setLastName("Doh");
+
+        params.add(me);
+        senderExchange.getIn().setBody(params);
+        senderExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, "inoutOutOfBandHeader");
+
+        List<Header> inHeaders = buildOutOfBandHeaderList(false);
+        Map<String, Object> requestContext = new HashMap<>();
+        requestContext.put(Header.HEADER_LIST, inHeaders);
+        senderExchange.getIn().setHeader(Client.REQUEST_CONTEXT, requestContext);
+
+        Exchange exchange = template.send(producerUri, senderExchange);
+
+        org.apache.camel.Message out = exchange.getMessage();
+        MessageContentsList result = (MessageContentsList) out.getBody();
+        assertTrue(result.get(0) != null && ((Me) result.get(0)).getFirstName().equals("pass"),
+                "Expected the out of band header to propagate but it didn't");
+        Map<String, Object> responseContext = CastUtils.cast((Map<?, ?>) out.getHeader(Client.RESPONSE_CONTEXT));
+        assertNotNull(responseContext);
+        validateReturnedOutOfBandHeader(responseContext);
+    }
+
+    protected static void validateReturnedOutOfBandHeader(HeaderTester proxy) {
+        validateReturnedOutOfBandHeader(proxy, true);
+    }
+
+    protected static void validateReturnedOutOfBandHeader(HeaderTester proxy, boolean expect) {
+        InvocationHandler handler = Proxy.getInvocationHandler(proxy);
+        BindingProvider bp = null;
+        if (!(handler instanceof BindingProvider)) {
+            fail("Unable to cast dynamic proxy InocationHandler to BindingProvider type");
+        }
+
+        bp = (BindingProvider) handler;
+        Map<String, Object> responseContext = bp.getResponseContext();
+        validateReturnedOutOfBandHeader(responseContext, expect);
+    }
+
+    protected static void validateReturnedOutOfBandHeader(Map<String, Object> responseContext) {
+        validateReturnedOutOfBandHeader(responseContext, true);
+    }
+
+    protected static void validateReturnedOutOfBandHeader(Map<String, Object> responseContext, boolean expect) {
+        OutofBandHeader hdrToTest = null;
+        List<Header> oobHdr = CastUtils.cast((List<?>) responseContext.get(Header.HEADER_LIST));
+        if (!expect) {
+            if (oobHdr == null || oobHdr != null && oobHdr.size() == 0) {
+                return;
+            }
+            fail("Should have got *no* out-of-band headers, but some were found");
+        }
+        if (oobHdr == null) {
+            fail("Should have got List of out-of-band headers");
+        }
+
+        assertEquals(1, oobHdr.size(), "HeaderHolder list expected to conain 1 object received " + oobHdr.size());
+
+        for (Header hdr1 : oobHdr) {
+            if (hdr1.getObject() instanceof Node) {
+                try {
+                    JAXBElement<?> job = (JAXBElement<?>) JAXBContext
+                            .newInstance(org.apache.cxf.outofband.header.ObjectFactory.class)
+                            .createUnmarshaller().unmarshal((Node) hdr1.getObject());
+                    hdrToTest = (OutofBandHeader) job.getValue();
+                } catch (JAXBException ex) {
+                    LOG.warn("JAXB error: {}", ex.getMessage(), ex);
+                }
+            }
+        }
+
+        assertNotNull(hdrToTest, "out-of-band header should not be null");
+        assertEquals("testOobReturnHeaderName", hdrToTest.getName(),
+                "Expected out-of-band Header name testOobReturnHeaderName recevied :"
+                                                                     + hdrToTest.getName());
+        assertEquals("testOobReturnHeaderValue", hdrToTest.getValue(),
+                "Expected out-of-band Header value testOobReturnHeaderValue recevied :"
+                                                                       + hdrToTest.getValue());
+        assertEquals("testReturnHdrAttribute", hdrToTest.getHdrAttribute(),
+                "Expected out-of-band Header attribute testReturnHdrAttribute recevied :" + hdrToTest.getHdrAttribute());
+    }
+
+    protected static List<Header> buildOutOfBandHeaderList(boolean invalid) throws JAXBException {
+        OutofBandHeader ob = new OutofBandHeader();
+        ob.setName("testOobHeader");
+        ob.setValue("testOobHeaderValue");
+        ob.setHdrAttribute(invalid ? "dontProcess" : "testHdrAttribute");
+
+        SoapHeader hdr = new SoapHeader(
+                new QName(Constants.TEST_HDR_NS, Constants.TEST_HDR_REQUEST_ELEM),
+                ob,
+                new JAXBDataBinding(ob.getClass()));
+
+        hdr.setMustUnderstand(invalid);
+
+        List<Header> headers = new ArrayList<>();
+        headers.add(hdr);
+        return headers;
+    }
+
+    protected static void validateReturnedOutOfBandHeaderWithInsertion(Map<String, Object> responseContext, boolean expect) {
+        List<OutofBandHeader> hdrToTest = new ArrayList<>();
+        List<Header> oobHdr = CastUtils.cast((List<?>) responseContext.get(Header.HEADER_LIST));
+        if (!expect) {
+            if (oobHdr == null || oobHdr != null && oobHdr.size() == 0) {
+                return;
+            }
+            fail("Should have got *no* out-of-band headers, but some were found");
+        }
+        if (oobHdr == null) {
+            fail("Should have got List of out-of-band headers");
+        }
+
+        assertEquals(2, oobHdr.size(), "HeaderHolder list expected to conain 2 object received " + oobHdr.size());
+
+        for (Header hdr1 : oobHdr) {
+            if (hdr1.getObject() instanceof Node) {
+                try {
+                    JAXBElement<?> job = (JAXBElement<?>) JAXBContext
+                            .newInstance(org.apache.cxf.outofband.header.ObjectFactory.class)
+                            .createUnmarshaller().unmarshal((Node) hdr1.getObject());
+                    hdrToTest.add((OutofBandHeader) job.getValue());
+                } catch (JAXBException ex) {
+                    LOG.warn("JAXB error: {}", ex.getMessage(), ex);
+                }
+            }
+        }
+
+        assertTrue(hdrToTest.size() > 0, "out-of-band header should not be null");
+        assertEquals("testOobReturnHeaderName", hdrToTest.get(0).getName(),
+                "Expected out-of-band Header name testOobReturnHeaderName recevied :"
+                                                                            + hdrToTest.get(0).getName());
+        assertEquals("testOobReturnHeaderValue", hdrToTest.get(0).getValue(),
+                "Expected out-of-band Header value testOobReturnHeaderValue recevied :"
+                                                                              + hdrToTest.get(0).getValue());
+        assertEquals("testReturnHdrAttribute", hdrToTest.get(0).getHdrAttribute(),
+                "Expected out-of-band Header attribute testReturnHdrAttribute recevied :"
+                                                                                   + hdrToTest.get(0).getHdrAttribute());
+
+        assertEquals("New_testOobHeader", hdrToTest.get(1).getName(),
+                "Expected out-of-band Header name New_testOobHeader recevied :"
+                                                                      + hdrToTest.get(1).getName());
+        assertEquals("New_testOobHeaderValue", hdrToTest.get(1).getValue(),
+                "Expected out-of-band Header value New_testOobHeaderValue recevied :"
+                                                                            + hdrToTest.get(1).getValue());
+        assertEquals("testHdrAttribute", hdrToTest.get(1).getHdrAttribute(),
+                "Expected out-of-band Header attribute testHdrAttribute recevied :"
+                                                                             + hdrToTest.get(1).getHdrAttribute());
+    }
+
+    public static class InsertRequestOutHeaderProcessor implements Processor {
+
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            List<SoapHeader> soapHeaders = CastUtils.cast((List<?>) exchange.getIn().getHeader(Header.HEADER_LIST));
+
+            // Insert a new header
+            String xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?><outofbandHeader "
+                         + "xmlns=\"http://cxf.apache.org/outofband/Header\" hdrAttribute=\"testHdrAttribute\" "
+                         + "xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">"
+                         + "<name>New_testOobHeader</name><value>New_testOobHeaderValue</value></outofbandHeader>";
+
+            SoapHeader newHeader = new SoapHeader(
+                    soapHeaders.get(0).getName(),
+                    StaxUtils.read(new StringReader(xml)).getDocumentElement());
+            // make sure direction is IN since it is a request message.
+            newHeader.setDirection(Direction.DIRECTION_IN);
+            //newHeader.setMustUnderstand(false);
+            soapHeaders.add(newHeader);
+
+        }
+
+    }
+
+    // START SNIPPET: InsertResponseOutHeaderProcessor
+
+    public static class InsertResponseOutHeaderProcessor implements Processor {
+
+        @Override
+        public void process(Exchange exchange) throws Exception {
+            // You should be able to get the header if exchange is routed from camel-cxf endpoint
+            List<SoapHeader> soapHeaders = CastUtils.cast((List<?>) exchange.getIn().getHeader(Header.HEADER_LIST));
+            if (soapHeaders == null) {
+                // we just create a new soap headers in case the header is null
+                soapHeaders = new ArrayList<>();
+            }
+
+            // Insert a new header
+            String xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?><outofbandHeader "
+                         + "xmlns=\"http://cxf.apache.org/outofband/Header\" hdrAttribute=\"testHdrAttribute\" "
+                         + "xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">"
+                         + "<name>New_testOobHeader</name><value>New_testOobHeaderValue</value></outofbandHeader>";
+            SoapHeader newHeader = new SoapHeader(
+                    soapHeaders.get(0).getName(),
+                    StaxUtils.read(new StringReader(xml)).getDocumentElement());
+            // make sure direction is OUT since it is a response message.
+            newHeader.setDirection(Direction.DIRECTION_OUT);
+            //newHeader.setMustUnderstand(false);
+            soapHeaders.add(newHeader);
+
+        }
+
+    }
+
+    // END SNIPPET: InsertResponseOutHeaderProcessor
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() throws InterruptedException {
+            ServletWebServerFactory webServerFactory = new UndertowServletWebServerFactory(port);
+            return webServerFactory;
+        }
+
+        
+        @Bean
+        CxfEndpoint routerRelayEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.soap.headers.HeaderTester.class);
+            cxfEndpoint.setAddress("/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpoint");
+            cxfEndpoint.setWsdlURL("soap_header.wsdl");
+            cxfEndpoint.setEndpointNameAsQName(
+                QName.valueOf("{http://apache.org/camel/component/cxf/soap/headers}SoapPortRelay"));
+            cxfEndpoint.setServiceNameAsQName(SERVICENAME);
+            return cxfEndpoint;
+        }
+
+        @Bean
+        CxfEndpoint serviceRelayEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.soap.headers.HeaderTester.class);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpointBackend");
+            cxfEndpoint.setWsdlURL("soap_header.wsdl");
+            cxfEndpoint.setEndpointNameAsQName(
+                QName.valueOf("{http://apache.org/camel/component/cxf/soap/headers}SoapPortRelay"));
+            cxfEndpoint.setServiceNameAsQName(SERVICENAME);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint routerRelayEndpointWithInsertion() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.soap.headers.HeaderTester.class);
+            cxfEndpoint.setAddress("/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpointWithInsertion");
+            cxfEndpoint.setWsdlURL("soap_header.wsdl");
+            cxfEndpoint.setEndpointNameAsQName(
+                QName.valueOf("{http://apache.org/camel/component/cxf/soap/headers}SoapPortRelayWithInsertion"));
+            cxfEndpoint.setServiceNameAsQName(SERVICENAME);
+            cxfEndpoint.getFeatures().add(new LoggingFeature());
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceRelayEndpointWithInsertion() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.soap.headers.HeaderTester.class);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpointWithInsertionBackend");
+            cxfEndpoint.setWsdlURL("soap_header.wsdl");
+            cxfEndpoint.setEndpointNameAsQName(
+                QName.valueOf("{http://apache.org/camel/component/cxf/soap/headers}SoapPortRelayWithInsertion"));
+            cxfEndpoint.setServiceNameAsQName(SERVICENAME);
+            cxfEndpoint.getFeatures().add(new LoggingFeature());
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint routerNoRelayEndpoint(HeaderFilterStrategy dropAllMessageHeadersStrategy) {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.soap.headers.HeaderTester.class);
+            cxfEndpoint.setAddress("/CxfMessageHeadersRelayTest/HeaderService/routerNoRelayEndpoint");
+            cxfEndpoint.setWsdlURL("soap_header.wsdl");
+            cxfEndpoint.setEndpointNameAsQName(
+                QName.valueOf("{http://apache.org/camel/component/cxf/soap/headers}SoapPortNoRelay"));
+            cxfEndpoint.setServiceNameAsQName(SERVICENAME);
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "PAYLOAD");
+            cxfEndpoint.setProperties(properties);
+            cxfEndpoint.setHeaderFilterStrategy(dropAllMessageHeadersStrategy);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceNoRelayEndpoint(HeaderFilterStrategy dropAllMessageHeadersStrategy) {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.soap.headers.HeaderTester.class);
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerNoRelayEndpointBackend");
+            cxfEndpoint.setWsdlURL("soap_header.wsdl");
+            cxfEndpoint.setEndpointNameAsQName(
+                QName.valueOf("{http://apache.org/camel/component/cxf/soap/headers}SoapPortNoRelay"));
+            cxfEndpoint.setServiceNameAsQName(SERVICENAME);
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "PAYLOAD");
+            cxfEndpoint.setProperties(properties);
+            cxfEndpoint.setHeaderFilterStrategy(dropAllMessageHeadersStrategy);
+            return cxfEndpoint;
+        }
+        
+        
+        @Bean
+        @Scope("prototype")
+        CxfEndpoint routerNoRelayNoServiceClassEndpoint(HeaderFilterStrategy dropAllMessageHeadersStrategy) {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("/CxfMessageHeadersRelayTest/HeaderService/routerNoRelayNoServiceClassEndpoint");
+            cxfEndpoint.setWsdlURL("soap_header.wsdl");
+            cxfEndpoint.setEndpointNameAsQName(
+                QName.valueOf("{http://apache.org/camel/component/cxf/soap/headers}SoapPortNoRelay"));
+            cxfEndpoint.setServiceNameAsQName(SERVICENAME);
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "PAYLOAD");
+            properties.put("allowStreaming", "false");
+            cxfEndpoint.setProperties(properties);
+            cxfEndpoint.setHeaderFilterStrategy(dropAllMessageHeadersStrategy);
+            return cxfEndpoint;
+        }
+
+        @Bean
+        CxfEndpoint serviceNoRelayNoServiceClassEndpoint(HeaderFilterStrategy dropAllMessageHeadersStrategy) {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("http://localhost:" + port + "/services/CxfMessageHeadersRelayTest/HeaderService/routerNoRelayEndpointBackend");
+            cxfEndpoint.setWsdlURL("soap_header.wsdl");
+            cxfEndpoint.setEndpointNameAsQName(
+                QName.valueOf("{http://apache.org/camel/component/cxf/soap/headers}SoapPortNoRelay"));
+            cxfEndpoint.setServiceNameAsQName(SERVICENAME);
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "PAYLOAD");
+            cxfEndpoint.setProperties(properties);
+            cxfEndpoint.setHeaderFilterStrategy(dropAllMessageHeadersStrategy);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        @Scope("prototype")
+        CxfEndpoint serviceExtraRelays(HeaderFilterStrategy customMessageFilterStrategy) {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("/CxfMessageHeadersRelayTest/HeaderService/serviceExtraRelays");
+            cxfEndpoint.setWsdlURL("soap_header.wsdl");
+            cxfEndpoint.setServiceClass(org.apache.camel.component.cxf.soap.headers.HeaderTester.class);
+            cxfEndpoint.setEndpointNameAsQName(
+                QName.valueOf("{http://apache.org/camel/component/cxf/soap/headers}SoapPortCustomRelay"));
+            cxfEndpoint.setServiceNameAsQName(SERVICENAME);
+            cxfEndpoint.setHeaderFilterStrategy(customMessageFilterStrategy);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        HeaderFilterStrategy dropAllMessageHeadersStrategy() {
+            CxfHeaderFilterStrategy headerFilterStrategy = new CxfHeaderFilterStrategy();
+            headerFilterStrategy.setRelayHeaders(false);
+            return headerFilterStrategy;
+        }
+        
+        @Bean
+        HeaderFilterStrategy customMessageFilterStrategy() {
+            CxfHeaderFilterStrategy headerFilterStrategy = new CxfHeaderFilterStrategy();
+            List<MessageHeaderFilter> headerFilterList = new ArrayList<MessageHeaderFilter>();
+            headerFilterList.add(new SoapMessageHeaderFilter());
+            headerFilterList.add(new CustomHeaderFilter());
+            headerFilterStrategy.setMessageHeaderFilters(headerFilterList);
+            return headerFilterStrategy;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    
+                    from("cxf:bean:routerRelayEndpoint")
+                        .to("cxf:bean:serviceRelayEndpoint");
+                    from("cxf:bean:routerRelayEndpointWithInsertion")
+                        .process(new InsertRequestOutHeaderProcessor())
+                        .to("cxf:bean:serviceRelayEndpointWithInsertion")
+                        .process(new InsertResponseOutHeaderProcessor());
+                    from("direct:directProducer")
+                        .to("cxf:bean:serviceRelayEndpoint");
+                    from("direct:relayProducer")
+                        .to("cxf://"
+                            + "http://localhost:" + port 
+                            + "/services/CxfMessageHeadersRelayTest/HeaderService/routerRelayEndpoint" +
+                            "?serviceClass=\"org.apache.camel.component.cxf.soap.headers.HeaderTester\"");
+                    from("cxf:bean:routerNoRelayEndpoint")
+                        .to("cxf:bean:serviceNoRelayEndpoint");
+                    from("cxf:bean:routerNoRelayNoServiceClassEndpoint")
+                        .to("cxf:bean:serviceNoRelayNoServiceClassEndpoint");
+                    from("cxf:bean:serviceExtraRelays")
+                        .to("mock:result");
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/springxml/CXFMultiPartTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/springxml/CXFMultiPartTest.java
new file mode 100644
index 00000000000..cce85f79049
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/springxml/CXFMultiPartTest.java
@@ -0,0 +1,122 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.springxml;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.Endpoint;
+import jakarta.xml.ws.Service;
+
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.multipart.MultiPartInvokeImpl;
+import org.apache.camel.cxf.multipart.MultiPartInvoke;
+import org.apache.camel.cxf.multipart.types.InE;
+import org.apache.camel.cxf.multipart.types.ObjectFactory;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ImportResource;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+/*
+ * This test uses xml beans and camel route definition
+ */
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CXFMultiPartTest.class,
+                           CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
+    properties = {
+              "camel.springboot.routes-include-pattern=file:src/test/resources/routes/multipartRoute.xml"}
+)
+    
+@ImportResource({
+                 "classpath:routes/MultiPartTest.xml"
+})
+public class CXFMultiPartTest {
+
+    public static final QName SERVICE_NAME = new QName("http://camel.apache.org/cxf/multipart",
+                                                       "MultiPartInvokeService");
+
+    public static final QName ROUTE_PORT_NAME = new QName("http://camel.apache.org/cxf/multipart",
+                                                          "MultiPartInvokePort");
+    protected static Endpoint endpoint;
+    
+    static int backendSerivcePort = CXFTestSupport.getPort1();
+    static int servletPort = CXFTestSupport.getPort2();
+
+    @Bean
+    public ServletWebServerFactory servletWebServerFactory() {
+        return new UndertowServletWebServerFactory(servletPort);
+    }
+    
+    public void startService() {
+        Object implementor = new MultiPartInvokeImpl();
+        String address = "http://localhost:" + backendSerivcePort
+                         + "/CXFMultiPartTest/SoapContext/SoapPort";
+        endpoint = Endpoint.publish(address, implementor);
+
+    }
+
+    
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+
+    @Test
+    public void testInvokingServiceFromCXFClient() throws Exception {
+        startService();
+        String reply = invokeMultiPartService("http://localhost:" + servletPort 
+                                              + "/services/CXFMultiPartTest/CamelContext/RouterPort", "in0", "in1");
+        assertNotNull(reply, "No response received from service");
+        assertEquals("in0 in1", reply);
+
+        assertNotNull(reply, "No response received from service");
+        assertEquals("in0 in1", reply);
+        stopService();
+    }
+
+    private String invokeMultiPartService(String address, String in0, String in1) {
+
+        Service service = Service.create(SERVICE_NAME);
+        service.addPort(ROUTE_PORT_NAME, "http://schemas.xmlsoap.org/soap/", address);
+        MultiPartInvoke multiPartClient = service.getPort(ROUTE_PORT_NAME, MultiPartInvoke.class);
+
+        InE e0 = new ObjectFactory().createInE();
+        InE e1 = new ObjectFactory().createInE();
+        e0.setV(in0);
+        e1.setV(in1);
+
+        jakarta.xml.ws.Holder<InE> h = new jakarta.xml.ws.Holder<>();
+        jakarta.xml.ws.Holder<InE> h1 = new jakarta.xml.ws.Holder<>();
+        multiPartClient.foo(e0, e1, h, h1);
+        return h.value.getV() + " " + h1.value.getV();
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/springxml/WSSUsernameTokenHandler.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/springxml/WSSUsernameTokenHandler.java
new file mode 100644
index 00000000000..5a5ca7b2db2
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/springxml/WSSUsernameTokenHandler.java
@@ -0,0 +1,85 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.springxml;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.soap.SOAPElement;
+import jakarta.xml.soap.SOAPEnvelope;
+import jakarta.xml.soap.SOAPHeader;
+import jakarta.xml.ws.handler.MessageContext;
+import jakarta.xml.ws.handler.soap.SOAPHandler;
+import jakarta.xml.ws.handler.soap.SOAPMessageContext;
+
+import java.util.Set;
+
+public class WSSUsernameTokenHandler implements SOAPHandler<SOAPMessageContext> {
+
+	private final String username;
+	private final String password;
+
+	public WSSUsernameTokenHandler(String userName, String password) {
+		this.username = userName;
+		this.password = password;
+	}
+
+	@Override
+	public boolean handleMessage(SOAPMessageContext context) {
+		final Boolean isRequest = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
+		if (isRequest.booleanValue()) {
+			try {
+				final SOAPEnvelope envelope = context.getMessage().getSOAPPart().getEnvelope();
+				SOAPHeader header = envelope.getHeader();
+				if (header == null) {
+					header = envelope.addHeader();
+				}
+
+				final SOAPElement securityElement = header.addChildElement("Security", "wsse",
+						"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");
+
+				final SOAPElement usernameTokenElement = securityElement.addChildElement("UsernameToken", "wsse");
+				usernameTokenElement.addAttribute(new QName("xmlns:wsu"),
+						"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd");
+
+				final SOAPElement usernameElement = usernameTokenElement.addChildElement("Username", "wsse");
+				usernameElement.addTextNode(username);
+
+				final SOAPElement passwordElement = usernameTokenElement.addChildElement("Password", "wsse");
+				passwordElement.setAttribute("Type",
+						"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0"
+								+ "#PasswordText");
+				passwordElement.addTextNode(password);
+			} catch (Exception e) {
+				e.printStackTrace();
+			}
+		}
+		return true;
+	}
+
+	@Override
+	public boolean handleFault(SOAPMessageContext context) {
+		return true;
+	}
+
+	@Override
+	public void close(MessageContext context) {
+	}
+
+	@Override
+	public Set<QName> getHeaders() {
+		return null;
+	}
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/springxml/WSSUsernameTokenTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/springxml/WSSUsernameTokenTest.java
new file mode 100644
index 00000000000..4c62bbe0141
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/springxml/WSSUsernameTokenTest.java
@@ -0,0 +1,133 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.springxml;
+
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.security.GreetingService;
+import org.apache.camel.component.cxf.security.jaas.SimpleLoginModule;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ImportResource;
+import org.springframework.test.annotation.DirtiesContext;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.Service;
+import jakarta.xml.ws.handler.Handler;
+import jakarta.xml.ws.handler.HandlerResolver;
+import jakarta.xml.ws.handler.PortInfo;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+		CamelAutoConfiguration.class,
+		WSSUsernameTokenTest.class,
+		SimpleLoginModule.class,
+		CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+@ImportResource({
+		"classpath:routes/soap-security.xml"
+})
+public class WSSUsernameTokenTest {
+	
+	private static final String BAD_PASSWORD = "123";
+
+	private static final URL WSDL_URL;
+	
+	static int port = CXFTestSupport.getPort1();
+
+	static {
+		try {
+			WSDL_URL = new URL("http://localhost:" + port 
+			                   + "/services/greeting-service?wsdl");
+		} catch (MalformedURLException e) {
+			throw new RuntimeException(e);
+		}
+	}
+
+	private static final QName SERVICE_NAME = new QName("http://security.cxf.component.camel.apache.org/",
+			"GreetingServiceImplService");
+	
+	@Bean
+	public ServletWebServerFactory servletWebServerFactory() {
+	    return new UndertowServletWebServerFactory(port);
+	}
+
+	private void addWSSUsernameTokenHandler(Service service, final String username, final String password) {
+		// set a handler resolver providing WSSUsernameTokenHandler in the handler chain
+		final HandlerResolver handlerResolver = new HandlerResolver() {
+			@Override
+			public List<Handler> getHandlerChain(PortInfo portInfo) {
+				final ArrayList<Handler> handlerChain = new ArrayList<>();
+				handlerChain.add(new WSSUsernameTokenHandler(username, password));
+				return handlerChain;
+			}
+		};
+		service.setHandlerResolver(handlerResolver);
+	}
+
+	@Test
+	public void testAuthenticationCorrectCredentials() throws Exception {
+		final Service service = Service.create(WSDL_URL, SERVICE_NAME);
+		addWSSUsernameTokenHandler(service, SimpleLoginModule.USERNAME, SimpleLoginModule.PASSWORD);
+		final GreetingService greetingService = service.getPort(GreetingService.class);
+
+		final String reply = greetingService.greet("you");
+		Assertions.assertEquals(reply, "Hello you");
+	}
+
+	@Test
+	public void testAuthenticationIncorrectCredentials() throws Exception {
+		final Service service = Service.create(WSDL_URL, SERVICE_NAME);
+		addWSSUsernameTokenHandler(service, SimpleLoginModule.USERNAME, BAD_PASSWORD);
+		final GreetingService greetingService = service.getPort(GreetingService.class);
+
+		try {
+			greetingService.greet("you");
+			Assertions.fail("Authentication should failed");
+		} catch (Exception e) {
+			Assertions.assertTrue(e.getMessage().contains("Authentication failed"));
+		}
+	}
+
+	@Test
+	public void testAuthenticationMissingCredentials() throws Exception {
+		final Service service = Service.create(WSDL_URL, SERVICE_NAME);
+		final GreetingService greetingService = service.getPort(GreetingService.class);
+
+		try {
+			greetingService.greet("you");
+			Assertions.fail("Authentication should failed");
+		} catch (Exception e) {
+			Assertions.assertTrue(e.getMessage().contains("security error"));
+		}
+	}
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/ssl/SslBuilderCustomizer.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/ssl/SslBuilderCustomizer.java
new file mode 100644
index 00000000000..c3e409eebff
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/ssl/SslBuilderCustomizer.java
@@ -0,0 +1,248 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.ssl;
+
+import java.io.InputStream;
+import java.net.InetAddress;
+import java.net.Socket;
+import java.net.URL;
+import java.security.KeyManagementException;
+import java.security.KeyStore;
+import java.security.NoSuchAlgorithmException;
+import java.security.Principal;
+import java.security.PrivateKey;
+import java.security.cert.X509Certificate;
+
+import javax.net.ssl.KeyManager;
+import javax.net.ssl.KeyManagerFactory;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLEngine;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.TrustManagerFactory;
+import javax.net.ssl.X509ExtendedKeyManager;
+
+import org.springframework.boot.web.embedded.undertow.UndertowBuilderCustomizer;
+import org.springframework.boot.web.server.Ssl;
+import org.springframework.boot.ssl.SslBundleKey;
+import org.springframework.boot.ssl.SslStoreBundle;
+import org.springframework.boot.web.server.WebServerException;
+import org.springframework.util.ResourceUtils;
+import org.xnio.Options;
+import org.xnio.Sequence;
+import org.xnio.SslClientAuthMode;
+
+import io.undertow.Undertow;
+
+public class SslBuilderCustomizer implements UndertowBuilderCustomizer {
+    private final int port;
+
+    private final InetAddress address;
+
+    private final Ssl ssl;
+
+    private final SslStoreBundle sslStoreProvider;
+
+    SslBuilderCustomizer(int port, InetAddress address, Ssl ssl, SslStoreBundle sslStoreProvider) {
+            this.port = port;
+            this.address = address;
+            this.ssl = ssl;
+            this.sslStoreProvider = sslStoreProvider;
+    }
+
+    public void customize(Undertow.Builder builder) {
+            try {
+                    SSLContext sslContext = SSLContext.getInstance(this.ssl.getProtocol());
+                    sslContext.init(getKeyManagers(this.ssl, this.sslStoreProvider),
+                                    getTrustManagers(this.ssl, this.sslStoreProvider), null);
+                    builder.addHttpsListener(this.port, getListenAddress(), sslContext);
+                    builder.setSocketOption(Options.SSL_CLIENT_AUTH_MODE, getSslClientAuthMode(this.ssl));
+                    if (this.ssl.getEnabledProtocols() != null) {
+                            builder.setSocketOption(Options.SSL_ENABLED_PROTOCOLS, Sequence.of(this.ssl.getEnabledProtocols()));
+                    }
+                    if (this.ssl.getCiphers() != null) {
+                            builder.setSocketOption(Options.SSL_ENABLED_CIPHER_SUITES, Sequence.of(this.ssl.getCiphers()));
+                    }
+            }
+            catch (NoSuchAlgorithmException | KeyManagementException ex) {
+                    throw new IllegalStateException(ex);
+            }
+    }
+
+    private String getListenAddress() {
+            if (this.address == null) {
+                    return "0.0.0.0";
+            }
+            return this.address.getHostAddress();
+    }
+
+    private SslClientAuthMode getSslClientAuthMode(Ssl ssl) {
+            if (ssl.getClientAuth() == Ssl.ClientAuth.NEED) {
+                    return SslClientAuthMode.REQUIRED;
+            }
+            if (ssl.getClientAuth() == Ssl.ClientAuth.WANT) {
+                    return SslClientAuthMode.REQUESTED;
+            }
+            return SslClientAuthMode.NOT_REQUESTED;
+    }
+
+    private KeyManager[] getKeyManagers(Ssl ssl, SslStoreBundle sslStoreProvider) {
+            try {
+                    KeyStore keyStore = getKeyStore(ssl, sslStoreProvider);
+                    SslBundleKey.of(sslStoreProvider.getKeyStorePassword(), ssl.getKeyAlias())
+                        .assertContainsAlias(keyStore);
+                    KeyManagerFactory keyManagerFactory = KeyManagerFactory
+                                    .getInstance(KeyManagerFactory.getDefaultAlgorithm());
+                    String keyPassword = (sslStoreProvider != null) ? sslStoreProvider.getKeyStorePassword() : null;
+                    if (keyPassword == null) {
+                            keyPassword = (ssl.getKeyPassword() != null) ? ssl.getKeyPassword() : ssl.getKeyStorePassword();
+                    }
+                    keyManagerFactory.init(keyStore, (keyPassword != null) ? keyPassword.toCharArray() : null);
+                    if (ssl.getKeyAlias() != null) {
+                            return getConfigurableAliasKeyManagers(ssl, keyManagerFactory.getKeyManagers());
+                    }
+                    return keyManagerFactory.getKeyManagers();
+            }
+            catch (Exception ex) {
+                    throw new IllegalStateException(ex);
+            }
+    }
+
+    private KeyManager[] getConfigurableAliasKeyManagers(Ssl ssl, KeyManager[] keyManagers) {
+            for (int i = 0; i < keyManagers.length; i++) {
+                    if (keyManagers[i] instanceof X509ExtendedKeyManager) {
+                            keyManagers[i] = new ConfigurableAliasKeyManager((X509ExtendedKeyManager) keyManagers[i],
+                                            ssl.getKeyAlias());
+                    }
+            }
+            return keyManagers;
+    }
+
+    private KeyStore getKeyStore(Ssl ssl, SslStoreBundle sslStoreProvider) throws Exception {
+            if (sslStoreProvider != null) {
+                    return sslStoreProvider.getKeyStore();
+            }
+            return loadKeyStore(ssl.getKeyStoreType(), ssl.getKeyStoreProvider(), ssl.getKeyStore(),
+                            ssl.getKeyStorePassword());
+    }
+
+    private TrustManager[] getTrustManagers(Ssl ssl, SslStoreBundle sslStoreProvider) {
+            try {
+                    KeyStore store = getTrustStore(ssl, sslStoreProvider);
+                    TrustManagerFactory trustManagerFactory = TrustManagerFactory
+                                    .getInstance(TrustManagerFactory.getDefaultAlgorithm());
+                    trustManagerFactory.init(store);
+                    return trustManagerFactory.getTrustManagers();
+            }
+            catch (Exception ex) {
+                    throw new IllegalStateException(ex);
+            }
+    }
+
+    private KeyStore getTrustStore(Ssl ssl, SslStoreBundle sslStoreProvider) throws Exception {
+            if (sslStoreProvider != null) {
+                    return sslStoreProvider.getTrustStore();
+            }
+            return loadTrustStore(ssl.getTrustStoreType(), ssl.getTrustStoreProvider(), ssl.getTrustStore(),
+                            ssl.getTrustStorePassword());
+    }
+
+    private KeyStore loadKeyStore(String type, String provider, String resource, String password) throws Exception {
+            return loadStore(type, provider, resource, password);
+    }
+
+    private KeyStore loadTrustStore(String type, String provider, String resource, String password) throws Exception {
+            if (resource == null) {
+                    return null;
+            }
+            return loadStore(type, provider, resource, password);
+    }
+
+    private KeyStore loadStore(String type, String provider, String resource, String password) throws Exception {
+            type = (type != null) ? type : "JKS";
+            KeyStore store = (provider != null) ? KeyStore.getInstance(type, provider) : KeyStore.getInstance(type);
+            try {
+                    URL url = ResourceUtils.getURL(resource);
+                    try (InputStream stream = url.openStream()) {
+                            store.load(stream, (password != null) ? password.toCharArray() : null);
+                    }
+                    return store;
+            }
+            catch (Exception ex) {
+                    throw new WebServerException("Could not load key store '" + resource + "'", ex);
+            }
+    }
+
+    /**
+     * {@link X509ExtendedKeyManager} that supports custom alias configuration.
+     */
+    private static class ConfigurableAliasKeyManager extends X509ExtendedKeyManager {
+
+            private final X509ExtendedKeyManager keyManager;
+
+            private final String alias;
+
+            ConfigurableAliasKeyManager(X509ExtendedKeyManager keyManager, String alias) {
+                    this.keyManager = keyManager;
+                    this.alias = alias;
+            }
+
+            @Override
+            public String chooseEngineClientAlias(String[] strings, Principal[] principals, SSLEngine sslEngine) {
+                    return this.keyManager.chooseEngineClientAlias(strings, principals, sslEngine);
+            }
+
+            @Override
+            public String chooseEngineServerAlias(String s, Principal[] principals, SSLEngine sslEngine) {
+                    if (this.alias == null) {
+                            return this.keyManager.chooseEngineServerAlias(s, principals, sslEngine);
+                    }
+                    return this.alias;
+            }
+
+            @Override
+            public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {
+                    return this.keyManager.chooseClientAlias(keyType, issuers, socket);
+            }
+
+            @Override
+            public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {
+                    return this.keyManager.chooseServerAlias(keyType, issuers, socket);
+            }
+
+            @Override
+            public X509Certificate[] getCertificateChain(String alias) {
+                    return this.keyManager.getCertificateChain(alias);
+            }
+
+            @Override
+            public String[] getClientAliases(String keyType, Principal[] issuers) {
+                    return this.keyManager.getClientAliases(keyType, issuers);
+            }
+
+            @Override
+            public PrivateKey getPrivateKey(String alias) {
+                    return this.keyManager.getPrivateKey(alias);
+            }
+
+            @Override
+            public String[] getServerAliases(String keyType, Principal[] issuers) {
+                    return this.keyManager.getServerAliases(keyType, issuers);
+            }
+
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/ssl/SslGlobalTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/ssl/SslGlobalTest.java
new file mode 100644
index 00000000000..a728b3fa596
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/ssl/SslGlobalTest.java
@@ -0,0 +1,254 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.ssl;
+
+
+
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.List;
+
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.SSLContextParametersAware;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.GreeterImpl;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.soap.springboot.CxfTimeoutTest.OrigCxfConfigurer;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.spring.boot.CamelContextConfiguration;
+import org.apache.camel.support.jsse.KeyStoreParameters;
+import org.apache.camel.support.jsse.SSLContextParameters;
+import org.apache.camel.support.jsse.TrustManagersParameters;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.ssl.SslBundle;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.server.Ssl;
+import org.springframework.boot.web.server.Ssl.ClientAuth;
+import org.springframework.boot.web.server.WebServerSslBundle;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.spring.boot.autoconfigure.jaxws.CxfJaxwsAutoConfiguration;
+import org.apache.cxf.transport.https.httpclient.DefaultHostnameVerifier;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        SslGlobalTest.class,
+        SslGlobalTest.TestConfiguration.class,
+        CxfAutoConfiguration.class,
+        CxfJaxwsAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class SslGlobalTest {
+    protected static final String GREET_ME_OPERATION = "greetMe";
+    protected static final String TEST_MESSAGE = "Hello World!";
+    protected static final String JAXWS_SERVER_ADDRESS
+            = "/CxfSslTest/SoapContext/SoapPort";
+    
+    static int port = CXFTestSupport.getPort1();
+    
+    @Test
+    public void testInvokingTrustRoute() throws Exception {
+        Exchange reply = sendJaxWsMessage("direct:trust");
+        if (reply.isFailed()) {
+            Exception exception = reply.getException();
+            String msg = exception.getMessage();
+            if (msg.contains("socket reset for TTL")) {
+                // ignore flaky test on JDK11
+                return;
+            }
+        }
+        assertFalse(reply.isFailed(), "We expect no exception here");
+    }
+
+    @Test
+    public void testInvokingWrongTrustRoute() throws Exception {
+        Exchange reply = sendJaxWsMessage("direct:wrongTrust");
+        assertTrue(reply.isFailed(), "We expect the exception here");
+        Throwable e = reply.getException().getCause();
+        assertEquals("javax.net.ssl.SSLHandshakeException", e.getClass().getCanonicalName());
+    }
+
+    @Autowired
+    ProducerTemplate template;
+    
+    protected Exchange sendJaxWsMessage(String endpointUri) throws InterruptedException {
+        Exchange exchange = template.send(endpointUri, new Processor() {
+            public void process(final Exchange exchange) {
+                final List<String> params = new ArrayList<>();
+                params.add(TEST_MESSAGE);
+                exchange.getIn().setBody(params);
+                exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION);
+            }
+        });
+        return exchange;
+    }
+   
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("cxf:bean:routerEndpoint").to("bean:greeter?method=greetMe");
+                    from("direct:trust").to("cxf:bean:serviceEndpoint");
+                    from("direct:wrongTrust").to("cxf:bean:serviceEndpointWrong");
+                }
+            };
+        }
+        
+        @Bean
+        GreeterImpl greeter() {
+            return new GreeterImpl();
+        }
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() throws UnknownHostException {
+            UndertowServletWebServerFactory undertowWebServerFactory 
+                = new UndertowServletWebServerFactory();
+            Ssl ssl = new Ssl();
+            ssl.setClientAuth(ClientAuth.NONE);
+            ssl.setKeyPassword("changeit");
+            ssl.setKeyStoreType("JKS");
+            ssl.setKeyStore("classpath:ssl/keystore-server.jks");
+            ssl.setKeyStorePassword("changeit");
+            SslBundle delegate = WebServerSslBundle.get(ssl);
+            SslBuilderCustomizer sslBuilderCustomizer = 
+                new SslBuilderCustomizer(port, InetAddress.getByName("localhost"),
+                                         ssl, delegate.getStores());
+            undertowWebServerFactory.addBuilderCustomizers(sslBuilderCustomizer);
+            return undertowWebServerFactory;
+        }
+        
+        @Bean
+        CamelContextConfiguration contextConfiguration() {
+            return new CamelContextConfiguration() {
+                @Override
+                public void beforeApplicationStart(CamelContext context) {
+                    SSLContextParameters parameters = context.getRegistry().lookupByNameAndType("mySslContext", SSLContextParameters.class);
+                    ((SSLContextParametersAware) context.getComponent("cxf")).setUseGlobalSslContextParameters(true);
+                    context.setSSLContextParameters(parameters);
+                }
+
+                @Override
+                public void afterApplicationStart(CamelContext camelContext) {
+                    
+
+                }
+            };
+        }
+
+        @Bean
+        DefaultHostnameVerifier defaultHostnameVerifier() {
+            return new DefaultHostnameVerifier();
+        }
+        
+        @Bean
+        SSLContextParameters mySslContext() {
+            SSLContextParameters sslContext = new SSLContextParameters();
+            TrustManagersParameters trustManager = new TrustManagersParameters();
+            KeyStoreParameters keyStore = new KeyStoreParameters();
+            keyStore.setType("JKS");
+            keyStore.setPassword("changeit");
+            keyStore.setResource("/ssl/truststore-client.jks");
+            trustManager.setKeyStore(keyStore);
+            sslContext.setTrustManagers(trustManager);
+            return sslContext;
+        }
+        
+        @Bean
+        SSLContextParameters wrongSslContext() {
+            SSLContextParameters sslContext = new SSLContextParameters();
+            TrustManagersParameters trustManager = new TrustManagersParameters();
+            KeyStoreParameters keyStore = new KeyStoreParameters();
+            keyStore.setType("JKS");
+            keyStore.setPassword("changeit");
+            keyStore.setResource("/ssl/truststore-wrong.jks");
+            trustManager.setKeyStore(keyStore);
+            sslContext.setTrustManagers(trustManager);
+            return sslContext;
+        }
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress(JAXWS_SERVER_ADDRESS);
+            cxfEndpoint.setCxfConfigurer(new OrigCxfConfigurer());
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint(DefaultHostnameVerifier defaultHostnameVerifier) {
+            
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("https://localhost:" + port 
+                                   + "/services" + JAXWS_SERVER_ADDRESS);
+            cxfEndpoint.setHostnameVerifier(defaultHostnameVerifier);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpointWrong(SSLContextParameters wrongSslContext, DefaultHostnameVerifier defaultHostnameVerifier) {
+            
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("https://localhost:" + port 
+                                   + "/services" + JAXWS_SERVER_ADDRESS);
+            cxfEndpoint.setHostnameVerifier(defaultHostnameVerifier);
+            cxfEndpoint.setSslContextParameters(wrongSslContext);
+            return cxfEndpoint;
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/ssl/SslTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/ssl/SslTest.java
new file mode 100644
index 00000000000..99705edd806
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/ssl/SslTest.java
@@ -0,0 +1,257 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.ssl;
+
+
+
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.List;
+
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.GreeterImpl;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.soap.springboot.CxfTimeoutTest.OrigCxfConfigurer;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.apache.camel.support.jsse.KeyStoreParameters;
+import org.apache.camel.support.jsse.SSLContextParameters;
+import org.apache.camel.support.jsse.TrustManagersParameters;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.ssl.SslBundle;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.server.Ssl;
+import org.springframework.boot.web.server.Ssl.ClientAuth;
+import org.springframework.boot.web.server.WebServerSslBundle;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.spring.boot.autoconfigure.jaxws.CxfJaxwsAutoConfiguration;
+import org.apache.cxf.transport.https.httpclient.DefaultHostnameVerifier;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        SslTest.class,
+        SslTest.TestConfiguration.class,
+        CxfAutoConfiguration.class,
+        CxfJaxwsAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class SslTest {
+    protected static final String GREET_ME_OPERATION = "greetMe";
+    protected static final String TEST_MESSAGE = "Hello World!";
+    protected static final String JAXWS_SERVER_ADDRESS
+            = "/CxfSslTest/SoapContext/SoapPort";
+    
+    static int port = CXFTestSupport.getPort1();
+    
+    @Test
+    public void testInvokingTrustRoute() throws Exception {
+        Exchange reply = sendJaxWsMessage("direct:trust");
+        if (reply.isFailed()) {
+            Exception exception = reply.getException();
+            String msg = exception.getMessage();
+            if (msg.contains("socket reset for TTL")) {
+                // ignore flaky test on JDK11
+                return;
+            }
+        }
+        assertFalse(reply.isFailed(), "We expect no exception here");
+    }
+
+    @Test
+    public void testInvokingNoTrustRoute() throws Exception {
+        Exchange reply = sendJaxWsMessage("direct:noTrust");
+        assertTrue(reply.isFailed(), "We expect the exception here");
+        Throwable e = reply.getException().getCause();
+        assertEquals("javax.net.ssl.SSLHandshakeException", e.getClass().getCanonicalName());
+    }
+
+    @Test
+    public void testInvokingWrongTrustRoute() throws Exception {
+        Exchange reply = sendJaxWsMessage("direct:wrongTrust");
+        assertTrue(reply.isFailed(), "We expect the exception here");
+        Throwable e = reply.getException().getCause();
+        assertEquals("javax.net.ssl.SSLHandshakeException", e.getClass().getCanonicalName());
+    }
+
+    @Autowired
+    ProducerTemplate template;
+    
+    protected Exchange sendJaxWsMessage(String endpointUri) throws InterruptedException {
+        Exchange exchange = template.send(endpointUri, new Processor() {
+            public void process(final Exchange exchange) {
+                final List<String> params = new ArrayList<>();
+                params.add(TEST_MESSAGE);
+                exchange.getIn().setBody(params);
+                exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION);
+            }
+        });
+        return exchange;
+    }
+
+   
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("cxf:bean:routerEndpoint").to("bean:greeter?method=greetMe");
+                    from("direct:trust").to("cxf:bean:serviceEndpoint");
+                    from("direct:wrongTrust").to("cxf:bean:serviceEndpointWrong");
+                    from("direct:noTrust").to("cxf:bean:serviceEndpointNoTrust");
+                }
+            };
+        }
+        
+        @Bean
+        GreeterImpl greeter() {
+            return new GreeterImpl();
+        }
+        
+        /*
+         * This is the way how to configure TLS/SSL with Bean 
+         */
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() throws UnknownHostException {
+            UndertowServletWebServerFactory undertowWebServerFactory 
+                = new UndertowServletWebServerFactory();
+            Ssl ssl = new Ssl();
+            ssl.setClientAuth(ClientAuth.NONE);
+            ssl.setKeyPassword("changeit");
+            ssl.setKeyStoreType("JKS");
+            ssl.setKeyStore("classpath:ssl/keystore-server.jks");
+            ssl.setKeyStorePassword("changeit");
+            SslBundle delegate = WebServerSslBundle.get(ssl);
+            SslBuilderCustomizer sslBuilderCustomizer = 
+                new SslBuilderCustomizer(port, InetAddress.getByName("localhost"),
+                                         ssl, delegate.getStores());
+            undertowWebServerFactory.addBuilderCustomizers(sslBuilderCustomizer);
+            return undertowWebServerFactory;
+        }
+        
+        @Bean
+        DefaultHostnameVerifier defaultHostnameVerifier() {
+            return new DefaultHostnameVerifier();
+        }
+        
+        @Bean
+        SSLContextParameters mySslContext() {
+            SSLContextParameters sslContext = new SSLContextParameters();
+            TrustManagersParameters trustManager = new TrustManagersParameters();
+            KeyStoreParameters keyStore = new KeyStoreParameters();
+            keyStore.setType("JKS");
+            keyStore.setPassword("changeit");
+            keyStore.setResource("/ssl/truststore-client.jks");
+            trustManager.setKeyStore(keyStore);
+            sslContext.setTrustManagers(trustManager);
+            return sslContext;
+        }
+        
+        @Bean
+        SSLContextParameters wrongSslContext() {
+            SSLContextParameters sslContext = new SSLContextParameters();
+            TrustManagersParameters trustManager = new TrustManagersParameters();
+            KeyStoreParameters keyStore = new KeyStoreParameters();
+            keyStore.setType("JKS");
+            keyStore.setPassword("changeit");
+            keyStore.setResource("/ssl/truststore-wrong.jks");
+            trustManager.setKeyStore(keyStore);
+            sslContext.setTrustManagers(trustManager);
+            return sslContext;
+        }
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress(JAXWS_SERVER_ADDRESS);
+            cxfEndpoint.setCxfConfigurer(new OrigCxfConfigurer());
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint(SSLContextParameters mySslContext, DefaultHostnameVerifier defaultHostnameVerifier) {
+            
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("https://localhost:" + port 
+                                   + "/services" + JAXWS_SERVER_ADDRESS);
+            cxfEndpoint.setHostnameVerifier(defaultHostnameVerifier);
+            cxfEndpoint.setSslContextParameters(mySslContext);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpointWrong(SSLContextParameters wrongSslContext, DefaultHostnameVerifier defaultHostnameVerifier) {
+            
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("https://localhost:" + port 
+                                   + "/services" + JAXWS_SERVER_ADDRESS);
+            cxfEndpoint.setHostnameVerifier(defaultHostnameVerifier);
+            cxfEndpoint.setSslContextParameters(wrongSslContext);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpointNoTrust(SSLContextParameters wrongSslContext, DefaultHostnameVerifier defaultHostnameVerifier) {
+            
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("https://localhost:" + port 
+                                   + "/services" + JAXWS_SERVER_ADDRESS);
+            return cxfEndpoint;
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/undertowhandler/AccessLogHandlerTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/undertowhandler/AccessLogHandlerTest.java
new file mode 100644
index 00000000000..524f32e6eda
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/undertowhandler/AccessLogHandlerTest.java
@@ -0,0 +1,188 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.undertowhandler;
+
+
+
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.non_wrapper.Person;
+import org.apache.camel.non_wrapper.types.GetPerson;
+import org.apache.camel.non_wrapper.types.GetPersonResponse;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.xnio.OptionMap;
+import org.xnio.Options;
+import org.xnio.Xnio;
+import org.xnio.XnioWorker;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import io.undertow.Undertow;
+import io.undertow.server.HandlerWrapper;
+import io.undertow.server.HttpHandler;
+import io.undertow.server.handlers.accesslog.AccessLogHandler;
+import io.undertow.server.handlers.accesslog.AccessLogReceiver;
+import io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver;
+import io.undertow.servlet.api.DeploymentInfo;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        AccessLogHandlerTest.class,
+        AccessLogHandlerTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+        
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class AccessLogHandlerTest {
+    
+    
+    static int port = CXFTestSupport.getPort1();
+    
+    @Test
+    public void testLog() throws Exception {
+
+        JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
+        factory.setAddress("http://localhost:" + port + "/services/"
+                           + getClass().getSimpleName() + "/CamelContext/RouterPort");
+        factory.setServiceClass(Person.class);
+        Person person = factory.create(Person.class);
+        GetPerson payload = new GetPerson();
+        payload.setPersonId("1234");
+
+        GetPersonResponse reply = person.getPerson(payload);
+        assertEquals("1234", reply.getPersonId(), "Get the wrong person id.");
+        Thread.sleep(3000);
+        File logFile = new File("target/request.log");
+        assertTrue(logFile.exists());
+    }
+    
+    
+    
+              
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            UndertowServletWebServerFactory factory = new UndertowServletWebServerFactory(port);
+
+            // Customize DeploymentInfo
+            factory.addDeploymentInfoCustomizers(new UndertowDeploymentInfoCustomizer() {
+                @Override
+                public void customize(DeploymentInfo deploymentInfo) {
+                    // Enable RequestLimitingHandler
+                    deploymentInfo.addOuterHandlerChainWrapper(new HandlerWrapper() {
+                        @Override
+                        public HttpHandler wrap(HttpHandler handler) {
+                            XnioWorker xnioWorker = createWorker(this.getClass().getClassLoader());
+                            AccessLogReceiver logReceiver = DefaultAccessLogReceiver.builder()
+                                .setLogWriteExecutor(xnioWorker)
+                                .setOutputDirectory(new File("target").toPath())
+                                .setLogBaseName("request.")
+                                .setLogNameSuffix("log").setRotate(true).build();
+                            AccessLogHandler accessLogHandler = new AccessLogHandler(handler, logReceiver, "combined",
+                                                                                     AccessLogHandlerTest.class.getClassLoader());
+                            return accessLogHandler;
+                        }
+
+                        private XnioWorker createWorker(ClassLoader loader) {
+                            try {
+                                if (loader == null) {
+                                    loader = Undertow.class.getClassLoader();
+                                }
+                                Xnio xnio = Xnio.getInstance(loader);
+                                return xnio.createWorker(OptionMap.builder().set(Options.THREAD_DAEMON, true).getMap());
+                            } catch (IOException ignore) {
+
+                                return null;
+                            }
+                        }
+                    });
+                }
+            });
+
+            return factory;
+        }
+        
+        @Bean
+        public CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("/AccessLogHandlerTest/CamelContext/RouterPort");
+            cxfEndpoint.setServiceClass(org.apache.camel.non_wrapper.Person.class);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+        
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint").streamCaching().process(new Processor() {
+
+                        @Override
+                        public void process(Exchange exchange) throws Exception {
+                            // just try to turn the payload to the parameter we want
+                            // to use
+                            Thread.sleep(1000);
+                            GetPerson request = exchange.getIn().getBody(GetPerson.class);
+                            GetPersonResponse reply = new GetPersonResponse();
+                            reply.setPersonId(request.getPersonId());
+                            exchange.getMessage().setBody(reply);
+                        }
+
+                    });
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/undertowhandler/DisallowedMethodsHandlerTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/undertowhandler/DisallowedMethodsHandlerTest.java
new file mode 100644
index 00000000000..c8ff4d1e811
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/undertowhandler/DisallowedMethodsHandlerTest.java
@@ -0,0 +1,169 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.undertowhandler;
+
+
+
+
+import java.net.URI;
+import java.net.http.HttpClient;
+import java.net.http.HttpRequest;
+import java.net.http.HttpResponse;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.non_wrapper.Person;
+import org.apache.camel.non_wrapper.types.GetPerson;
+import org.apache.camel.non_wrapper.types.GetPersonResponse;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import io.undertow.server.HandlerWrapper;
+import io.undertow.server.HttpHandler;
+import io.undertow.server.handlers.DisallowedMethodsHandler;
+import io.undertow.servlet.api.DeploymentInfo;
+import io.undertow.util.HttpString;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        DisallowedMethodsHandlerTest.class,
+        DisallowedMethodsHandlerTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+        
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class DisallowedMethodsHandlerTest {
+    
+    
+    static int port = CXFTestSupport.getPort1();
+    
+    @Test
+    public void testPostandGet() throws Exception {
+        //POST is allowed but GET isn't
+        JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
+        factory.setAddress("http://localhost:" + port + "/services/"
+                           + getClass().getSimpleName() + "/CamelContext/RouterPort");
+        factory.setServiceClass(Person.class);
+        Person person = factory.create(Person.class);
+        GetPerson payload = new GetPerson();
+        payload.setPersonId("1234");
+
+        GetPersonResponse reply = person.getPerson(payload);
+        assertEquals("1234", reply.getPersonId(), "Get the wrong person id.");
+        
+        HttpClient client = HttpClient.newHttpClient();
+        HttpRequest request = HttpRequest
+            .newBuilder().uri(URI.create("http://localhost:" + port + "/services/"
+                                         + getClass().getSimpleName() + "/CamelContext/RouterPort?wsdl"))
+            .GET().build();
+
+        HttpResponse<Void> response = client.send(request, HttpResponse.BodyHandlers.discarding());
+        assertEquals(405, response.statusCode());// as GET http method isn't allowed
+    }
+    
+    
+                  
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            UndertowServletWebServerFactory factory = new UndertowServletWebServerFactory(port);
+
+            // Customize DeploymentInfo
+            factory.addDeploymentInfoCustomizers(new UndertowDeploymentInfoCustomizer() {
+                @Override
+                public void customize(DeploymentInfo deploymentInfo) {
+                    // Enable RequestLimitingHandler
+                    deploymentInfo.addOuterHandlerChainWrapper(new HandlerWrapper() {
+                        @Override
+                        public HttpHandler wrap(HttpHandler handler) {
+                            
+                            return new DisallowedMethodsHandler(handler, 
+                                                                new HttpString("GET"));
+                        }
+                    });
+                }
+            });
+
+            return factory;
+        }
+        
+        @Bean
+        public CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("/DisallowedMethodsHandlerTest/CamelContext/RouterPort");
+            cxfEndpoint.setServiceClass(org.apache.camel.non_wrapper.Person.class);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+        
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint").streamCaching().process(new Processor() {
+
+                        @Override
+                        public void process(Exchange exchange) throws Exception {
+                            // just try to turn the payload to the parameter we want
+                            // to use
+                            Thread.sleep(1000);
+                            GetPerson request = exchange.getIn().getBody(GetPerson.class);
+                            GetPersonResponse reply = new GetPersonResponse();
+                            reply.setPersonId(request.getPersonId());
+                            exchange.getMessage().setBody(reply);
+                        }
+
+                    });
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/undertowhandler/RequestLimitingHandlerTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/undertowhandler/RequestLimitingHandlerTest.java
new file mode 100644
index 00000000000..e3d359cbf5f
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/undertowhandler/RequestLimitingHandlerTest.java
@@ -0,0 +1,191 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.undertowhandler;
+
+
+
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.non_wrapper.Person;
+import org.apache.camel.non_wrapper.types.GetPerson;
+import org.apache.camel.non_wrapper.types.GetPersonResponse;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import io.undertow.server.HandlerWrapper;
+import io.undertow.server.HttpHandler;
+import io.undertow.server.handlers.DisallowedMethodsHandler;
+import io.undertow.server.handlers.RequestLimitingHandler;
+import io.undertow.servlet.api.DeploymentInfo;
+import io.undertow.util.HttpString;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        RequestLimitingHandlerTest.class,
+        RequestLimitingHandlerTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+        
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class RequestLimitingHandlerTest {
+    
+    
+    static int port = CXFTestSupport.getPort1();
+    
+    @Test
+    public void testClient() throws Exception {
+
+        JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
+        factory.setAddress("http://localhost:" + port + "/services/"
+                           + getClass().getSimpleName() + "/CamelContext/RouterPort");
+        factory.setServiceClass(Person.class);
+        Person person = factory.create(Person.class);
+        CountDownLatch latch = new CountDownLatch(50); 
+
+        ExecutorService executor = Executors.newFixedThreadPool(200); 
+
+        for (int i = 0; i < 50; i++) {
+            executor.execute(new SendRequest(person, latch)); 
+        }
+        latch.await();
+    }
+    
+    class SendRequest implements Runnable {
+        Person person;
+        CountDownLatch latch;
+        SendRequest(Person person, CountDownLatch latch) {
+            this.person = person;
+            this.latch = latch;
+        }
+        @Override
+        public void run() {
+            try {
+                GetPerson payload = new GetPerson();
+                payload.setPersonId("1234");
+
+                GetPersonResponse reply = person.getPerson(payload);
+                assertEquals("1234", reply.getPersonId(), "Get the wrong person id.");
+
+            } catch (Exception ex) {
+                //some requests are expected to fail and receive 503 error
+                //cause Server side limit the concurrent request
+                assertTrue(ex.getCause().getMessage().contains("503: Service Unavailable"));
+            } finally {
+                latch.countDown();
+            }
+
+        }
+
+    }
+
+            
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            UndertowServletWebServerFactory factory = new UndertowServletWebServerFactory(port);
+
+            // Customize DeploymentInfo
+            factory.addDeploymentInfoCustomizers(new UndertowDeploymentInfoCustomizer() {
+                @Override
+                public void customize(DeploymentInfo deploymentInfo) {
+                    // Enable RequestLimitingHandler
+                    deploymentInfo.addOuterHandlerChainWrapper(new HandlerWrapper() {
+                        @Override
+                        public HttpHandler wrap(HttpHandler handler) {
+                            
+                            return new DisallowedMethodsHandler(new RequestLimitingHandler(3, 1, handler), 
+                                                                new HttpString("GET"));
+                        }
+                    });
+                }
+            });
+
+            return factory;
+        }
+        
+        @Bean
+        public CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setAddress("/RequestLimitingHandlerTest/CamelContext/RouterPort");
+            cxfEndpoint.setServiceClass(org.apache.camel.non_wrapper.Person.class);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+        
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint").streamCaching().process(new Processor() {
+
+                        @Override
+                        public void process(Exchange exchange) throws Exception {
+                            // just try to turn the payload to the parameter we want
+                            // to use
+                            Thread.sleep(1000);
+                            GetPerson request = exchange.getIn().getBody(GetPerson.class);
+                            GetPersonResponse reply = new GetPersonResponse();
+                            reply.setPersonId(request.getPersonId());
+                            exchange.getMessage().setBody(reply);
+                        }
+
+                    });
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsa/WSAddressingPAYLOADTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsa/WSAddressingPAYLOADTest.java
new file mode 100644
index 00000000000..7054875e0c0
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsa/WSAddressingPAYLOADTest.java
@@ -0,0 +1,192 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.wsa;
+
+
+
+
+import java.util.List;
+
+import javax.xml.namespace.QName;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.ext.logging.LoggingFeature;
+import org.apache.cxf.frontend.ClientFactoryBean;
+import org.apache.cxf.frontend.ClientProxy;
+import org.apache.cxf.headers.Header;
+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
+import org.apache.cxf.jaxws.JaxWsServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.testutil.common.TestUtil;
+import org.apache.cxf.transport.http.HTTPConduit;
+import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
+import org.apache.cxf.ws.addressing.WSAddressingFeature;
+import org.apache.hello_world_soap_http.Greeter;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        WSAddressingPAYLOADTest.class,
+        WSAddressingPAYLOADTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class WSAddressingPAYLOADTest {
+
+    private String namespace = "http://apache.org/hello_world_soap_http";
+    private QName serviceName = new QName(namespace, "SOAPService");
+    private QName endpointName = new QName(namespace, "SoapPort");
+    
+    @Autowired
+    protected ProducerTemplate template;
+
+    private Server serviceEndpoint;
+    
+    static int port = CXFTestSupport.getPort1();
+    
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        JaxWsServerFactoryBean svrBean = new JaxWsServerFactoryBean();
+        svrBean.setAddress("/WSAddressingPAYLOADTest/SoapContext/backendService");
+        svrBean.setServiceClass(Greeter.class);
+        svrBean.setServiceBean(new GreeterImpl());
+        svrBean.getFeatures().add(new LoggingFeature());
+        serviceEndpoint = svrBean.create();
+    }
+    
+    @AfterEach
+    public void tearDown() throws Exception {
+        if (serviceEndpoint != null) {
+            serviceEndpoint.stop();
+        }
+    }
+    
+    @Test
+    public void testWSAddressing() throws Exception {
+        JaxWsProxyFactoryBean proxyFactory = new JaxWsProxyFactoryBean();
+        ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean();
+        clientBean.setAddress("http://localhost:" + port + "/services/WSAddressingPAYLOADTest/SoapContext/SoapPort");
+        clientBean.setServiceClass(Greeter.class);
+        WSAddressingFeature addressingFeature = new WSAddressingFeature();
+        addressingFeature.setUsingAddressingAdvisory(true);
+        proxyFactory.getFeatures().add(addressingFeature);
+        proxyFactory.getFeatures().add(new LoggingFeature());
+        Greeter greeter = (Greeter) proxyFactory.create();
+        Client client = ClientProxy.getClient(greeter);
+        String decoupledEndpoint = "http://localhost:"
+            + TestUtil.getPortNumber("decoupled") + "/wsa/decoupled_endpoint";
+        HTTPConduit hc = (HTTPConduit)(client.getConduit());
+        HTTPClientPolicy cp = hc.getClient();
+        cp.setDecoupledEndpoint(decoupledEndpoint);
+        String result = greeter.greetMe("world!");
+        assertEquals("Hello world!", result, "Get a wrong response");
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setWsdlURL(WSAddressingPAYLOADTest.class.getResource("/wsdl/hello_world.wsdl").toString());
+            cxfEndpoint.setAddress("/WSAddressingPAYLOADTest/SoapContext/SoapPort");
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            cxfEndpoint.getFeatures().add(new org.apache.cxf.ws.addressing.WSAddressingFeature());
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setWsdlURL(WSAddressingPAYLOADTest.class.getResource("/wsdl/hello_world.wsdl").toString());
+            cxfEndpoint.setAddress("http://localhost:" + port 
+                                   + "/services/WSAddressingPAYLOADTest/SoapContext/backendService");
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint").process(new Processor() {
+                        public void process(final Exchange exchange) throws Exception {
+                            List<?> headerList = (List<?>) exchange.getIn().getHeader(Header.HEADER_LIST);
+                            assertNotNull(headerList, "We should get the header list.");
+                            assertEquals(4, headerList.size(), "Get a wrong size of header list.");
+                        }
+                    }).to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsa/WSAddressingTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsa/WSAddressingTest.java
new file mode 100644
index 00000000000..817a408b8b6
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsa/WSAddressingTest.java
@@ -0,0 +1,189 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.wsa;
+
+
+
+
+import java.util.List;
+
+import javax.xml.namespace.QName;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.ext.logging.LoggingFeature;
+import org.apache.cxf.frontend.ClientFactoryBean;
+import org.apache.cxf.frontend.ClientProxy;
+import org.apache.cxf.headers.Header;
+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
+import org.apache.cxf.jaxws.JaxWsServerFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.testutil.common.TestUtil;
+import org.apache.cxf.transport.http.HTTPConduit;
+import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
+import org.apache.cxf.ws.addressing.WSAddressingFeature;
+import org.apache.hello_world_soap_http.Greeter;
+import org.apache.hello_world_soap_http.GreeterImpl;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        WSAddressingTest.class,
+        WSAddressingTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class WSAddressingTest {
+
+    private String namespace = "http://apache.org/hello_world_soap_http";
+    private QName serviceName = new QName(namespace, "SOAPService");
+    private QName endpointName = new QName(namespace, "SoapPort");
+    
+    @Autowired
+    protected ProducerTemplate template;
+
+    private Server serviceEndpoint;
+    
+    static int port = CXFTestSupport.getPort1();
+    
+    
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        JaxWsServerFactoryBean svrBean = new JaxWsServerFactoryBean();
+        svrBean.setAddress("/WSAddressingTest/SoapContext/backendService");
+        svrBean.setServiceClass(Greeter.class);
+        svrBean.setServiceBean(new GreeterImpl());
+        svrBean.getFeatures().add(new LoggingFeature());
+        serviceEndpoint = svrBean.create();
+    }
+    
+    @AfterEach
+    public void tearDown() throws Exception {
+        if (serviceEndpoint != null) {
+            serviceEndpoint.stop();
+        }
+    }
+    
+    @Test
+    public void testWSAddressing() throws Exception {
+        JaxWsProxyFactoryBean proxyFactory = new JaxWsProxyFactoryBean();
+        ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean();
+        clientBean.setAddress("http://localhost:" + port + "/services/WSAddressingTest/SoapContext/SoapPort");
+        clientBean.setServiceClass(Greeter.class);
+        WSAddressingFeature addressingFeature = new WSAddressingFeature();
+        addressingFeature.setUsingAddressingAdvisory(true);
+        proxyFactory.getFeatures().add(addressingFeature);
+        proxyFactory.getFeatures().add(new LoggingFeature());
+        Greeter greeter = (Greeter) proxyFactory.create();
+        Client client = ClientProxy.getClient(greeter);
+        String decoupledEndpoint = "http://localhost:"
+            + TestUtil.getPortNumber("decoupled") + "/wsa/decoupled_endpoint";
+        HTTPConduit hc = (HTTPConduit)(client.getConduit());
+        HTTPClientPolicy cp = hc.getClient();
+        cp.setDecoupledEndpoint(decoupledEndpoint);
+        String result = greeter.greetMe("world!");
+        assertEquals("Hello world!", result, "Get a wrong response");
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setWsdlURL(WSAddressingTest.class.getResource("/wsdl/hello_world.wsdl").toString());
+            cxfEndpoint.setAddress("/WSAddressingTest/SoapContext/SoapPort");
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            cxfEndpoint.getFeatures().add(new org.apache.cxf.ws.addressing.WSAddressingFeature());
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setWsdlURL(WSAddressingTest.class.getResource("/wsdl/hello_world.wsdl").toString());
+            cxfEndpoint.setAddress("http://localhost:" + port 
+                                   + "/services/WSAddressingTest/SoapContext/backendService");
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint").process(new Processor() {
+                        public void process(final Exchange exchange) throws Exception {
+                            List<?> headerList = (List<?>) exchange.getIn().getHeader(Header.HEADER_LIST);
+                            assertNotNull(headerList, "We should get the header list.");
+                            assertEquals(4, headerList.size(), "Get a wrong size of header list.");
+                        }
+                    }).to("cxf:bean:serviceEndpoint");
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/AbstractCxfWsdlFirstTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/AbstractCxfWsdlFirstTest.java
new file mode 100644
index 00000000000..b0601f7698f
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/AbstractCxfWsdlFirstTest.java
@@ -0,0 +1,169 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.wsdl;
+
+
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.BindingProvider;
+import jakarta.xml.ws.Holder;
+import jakarta.xml.ws.WebServiceException;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.soap.springboot.JaxwsTestHandler;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.camel.wsdl_first.Person;
+import org.apache.camel.wsdl_first.PersonService;
+import org.apache.camel.wsdl_first.UnknownPersonFault;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           AbstractCxfWsdlFirstTest.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public abstract class AbstractCxfWsdlFirstTest {
+
+    protected static JaxwsTestHandler fromHandler = new JaxwsTestHandler();
+    protected static JaxwsTestHandler toHandler = new JaxwsTestHandler();
+        
+    static int port = CXFTestSupport.getPort1();
+    @Autowired
+    ProducerTemplate template;
+
+    
+    
+    @Test
+    public void testInvokingServiceFromCXFClient() throws Exception {
+
+        fromHandler.reset();
+        toHandler.reset();
+        URL wsdlURL = getClass().getClassLoader().getResource("person.wsdl");
+        PersonService ss = new PersonService(wsdlURL, new QName("http://camel.apache.org/wsdl-first", "PersonService"));
+        Person client = ss.getSoap();
+        ((BindingProvider) client).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port 
+                        + "/services/" + getClass().getSimpleName()
+                                                                + "/RouterService/");
+
+        Holder<String> personId = new Holder<>();
+        personId.value = "hello";
+        Holder<String> ssn = new Holder<>();
+        Holder<String> name = new Holder<>();
+        client.getPerson(personId, ssn, name);
+        assertEquals("Bonjour", name.value, "we should get the right answer from router");
+
+        personId.value = "";
+        try {
+            client.getPerson(personId, ssn, name);
+            fail("We expect to get the UnknowPersonFault here");
+        } catch (UnknownPersonFault fault) {
+            // We expect to get fault here
+        }
+
+        personId.value = "Invoking getPerson with invalid length string, expecting exception...xxxxxxxxx";
+        try {
+            client.getPerson(personId, ssn, name);
+            fail("We expect to get the WebSerivceException here");
+        } catch (WebServiceException ex) {
+            // Caught expected WebServiceException here
+            assertTrue(ex.getMessage().indexOf("MyStringType") > 0
+                    || ex.getMessage().indexOf("Could not parse the XML stream") != -1
+                    || ex.getMessage().indexOf("the required maximum is 30") > 0,
+                    "Should get the xml vaildate error! " + ex.getMessage());
+        }
+
+        verifyJaxwsHandlers(fromHandler, toHandler);
+    }
+
+    protected void verifyJaxwsHandlers(JaxwsTestHandler fromHandler, JaxwsTestHandler toHandler) {
+        assertEquals(2, fromHandler.getFaultCount());
+        assertEquals(4, fromHandler.getMessageCount());
+        // Changed to use noErrorhandler and now the message will not be sent again.
+        assertEquals(3, toHandler.getMessageCount());
+        assertEquals(1, toHandler.getFaultCount());
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void testInvokingServiceWithCamelProducer() throws Exception {
+        Exchange exchange = sendJaxWsMessageWithHolders("hello");
+        assertEquals(false, exchange.isFailed(), "The request should be handled sucessfully");
+        org.apache.camel.Message out = exchange.getMessage();
+        List<Object> result = out.getBody(List.class);
+        assertEquals(4, result.size(), "The result list should not be empty");
+        Holder<String> name = (Holder<String>) result.get(3);
+        assertEquals("Bonjour", name.value, "we should get the right answer from router");
+
+        exchange = sendJaxWsMessageWithHolders("");
+        assertEquals(true, exchange.isFailed(), "We should get a fault here");
+        Throwable ex = exchange.getException();
+        assertTrue(ex instanceof UnknownPersonFault, "We should get the UnknowPersonFault here");
+    }
+
+    protected Exchange sendJaxWsMessageWithHolders(final String personIdString) {
+        Exchange exchange = template.send("direct:producer", new Processor() {
+            public void process(final Exchange exchange) {
+                final List<Object> params = new ArrayList<>();
+                Holder<String> personId = new Holder<>();
+                personId.value = personIdString;
+                params.add(personId);
+                Holder<String> ssn = new Holder<>();
+                Holder<String> name = new Holder<>();
+                params.add(ssn);
+                params.add(name);
+                exchange.getIn().setBody(params);
+                exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, "GetPerson");
+            }
+        });
+        return exchange;
+    }
+
+    @Configuration
+    class ServletConfiguration {
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+
+    }
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CXFWsdlOnlyTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CXFWsdlOnlyTest.java
new file mode 100644
index 00000000000..c4b3f3c2142
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CXFWsdlOnlyTest.java
@@ -0,0 +1,234 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.wsdl;
+
+
+
+
+import java.net.URL;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.BindingProvider;
+import jakarta.xml.ws.Endpoint;
+import jakarta.xml.ws.Holder;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.camel.wsdl_first.Person;
+import org.apache.camel.wsdl_first.PersonImpl;
+import org.apache.camel.wsdl_first.PersonService;
+import org.apache.camel.wsdl_first.UnknownPersonFault;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        CXFWsdlOnlyTest.class,
+        CXFWsdlOnlyTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class CXFWsdlOnlyTest {
+    
+    private static final QName SERVICE_NAME = new QName("http://camel.apache.org/wsdl-first", "PersonService");
+    private static final QName PORT_NAME = new QName("http://camel.apache.org/wsdl-first", "soap");
+
+
+    private static Endpoint endpoint1;
+    private static Endpoint endpoint2;
+    
+    static int port = CXFTestSupport.getPort1();
+
+    @BeforeEach
+    public void setup() {
+        Object implementor = new PersonImpl();
+        String address = "/CXFWsdlOnlyTest/PersonService/endpoint1/backend";
+        endpoint1 = Endpoint.publish(address, implementor);
+
+        address = "/CXFWsdlOnlyTest/PersonService/endpoint2/backend";
+        endpoint2 = Endpoint.publish(address, implementor);
+    }
+    
+    @AfterEach
+    public void tearDown() {
+        if (endpoint1 != null) {
+            endpoint1.stop();
+        }
+
+        if (endpoint2 != null) {
+            endpoint2.stop();
+        }
+    }
+    
+    
+    @Test
+    public void testRoutesWithFault() throws Exception {
+        URL wsdlURL = getClass().getClassLoader().getResource("person.wsdl");
+        PersonService ss = new PersonService(
+                wsdlURL, new QName(
+                        "http://camel.apache.org/wsdl-first",
+                        "PersonService"));
+        Person client = ss.getSoap();
+
+        ((BindingProvider) client).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CXFWsdlOnlyTest/PersonService/endpoint1");
+        Holder<String> personId = new Holder<>();
+        personId.value = "hello";
+        Holder<String> ssn = new Holder<>();
+        Holder<String> name = new Holder<>();
+        client.getPerson(personId, ssn, name);
+        assertEquals("Bonjour", name.value);
+
+        personId.value = "";
+        ssn = new Holder<>();
+        name = new Holder<>();
+        Throwable t = null;
+        try {
+            client.getPerson(personId, ssn, name);
+            fail("Expect exception");
+        } catch (UnknownPersonFault e) {
+            t = e;
+        }
+        assertTrue(t instanceof UnknownPersonFault);
+
+        Person client2 = ss.getSoap2();
+        ((BindingProvider) client2).getRequestContext()
+                .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                        "http://localhost:" + port + "/services/CXFWsdlOnlyTest/PersonService/endpoint2");
+        Holder<String> personId2 = new Holder<>();
+        personId2.value = "hello";
+        Holder<String> ssn2 = new Holder<>();
+        Holder<String> name2 = new Holder<>();
+        client2.getPerson(personId2, ssn2, name2);
+        assertEquals("Bonjour", name2.value);
+
+        personId2.value = "";
+        ssn2 = new Holder<>();
+        name2 = new Holder<>();
+        try {
+            client2.getPerson(personId2, ssn2, name2);
+            fail("Expect exception");
+        } catch (UnknownPersonFault e) {
+            t = e;
+        }
+        assertTrue(t instanceof UnknownPersonFault);
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_NAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_NAME);
+            cxfEndpoint.setWsdlURL("person.wsdl");
+            cxfEndpoint.setAddress("/CXFWsdlOnlyTest/PersonService/endpoint1");
+            cxfEndpoint.setDataFormat(DataFormat.RAW);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_NAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_NAME);
+            cxfEndpoint.setWsdlURL("person.wsdl");
+            cxfEndpoint.setAddress("http://localhost:" + port 
+                                   + "/services/CXFWsdlOnlyTest/PersonService/endpoint1/backend");
+            cxfEndpoint.setDataFormat(DataFormat.RAW);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint routerEndpoint2() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_NAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_NAME);
+            cxfEndpoint.setWsdlURL("person.wsdl");
+            cxfEndpoint.setAddress("/CXFWsdlOnlyTest/PersonService/endpoint2");
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint2() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(SERVICE_NAME);
+            cxfEndpoint.setEndpointNameAsQName(PORT_NAME);
+            cxfEndpoint.setWsdlURL("person.wsdl");
+            cxfEndpoint.setAddress("http://localhost:" + port 
+                                   + "/services/CXFWsdlOnlyTest/PersonService/endpoint2/backend");
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+            
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:routerEndpoint")
+                    .to("cxf:bean:serviceEndpoint")
+                    .to("log:camelLogger");
+                    
+                    from("cxf:bean:routerEndpoint2")
+                    .to("cxf:bean:serviceEndpoint2")
+                    .to("log:camelLogger");
+                    
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfPayloadWsdlWithoutSEITest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfPayloadWsdlWithoutSEITest.java
new file mode 100644
index 00000000000..4b2055744c9
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfPayloadWsdlWithoutSEITest.java
@@ -0,0 +1,168 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.wsdl;
+
+import static org.apache.camel.test.junit5.TestSupport.assertStringContains;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.Endpoint;
+import jakarta.xml.ws.handler.Handler;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.camel.wsdl_first.PersonImpl;
+import org.apache.cxf.binding.soap.SoapFault;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfPayloadWsdlWithoutSEITest.class,
+                           CxfPayloadWsdlWithoutSEITest.TestConfiguration.class,
+                           AbstractCxfWsdlFirstTest.ServletConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfPayloadWsdlWithoutSEITest extends AbstractCxfWsdlFirstTest {
+
+    private QName serviceName = QName.valueOf("{http://camel.apache.org/wsdl-first}PersonService");
+    private QName endpointName = QName.valueOf("{http://camel.apache.org/wsdl-first}soap");
+    protected Endpoint endpoint;
+    
+    @BeforeEach
+    public void startService() {
+        Object implementor = new PersonImpl();
+        String address = "/CxfPayloadWsdlWithoutSEITest/PersonService/";
+        endpoint = Endpoint.publish(address, implementor);
+    }
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+    
+    
+
+    @Test
+    @Override
+    public void testInvokingServiceWithCamelProducer() {
+        Exchange exchange = sendJaxWsMessage("hello");
+        assertEquals(false, exchange.isFailed(), "The request should be handled sucessfully");
+        org.apache.camel.Message out = exchange.getMessage();
+        String result = out.getBody(String.class);
+        assertStringContains(result, "Bonjour");
+
+        exchange = sendJaxWsMessage("");
+        assertEquals(true, exchange.isFailed(), "We should get a fault here");
+        Throwable ex = exchange.getException();
+        assertTrue(ex instanceof SoapFault, "We should get a SoapFault here");
+    }
+
+    private Exchange sendJaxWsMessage(final String personIdString) {
+        Exchange exchange = template.send("direct:producer", new Processor() {
+            public void process(final Exchange exchange) {
+                String body = "<GetPerson xmlns=\"http://camel.apache.org/wsdl-first/types\"><personId>" + personIdString
+                              + "</personId></GetPerson>\n";
+                exchange.getIn().setBody(body);
+                exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, "GetPerson");
+            }
+        });
+        return exchange;
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setAddress("/CxfPayloadWsdlWithoutSEITest/RouterService/");
+            cxfEndpoint.setWsdlURL("classpath:person.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("schema-validation-enabled", true);
+            cxfEndpoint.setProperties(properties);
+            List<Handler> handlers = new ArrayList<Handler>();
+            handlers.add(fromHandler);
+            cxfEndpoint.setHandlers(handlers);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setAddress("http://localhost:"+ port 
+                                   + "/services/CxfPayloadWsdlWithoutSEITest/PersonService/");
+            cxfEndpoint.setWsdlURL("classpath:person.wsdl");
+            List<Handler> handlers = new ArrayList<Handler>();
+            handlers.add(toHandler);
+            cxfEndpoint.setHandlers(handlers);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("cxf:bean:routerEndpoint")
+                            .to("cxf:bean:serviceEndpoint");
+                    from("direct:producer")
+                        .to("cxf:bean:serviceEndpoint");
+                    
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfWsdlFirstPayloadModeTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfWsdlFirstPayloadModeTest.java
new file mode 100644
index 00000000000..14d18c71775
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfWsdlFirstPayloadModeTest.java
@@ -0,0 +1,148 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.wsdl;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.Endpoint;
+import jakarta.xml.ws.handler.Handler;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.soap.springboot.JaxwsTestHandler;
+import org.apache.camel.component.cxf.soap.springboot.wsdl.AbstractCxfWsdlFirstTest.ServletConfiguration;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.camel.wsdl_first.PersonImpl;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfWsdlFirstPayloadModeTest.class,
+                           CxfWsdlFirstPayloadModeTest.TestConfiguration.class,
+                           AbstractCxfWsdlFirstTest.ServletConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfWsdlFirstPayloadModeTest extends AbstractCxfWsdlFirstTest {
+
+    private QName serviceName = QName.valueOf("{http://camel.apache.org/wsdl-first}PersonService");
+    private QName endpointName = QName.valueOf("{http://camel.apache.org/wsdl-first}soap");
+    protected Endpoint endpoint;
+    
+    @BeforeEach
+    public void startService() {
+        Object implementor = new PersonImpl();
+        String address = "/CxfWsdlFirstPayloadModeTest/PersonService/";
+        endpoint = Endpoint.publish(address, implementor);
+    }
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+    
+    
+    @Override
+    @Test
+    public void testInvokingServiceWithCamelProducer() throws Exception {
+        // this test does not apply to PAYLOAD mode
+    }
+
+    @Override
+    protected void verifyJaxwsHandlers(JaxwsTestHandler fromHandler, JaxwsTestHandler toHandler) {
+        assertEquals(2, fromHandler.getFaultCount());
+        assertEquals(4, fromHandler.getMessageCount());
+        assertEquals(1, toHandler.getFaultCount());
+    }
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.camel.wsdl_first.Person.class);
+            cxfEndpoint.setAddress("/CxfWsdlFirstPayloadModeTest/RouterService/");
+            cxfEndpoint.setWsdlURL("classpath:person.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("schema-validation-enabled", true);
+            cxfEndpoint.setProperties(properties);
+            List<Handler> handlers = new ArrayList<Handler>();
+            handlers.add(fromHandler);
+            cxfEndpoint.setHandlers(handlers);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.camel.wsdl_first.Person.class);
+            cxfEndpoint.setAddress("http://localhost:" + port 
+                                   + "/services/CxfWsdlFirstPayloadModeTest/PersonService/");
+            List<Handler> handlers = new ArrayList<Handler>();
+            handlers.add(toHandler);
+            cxfEndpoint.setHandlers(handlers);
+            cxfEndpoint.setDataFormat(DataFormat.PAYLOAD);
+            return cxfEndpoint;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("cxf:bean:routerEndpoint")
+                            .to("cxf:bean:serviceEndpoint");
+                                        
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfWsdlFirstProcessorTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfWsdlFirstProcessorTest.java
new file mode 100644
index 00000000000..881d57f3c4d
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfWsdlFirstProcessorTest.java
@@ -0,0 +1,185 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.wsdl;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.Endpoint;
+import jakarta.xml.ws.Holder;
+import jakarta.xml.ws.handler.Handler;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.DataFormat;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.soap.springboot.JaxwsTestHandler;
+import org.apache.camel.component.cxf.soap.springboot.wsdl.AbstractCxfWsdlFirstTest.ServletConfiguration;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.camel.wsdl_first.PersonImpl;
+import org.apache.cxf.message.MessageContentsList;
+import org.apache.cxf.service.model.BindingOperationInfo;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfWsdlFirstProcessorTest.class,
+                           CxfWsdlFirstProcessorTest.TestConfiguration.class,
+                           AbstractCxfWsdlFirstTest.ServletConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfWsdlFirstProcessorTest extends AbstractCxfWsdlFirstTest {
+
+    private static final Logger LOG = LoggerFactory.getLogger(CxfWsdlFirstProcessorTest.class);
+    
+    private QName serviceName = QName.valueOf("{http://camel.apache.org/wsdl-first}PersonService");
+    private QName endpointName = QName.valueOf("{http://camel.apache.org/wsdl-first}soap");
+    protected Endpoint endpoint;
+    
+    @BeforeEach
+    public void startService() {
+        Object implementor = new PersonImpl();
+        String address = "/CxfWsdlFirstProcessorTest/PersonService/";
+        endpoint = Endpoint.publish(address, implementor);
+    }
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+    
+    
+    
+    @Override
+    protected void verifyJaxwsHandlers(JaxwsTestHandler fromHandler, JaxwsTestHandler toHandler) {
+        assertEquals(2, fromHandler.getFaultCount());
+        assertEquals(4, fromHandler.getMessageCount());
+        assertEquals(0, toHandler.getGetHeadersCount());
+    }
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.camel.wsdl_first.Person.class);
+            cxfEndpoint.setAddress("/CxfWsdlFirstProcessorTest/RouterService/");
+            cxfEndpoint.setWsdlURL("classpath:person.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("schema-validation-enabled", true);
+            cxfEndpoint.setProperties(properties);
+            List<Handler> handlers = new ArrayList<Handler>();
+            handlers.add(fromHandler);
+            cxfEndpoint.setHandlers(handlers);
+            cxfEndpoint.setDataFormat(DataFormat.POJO);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.camel.wsdl_first.Person.class);
+            cxfEndpoint.setAddress("http://localhost:" + port 
+                                   + "/services/CxfWsdlFirstProcessorTest/PersonService/");
+            List<Handler> handlers = new ArrayList<Handler>();
+            handlers.add(toHandler);
+            cxfEndpoint.setHandlers(handlers);
+            cxfEndpoint.setDataFormat(DataFormat.POJO);
+            return cxfEndpoint;
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("cxf:bean:routerEndpoint")
+                            .process(new Processor() {
+                                public void process(final Exchange exchange) {
+                                    LOG.info("processing exchange in camel");
+
+                                    BindingOperationInfo boi = (BindingOperationInfo) exchange.getProperty(BindingOperationInfo.class.getName());
+                                    if (boi != null) {
+                                        LOG.info("boi.isUnwrapped" + boi.isUnwrapped());
+                                    }
+                                    // Get the parameters list which element is the holder.
+                                    MessageContentsList msgList = (MessageContentsList) exchange.getIn().getBody();
+                                    Holder<String> personId = (Holder<String>) msgList.get(0);
+                                    Holder<String> ssn = (Holder<String>) msgList.get(1);
+                                    Holder<String> name = (Holder<String>) msgList.get(2);
+
+                                    if (personId.value == null || personId.value.length() == 0) {
+                                        LOG.info("person id 123, so throwing exception");
+                                        // Try to throw out the soap fault message
+                                        org.apache.camel.wsdl_first.types.UnknownPersonFault personFault
+                                                = new org.apache.camel.wsdl_first.types.UnknownPersonFault();
+                                        personFault.setPersonId("");
+                                        org.apache.camel.wsdl_first.UnknownPersonFault fault
+                                                = new org.apache.camel.wsdl_first.UnknownPersonFault("Get the null value of person name", personFault);
+                                        exchange.getMessage().setBody(fault);
+                                        return;
+                                    }
+
+                                    name.value = "Bonjour";
+                                    ssn.value = "123";
+                                    LOG.info("setting Bonjour as the response");
+                                    // Set the response message, first element is the return value of the operation,
+                                    // the others are the holders of method parameters
+                                    exchange.getMessage().setBody(new Object[] { null, personId, ssn, name });
+                                }
+                            });
+                    from("direct:producer")
+                        .to("cxf:bean:serviceEndpoint");
+                    
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfWsdlFirstTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfWsdlFirstTest.java
new file mode 100644
index 00000000000..a7090298fb3
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/CxfWsdlFirstTest.java
@@ -0,0 +1,132 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.wsdl;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.xml.namespace.QName;
+import jakarta.xml.ws.Endpoint;
+import jakarta.xml.ws.handler.Handler;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.soap.springboot.wsdl.AbstractCxfWsdlFirstTest.ServletConfiguration;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Scope;
+import org.springframework.test.annotation.DirtiesContext;
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.camel.wsdl_first.PersonImpl;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(classes = {
+                           CamelAutoConfiguration.class, 
+                           CxfWsdlFirstTest.class,
+                           CxfWsdlFirstTest.TestConfiguration.class,
+                           AbstractCxfWsdlFirstTest.ServletConfiguration.class,
+                           CxfAutoConfiguration.class
+}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class CxfWsdlFirstTest extends AbstractCxfWsdlFirstTest {
+
+    private QName serviceName = QName.valueOf("{http://camel.apache.org/wsdl-first}PersonService");
+    private QName endpointName = QName.valueOf("{http://camel.apache.org/wsdl-first}soap");
+    protected Endpoint endpoint;
+    
+    @BeforeEach
+    public void startService() {
+        Object implementor = new PersonImpl();
+        String address = "/CxfWsdlFirstTest/PersonService/";
+        endpoint = Endpoint.publish(address, implementor);
+    }
+
+    @AfterEach
+    public void stopService() {
+        if (endpoint != null) {
+            endpoint.stop();
+        }
+    }
+    
+    
+
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        CxfEndpoint routerEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.camel.wsdl_first.Person.class);
+            cxfEndpoint.setAddress("/CxfWsdlFirstTest/RouterService/");
+            cxfEndpoint.setWsdlURL("classpath:person.wsdl");
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("schema-validation-enabled", true);
+            cxfEndpoint.setProperties(properties);
+            List<Handler> handlers = new ArrayList<Handler>();
+            handlers.add(fromHandler);
+            cxfEndpoint.setHandlers(handlers);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        @Scope("prototype")
+        CxfEndpoint serviceEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(org.apache.camel.wsdl_first.Person.class);
+            cxfEndpoint.setAddress("http://localhost:" + port 
+                                   + "/services/CxfWsdlFirstTest/PersonService/");
+            List<Handler> handlers = new ArrayList<Handler>();
+            handlers.add(toHandler);
+            cxfEndpoint.setHandlers(handlers);
+            return cxfEndpoint;
+        }
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("cxf:bean:routerEndpoint")
+                            .to("cxf:bean:serviceEndpoint");
+                    from("direct:producer")
+                        .to("cxf:bean:serviceEndpoint?dataFormat=POJO");
+                    
+                }
+            };
+        }
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/OrderTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/OrderTest.java
new file mode 100644
index 00000000000..5a5f1e42cf7
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsdl/OrderTest.java
@@ -0,0 +1,156 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.wsdl;
+
+
+
+
+
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.LineNumberReader;
+
+import jakarta.xml.ws.Endpoint;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.EndpointInject;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.component.cxf.wsdl.OrderEndpoint;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        OrderTest.class,
+        OrderTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class OrderTest {
+    
+    @Autowired
+    ProducerTemplate template;
+    
+    @Autowired
+    CamelContext context;
+    
+    @EndpointInject("mock:end")
+    MockEndpoint mock;
+    
+    static int port = CXFTestSupport.getPort1();
+
+        
+    
+    @Test
+    public void testCamelWsdl() throws Exception {
+        Object body = template.sendBody("http://localhost:" + port 
+                                        + "/services" + "/camel-order/?wsdl",
+                ExchangePattern.InOut, null);
+        InputStream is = context.getTypeConverter().convertTo(InputStream.class, body);
+        checkWsdl(is);
+    }
+
+    @Test
+    public void testCxfWsdl() throws Exception {
+        Object implementor = new OrderEndpoint();
+        Endpoint.publish("/cxf-order/", implementor);
+        Object body = template.sendBody("http://localhost:" + port 
+                                        + "/services" + "/cxf-order/?wsdl",
+                ExchangePattern.InOut, null);
+        InputStream is = context.getTypeConverter().convertTo(InputStream.class, body);
+        checkWsdl(is);
+    }
+
+    public void checkWsdl(InputStream in) throws Exception {
+
+        boolean containsOrderComplexType = false;
+        LineNumberReader reader = new LineNumberReader(new InputStreamReader(in));
+        String line;
+        while ((line = reader.readLine()) != null) {
+            if (line.contains("complexType name=\"order\"")) {
+                containsOrderComplexType = true;
+                // break;
+            }
+
+        }
+
+        if (!containsOrderComplexType) {
+            throw new RuntimeException("WSDL does not contain complex type defintion for class Order");
+        }
+
+    }
+    
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        @Bean
+        CxfEndpoint orderEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(OrderEndpoint.class);
+            cxfEndpoint.setAddress("/camel-order/");
+            return cxfEndpoint;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:orderEndpoint")
+                    .transform().constant("OK")
+                    .to("mock:end");
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsrm/WSRMTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsrm/WSRMTest.java
new file mode 100644
index 00000000000..5d99fcf9885
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wsrm/WSRMTest.java
@@ -0,0 +1,194 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.wsrm;
+
+
+
+
+import javax.xml.namespace.QName;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.component.cxf.wsrm.HelloWorld;
+import org.apache.camel.component.cxf.wsrm.HelloWorldImpl;
+import org.apache.camel.component.cxf.wsrm.MessageLossSimulator;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+
+
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.ext.logging.LoggingFeature;
+import org.apache.cxf.frontend.ClientFactoryBean;
+import org.apache.cxf.frontend.ClientProxy;
+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.testutil.common.TestUtil;
+import org.apache.cxf.transport.http.HTTPConduit;
+import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
+import org.apache.cxf.ws.addressing.WSAContextUtils;
+import org.apache.cxf.ws.rm.manager.AcksPolicyType;
+import org.apache.cxf.ws.rm.manager.DestinationPolicyType;
+import org.apache.cxf.ws.rmp.v200502.RMAssertion;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        WSRMTest.class,
+        WSRMTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class WSRMTest {
+
+    private static Logger logger = LoggerFactory.getLogger(WSRMTest.class);
+    private String namespace = "http://camel.apache.org/cxf/wsrm";
+    private QName serviceName = new QName(namespace, "HelloWorldService");
+    private QName endpointName = new QName(namespace, "HelloWorldPort");
+    
+    static int port = CXFTestSupport.getPort1();
+    
+    @Test
+    public void testWSRM() throws Exception {
+        JaxWsProxyFactoryBean proxyFactory = new JaxWsProxyFactoryBean();
+        ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean();
+        clientBean.setAddress("http://localhost:" + port 
+                              + "/services/wsrm/HelloWorld");
+        clientBean.setServiceClass(HelloWorld.class);
+        clientBean.setWsdlURL(WSRMTest.class.getResource("/HelloWorld.wsdl").toString());
+        proxyFactory.getFeatures().add(new org.apache.cxf.ws.addressing.WSAddressingFeature());
+        proxyFactory.getFeatures().add(new LoggingFeature());
+        org.apache.cxf.ws.rm.feature.RMFeature rmFeature = new org.apache.cxf.ws.rm.feature.RMFeature();
+        RMAssertion.BaseRetransmissionInterval baseRetransmissionInterval = new RMAssertion.BaseRetransmissionInterval();
+        baseRetransmissionInterval.setMilliseconds(Long.valueOf(4000));
+        RMAssertion.AcknowledgementInterval acknowledgementInterval = new RMAssertion.AcknowledgementInterval();
+        acknowledgementInterval.setMilliseconds(Long.valueOf(2000));
+
+        RMAssertion rmAssertion = new RMAssertion();
+        rmAssertion.setAcknowledgementInterval(acknowledgementInterval);
+        rmAssertion.setBaseRetransmissionInterval(baseRetransmissionInterval);
+
+        AcksPolicyType acksPolicy = new AcksPolicyType();
+        acksPolicy.setIntraMessageThreshold(0);
+        DestinationPolicyType destinationPolicy = new DestinationPolicyType();
+        destinationPolicy.setAcksPolicy(acksPolicy);
+
+        rmFeature.setRMAssertion(rmAssertion);
+        rmFeature.setDestinationPolicy(destinationPolicy);
+        proxyFactory.getFeatures().add(rmFeature);
+        proxyFactory.getOutInterceptors().add(new MessageLossSimulator());
+        HelloWorld helloWorld = (HelloWorld) proxyFactory.create();
+        Client client = ClientProxy.getClient(helloWorld);
+        String decoupledEndpoint = "/wsrm/decoupled_endpoint";
+        client.getBus().setProperty(WSAContextUtils.DECOUPLED_ENDPOINT_BASE_PROPERTY, 
+                                       "http://localhost:" + port + "/services");
+        HTTPConduit hc = (HTTPConduit)(client.getConduit());
+        HTTPClientPolicy cp = hc.getClient();
+        cp.setDecoupledEndpoint(decoupledEndpoint);
+        String result = helloWorld.sayHi("world1!");
+        assertEquals("Hello world1!", result, "Get a wrong response");
+        result = helloWorld.sayHi("world2!");//second call will trigger MessageLoss and resend
+        assertEquals("Hello world2!", result, "Get a wrong response");
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        
+        @Bean("helloWorld")
+        CxfEndpoint getCxfEndpoint() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceNameAsQName(serviceName);
+            cxfEndpoint.setEndpointNameAsQName(endpointName);
+            cxfEndpoint.setServiceClass(HelloWorldImpl.class);
+            cxfEndpoint.setWsdlURL(WSRMTest.class.getResource("/HelloWorld.wsdl").toString());
+            cxfEndpoint.setAddress("/wsrm/HelloWorld");
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            cxfEndpoint.getFeatures().add(new org.apache.cxf.ws.addressing.WSAddressingFeature());
+            
+            org.apache.cxf.ws.rm.feature.RMFeature rmFeature = new org.apache.cxf.ws.rm.feature.RMFeature();
+            RMAssertion.BaseRetransmissionInterval baseRetransmissionInterval = new RMAssertion.BaseRetransmissionInterval();
+            baseRetransmissionInterval.setMilliseconds(Long.valueOf(4000));
+            RMAssertion.AcknowledgementInterval acknowledgementInterval = new RMAssertion.AcknowledgementInterval();
+            acknowledgementInterval.setMilliseconds(Long.valueOf(2000));
+
+            RMAssertion rmAssertion = new RMAssertion();
+            rmAssertion.setAcknowledgementInterval(acknowledgementInterval);
+            rmAssertion.setBaseRetransmissionInterval(baseRetransmissionInterval);
+
+            AcksPolicyType acksPolicy = new AcksPolicyType();
+            acksPolicy.setIntraMessageThreshold(0);
+            DestinationPolicyType destinationPolicy = new DestinationPolicyType();
+            destinationPolicy.setAcksPolicy(acksPolicy);
+
+            rmFeature.setRMAssertion(rmAssertion);
+            rmFeature.setDestinationPolicy(destinationPolicy);
+            cxfEndpoint.getFeatures().add(rmFeature);
+            return cxfEndpoint;
+        }
+        
+
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    from("cxf:bean:helloWorld").process(new Processor() {
+                        public void process(final Exchange exchange) throws Exception {
+                            logger.info("***** Entering Processor *******");
+                            String name = exchange.getIn().getBody(String.class);
+                            exchange.getMessage().setBody("Hello " + name);
+                            logger.info("***** Leaving Processor *******");
+                        }
+                    });
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wssecurity/CxfServer.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wssecurity/CxfServer.java
new file mode 100644
index 00000000000..fe28740b649
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wssecurity/CxfServer.java
@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.wssecurity;
+
+import java.net.URL;
+
+import org.apache.cxf.Bus;
+import org.apache.cxf.BusFactory;
+import org.apache.cxf.bus.spring.SpringBusFactory;
+
+public class CxfServer {
+
+    public CxfServer() throws Exception {
+        SpringBusFactory bf = new SpringBusFactory();
+        URL busFile = WSSecurityRouteTest.class.getResource("server/wssec.xml");
+
+        Bus bus = bf.createBus(busFile.toString());
+        BusFactory.setDefaultBus(bus);
+        BusFactory.setThreadDefaultBus(bus);
+    }
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wssecurity/WSSecurityRouteTest.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wssecurity/WSSecurityRouteTest.java
new file mode 100644
index 00000000000..7a4b641bd8f
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/component/cxf/soap/springboot/wssecurity/WSSecurityRouteTest.java
@@ -0,0 +1,319 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.soap.springboot.wssecurity;
+
+
+
+
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+
+import jakarta.xml.ws.BindingProvider;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.CXFTestSupport;
+import org.apache.camel.component.cxf.jaxws.CxfEndpoint;
+import org.apache.camel.component.cxf.spring.jaxws.CxfSpringEndpoint;
+import org.apache.camel.hello_world_soap_http.Greeter;
+import org.apache.camel.hello_world_soap_http.GreeterService;
+import org.apache.camel.spring.boot.CamelAutoConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.test.annotation.DirtiesContext;
+
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
+import org.apache.cxf.Bus;
+import org.apache.cxf.BusFactory;
+import org.apache.cxf.bus.spring.SpringBusFactory;
+import org.apache.cxf.spring.boot.autoconfigure.CxfAutoConfiguration;
+import org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor;
+
+
+@DirtiesContext
+@CamelSpringBootTest
+@SpringBootTest(
+    classes = {
+        CamelAutoConfiguration.class,
+        WSSecurityRouteTest.class,
+        WSSecurityRouteTest.TestConfiguration.class,
+        CxfAutoConfiguration.class
+    }, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
+)
+public class WSSecurityRouteTest {
+
+    static CxfServer cxfServer;
+    
+    static int port = CXFTestSupport.getPort2();
+    static int backendPort = CXFTestSupport.getPort1();
+
+    @BeforeAll
+    public static void setup() throws Exception {
+        cxfServer = new CxfServer();
+    }
+    
+    
+    @Test
+    public void testSignature() throws Exception {
+        SpringBusFactory bf = new SpringBusFactory();
+        URL busFile = WSSecurityRouteTest.class.getResource("client/wssec.xml");
+
+        Bus bus = bf.createBus(busFile.toString());
+        BusFactory.setDefaultBus(bus);
+        BusFactory.setThreadDefaultBus(bus);
+
+        GreeterService gs = new GreeterService((java.net.URL)null);
+        Greeter greeter = gs.getGreeterSignaturePort();
+
+        ((BindingProvider) greeter).getRequestContext().put(
+                BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                "http://localhost:" + port
+                     + "/services/WSSecurityRouteTest/GreeterSignaturePort");
+
+        assertEquals("Hello Security", greeter.greetMe("Security"), "Get a wrong response");
+    }
+
+    @Test
+    public void testUsernameToken() throws Exception {
+        SpringBusFactory bf = new SpringBusFactory();
+        URL busFile = WSSecurityRouteTest.class.getResource("client/wssec.xml");
+
+        Bus bus = bf.createBus(busFile.toString());
+        BusFactory.setDefaultBus(bus);
+        BusFactory.setThreadDefaultBus(bus);
+
+        GreeterService gs = new GreeterService((java.net.URL)null);
+        Greeter greeter = gs.getGreeterUsernameTokenPort();
+
+        ((BindingProvider) greeter).getRequestContext().put(
+                BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                "http://localhost:" + port
+                     + "/services/WSSecurityRouteTest/GreeterUsernameTokenPort");
+
+        assertEquals("Hello Security", greeter.greetMe("Security"), "Get a wrong response");
+    }
+
+    @Test
+    public void testEncryption() throws Exception {
+        SpringBusFactory bf = new SpringBusFactory();
+        URL busFile = WSSecurityRouteTest.class.getResource("client/wssec.xml");
+
+        Bus bus = bf.createBus(busFile.toString());
+        BusFactory.setDefaultBus(bus);
+        BusFactory.setThreadDefaultBus(bus);
+
+        GreeterService gs = new GreeterService((java.net.URL)null);
+        Greeter greeter = gs.getGreeterEncryptionPort();
+
+        ((BindingProvider) greeter).getRequestContext().put(
+                BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                "http://localhost:" + port
+                     + "/services/WSSecurityRouteTest/GreeterEncryptionPort");
+
+        assertEquals("Hello Security", greeter.greetMe("Security"), "Get a wrong response");
+    }
+
+    @Test
+    public void testSecurityPolicy() throws Exception {
+        SpringBusFactory bf = new SpringBusFactory();
+        URL busFile = WSSecurityRouteTest.class.getResource("client/wssec.xml");
+
+        Bus bus = bf.createBus(busFile.toString());
+        BusFactory.setDefaultBus(bus);
+        BusFactory.setThreadDefaultBus(bus);
+
+        GreeterService gs = new GreeterService((java.net.URL)null);
+        Greeter greeter = gs.getGreeterSecurityPolicyPort();
+
+        ((BindingProvider) greeter).getRequestContext().put(
+                BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                "http://localhost:" + port
+                     + "/services/WSSecurityRouteTest/GreeterSecurityPolicyPort");
+
+        assertEquals("Hello Security", greeter.greetMe("Security"), "Get a wrong response");
+    }
+    
+    // *************************************
+    // Config
+    // *************************************
+
+    @Configuration
+    public class TestConfiguration {
+        
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new UndertowServletWebServerFactory(port);
+        }
+        
+        @Bean
+        WSS4JInInterceptor wss4jInInterceptorSignature() {
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("action", "Signature Timestamp");
+            properties.put("signaturePropFile", "wssecurity/etc/cxfca.properties");
+            return new WSS4JInInterceptor(properties);
+        }
+        
+        @Bean
+        WSS4JInInterceptor wss4jInInterceptorUsernameToken() {
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("action", "UsernameToken");
+            properties.put("passwordCallbackClass", "org.apache.camel.component.cxf.wssecurity.server.UTPasswordCallback");
+            return new WSS4JInInterceptor(properties);
+        }
+        
+        @Bean
+        CxfEndpoint signatureRoute(WSS4JInInterceptor wss4jInInterceptorSignature) {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("/WSSecurityRouteTest/GreeterSignaturePort");
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getInInterceptors().add(wss4jInInterceptorSignature);
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "CXF_MESSAGE");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint signatureService() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("http://localhost:" + backendPort +
+                                   "/services/WSSecurityRouteTest/GreeterSignaturePortBackend");
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "CXF_MESSAGE");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint usernameTokenRoute(WSS4JInInterceptor wss4jInInterceptorUsernameToken) {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("/WSSecurityRouteTest/GreeterUsernameTokenPort");
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getInInterceptors().add(wss4jInInterceptorUsernameToken);
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "CXF_MESSAGE");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint usernameTokenService() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("http://localhost:" + backendPort +
+                                   "/services/WSSecurityRouteTest/GreeterUsernameTokenPortBackend");
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "CXF_MESSAGE");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+
+        @Bean
+        CxfEndpoint encryptionRoute() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("/WSSecurityRouteTest/GreeterEncryptionPort");
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "RAW");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint encryptionService() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("http://localhost:" + backendPort +
+                                   "/services/WSSecurityRouteTest/GreeterEncryptionPortBackend");
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "RAW");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint securityPolicyRoute() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("/WSSecurityRouteTest/GreeterSecurityPolicyPort");
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "RAW");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        CxfEndpoint securityPolicyService() {
+            CxfSpringEndpoint cxfEndpoint = new CxfSpringEndpoint();
+            cxfEndpoint.setServiceClass(org.apache.camel.hello_world_soap_http.Greeter.class);
+            cxfEndpoint.setAddress("http://localhost:" + backendPort +
+                                   "/services/WSSecurityRouteTest/GreeterSecurityPolicyPortBackend");
+            cxfEndpoint.getInInterceptors().add(new org.apache.cxf.ext.logging.LoggingInInterceptor());
+            cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.ext.logging.LoggingOutInterceptor());
+            Map<String, Object> properties = new HashMap<String, Object>();
+            properties.put("dataFormat", "RAW");
+            cxfEndpoint.setProperties(properties);
+            return cxfEndpoint;
+        }
+        
+        @Bean
+        public RouteBuilder routeBuilder() {
+            return new RouteBuilder() {
+                @Override
+                public void configure() {
+                    errorHandler(noErrorHandler());
+                    from("cxf:bean:signatureRoute")
+                    .to("cxf:bean:signatureService");
+                    
+                    from("cxf:bean:usernameTokenRoute")
+                    .to("cxf:bean:usernameTokenService");
+                    
+                    from("cxf:bean:encryptionRoute")
+                    .to("cxf:bean:encryptionService?defaultOperationName=greetMe");
+                    
+                    from("cxf:bean:securityPolicyRoute")
+                    .to("cxf:bean:securityPolicyService?defaultOperationName=greetMe");
+                }
+            };
+        }
+    }
+    
+    
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/wsdl_first/PersonImpl.java b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/wsdl_first/PersonImpl.java
new file mode 100644
index 00000000000..2dd704fd02d
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/java/org/apache/camel/wsdl_first/PersonImpl.java
@@ -0,0 +1,41 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.wsdl_first;
+
+import jakarta.jws.WebService;
+import jakarta.xml.ws.Holder;
+
+@WebService(serviceName = "PersonService",
+            targetNamespace = "http://camel.apache.org/wsdl-first",
+            endpointInterface = "org.apache.camel.wsdl_first.Person")
+public class PersonImpl implements Person {
+
+    public void getPerson(
+            Holder<String> personId, Holder<String> ssn,
+            Holder<String> name)
+            throws UnknownPersonFault {
+        if (personId.value == null || personId.value.length() == 0) {
+            org.apache.camel.wsdl_first.types.UnknownPersonFault fault
+                    = new org.apache.camel.wsdl_first.types.UnknownPersonFault();
+            fault.setPersonId(personId.value);
+            throw new UnknownPersonFault("Get the null value of person name", fault);
+        }
+        name.value = "Bonjour";
+        ssn.value = "000-000-0000";
+    }
+
+}
diff --git a/components-starter/camel-cxf-soap-starter/src/test/resources/org/apache/camel/component/cxf/soap/springboot/wssecurity/client/wssec.xml b/components-starter/camel-cxf-soap-starter/src/test/resources/org/apache/camel/component/cxf/soap/springboot/wssecurity/client/wssec.xml
new file mode 100644
index 00000000000..ca778463beb
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/resources/org/apache/camel/component/cxf/soap/springboot/wssecurity/client/wssec.xml
@@ -0,0 +1,129 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the "License"); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:cxf="http://cxf.apache.org/core"
+       xmlns:wsa="http://cxf.apache.org/ws/addressing"
+       xmlns:http="http://cxf.apache.org/transports/http/configuration"
+       xmlns:wsrm-policy="http://schemas.xmlsoap.org/ws/2005/02/rm/policy"
+       xmlns:wsrm-mgr="http://cxf.apache.org/ws/rm/manager"
+       xmlns:jaxws="http://cxf.apache.org/jaxws"
+       xmlns:p="http://cxf.apache.org/policy"
+       xsi:schemaLocation="
+       http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
+       http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
+       http://schemas.xmlsoap.org/ws/2005/02/rm/policy http://schemas.xmlsoap.org/ws/2005/02/rm/wsrm-policy.xsd
+       http://cxf.apache.org/ws/rm/manager http://cxf.apache.org/schemas/configuration/wsrm-manager.xsd
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
+       http://cxf.apache.org/policy http://cxf.apache.org/schemas/policy.xsd
+       http://www.w3.org/ns/ws-policy http://www.w3.org/2007/02/ws-policy.xsd">
+ 
+    <cxf:bus>
+        <cxf:features>
+            <cxf:logging/>
+        </cxf:features>
+    </cxf:bus>
+    
+    <jaxws:client name="{http://camel.apache.org/hello_world_soap_http}GreeterSignaturePort" createdFromAPI="true">
+       <jaxws:outInterceptors>
+            <bean class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
+                <constructor-arg>
+                    <map>
+                        <entry key="action" value="Signature Timestamp"/>
+                        <entry key="passwordCallbackClass" value="org.apache.camel.component.cxf.wssecurity.client.UTPasswordCallback"/>
+                        <entry key="user" value="alice"/>
+                        <entry key="signaturePropFile" value="wssecurity/etc/alice.properties"/>
+                        <entry key="signatureKeyIdentifier" value="DirectReference"/>
+                        <entry key="signatureParts" 
+                               value="{Element}{http://schemas.xmlsoap.org/soap/envelope/}Body;{Element}{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Timestamp"/>
+                    </map>
+                </constructor-arg>
+            </bean>
+        </jaxws:outInterceptors>
+        <jaxws:inInterceptors>
+            <bean class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
+                <constructor-arg>
+                    <map>
+                        <entry key="action" value="Signature Timestamp"/>
+                        <entry key="signaturePropFile" value="wssecurity/etc/cxfca.properties"/>
+                    </map>
+                </constructor-arg>
+            </bean>
+        </jaxws:inInterceptors>
+    </jaxws:client>
+    
+    <jaxws:client name="{http://camel.apache.org/hello_world_soap_http}GreeterUsernameTokenPort" createdFromAPI="true">
+       <jaxws:outInterceptors>
+            <bean class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
+                <constructor-arg>
+                    <map>
+                        <entry key="action" value="UsernameToken"/>
+                        <entry key="passwordCallbackClass" value="org.apache.camel.component.cxf.wssecurity.client.UTPasswordCallback"/>
+                        <entry key="user" value="abcd"/>
+                        <entry key="passwordType" value="PasswordDigest"/>
+                    </map>
+                </constructor-arg>
+            </bean>
+        </jaxws:outInterceptors>
+    </jaxws:client>
+    
+    <jaxws:client name="{http://camel.apache.org/hello_world_soap_http}GreeterEncryptionPort" createdFromAPI="true">
+       <jaxws:outInterceptors>
+            <bean class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
+                <constructor-arg>
+                    <map>
+                        <entry key="action" value="Encrypt"/>
+                        <entry key="user" value="bob"/>
+                        <entry key="encryptionPropFile" value="wssecurity/etc/bob.properties"/>
+                        <entry key="encryptionKeyIdentifier" value="IssuerSerial"/>
+                    </map>
+                </constructor-arg>
+            </bean>
+        </jaxws:outInterceptors>
+        <jaxws:inInterceptors>
+            <bean class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
+                <constructor-arg>
+                    <map>
+                        <entry key="action" value="Encrypt"/>
+                        <entry key="decryptionPropFile" value="wssecurity/etc/alice.properties"/>
+                        <entry key="passwordCallbackClass" value="org.apache.camel.component.cxf.wssecurity.client.UTPasswordCallback"/>
+                    </map>
+                </constructor-arg>
+            </bean>
+        </jaxws:inInterceptors>
+    </jaxws:client>
+    
+    <jaxws:client name="{http://camel.apache.org/hello_world_soap_http}GreeterSecurityPolicyPort" createdFromAPI="true">
+        <jaxws:properties>
+            <entry key="ws-security.username" value="abcd"/>
+            <entry key="ws-security.callback-handler" value="org.apache.camel.component.cxf.wssecurity.client.UTPasswordCallback"/>
+            <entry key="ws-security.encryption.properties" value="wssecurity/etc/bob.properties"/>
+            <entry key="ws-security.encryption.username" value="bob"/>
+        </jaxws:properties>
+        <jaxws:features>
+            <p:policies>
+                <wsp:PolicyReference xmlns:wsp="http://www.w3.org/ns/ws-policy" 
+                    URI="classpath:/org/apache/camel/component/cxf/wssecurity/encrypted-supp-token-policy.xml"/>
+            </p:policies>
+        </jaxws:features>
+    </jaxws:client>
+
+</beans>
diff --git a/components-starter/camel-cxf-soap-starter/src/test/resources/org/apache/camel/component/cxf/soap/springboot/wssecurity/server/wssec.xml b/components-starter/camel-cxf-soap-starter/src/test/resources/org/apache/camel/component/cxf/soap/springboot/wssecurity/server/wssec.xml
new file mode 100644
index 00000000000..fd9d71022fa
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/resources/org/apache/camel/component/cxf/soap/springboot/wssecurity/server/wssec.xml
@@ -0,0 +1,151 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the "License"); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:cxf="http://cxf.apache.org/core"
+       xmlns:wsa="http://cxf.apache.org/ws/addressing"
+       xmlns:http="http://cxf.apache.org/transports/http/configuration"
+       xmlns:wsrm-policy="http://schemas.xmlsoap.org/ws/2005/02/rm/policy"
+       xmlns:wsrm-mgr="http://cxf.apache.org/ws/rm/manager"
+       xmlns:jaxws="http://cxf.apache.org/jaxws"
+       xmlns:p="http://cxf.apache.org/policy"
+       xsi:schemaLocation="
+       http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
+       http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
+       http://schemas.xmlsoap.org/ws/2005/02/rm/policy http://schemas.xmlsoap.org/ws/2005/02/rm/wsrm-policy.xsd
+       http://cxf.apache.org/ws/rm/manager http://cxf.apache.org/schemas/configuration/wsrm-manager.xsd
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
+       http://cxf.apache.org/policy http://cxf.apache.org/schemas/policy.xsd
+       http://www.w3.org/ns/ws-policy http://www.w3.org/2007/02/ws-policy.xsd">
+ 
+    <cxf:bus>
+        <cxf:features>
+            <cxf:logging/>
+        </cxf:features>
+    </cxf:bus>
+    
+    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>
+    
+    <jaxws:endpoint xmlns:s="http://camel.apache.org/hello_world_soap_http" 
+        id="Signature" 
+        address="http://localhost:${CXFTestSupport.port1}/services/WSSecurityRouteTest/GreeterSignaturePortBackend" 
+        serviceName="s:GreeterService" 
+        endpointName="s:GreeterSignaturePort" 
+        implementor="org.apache.camel.component.cxf.wssecurity.server.GreeterImpl" 
+        wsdlLocation="hello_world_wssec.wsdl">
+        <jaxws:outInterceptors>
+            <bean class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
+                <constructor-arg>
+                    <map>
+                        <entry key="action" value="Signature Timestamp"/>
+                        <entry key="passwordCallbackClass" value="org.apache.camel.component.cxf.wssecurity.server.UTPasswordCallback"/>
+                        <entry key="user" value="bob"/>
+                        <entry key="signaturePropFile" value="wssecurity/etc/bob.properties"/>
+                        <entry key="signatureKeyIdentifier" value="DirectReference"/>
+                        <entry key="signatureParts" 
+                               value="{Element}{http://schemas.xmlsoap.org/soap/envelope/}Body;{Element}{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Timestamp"/>
+                    </map>
+                </constructor-arg>
+            </bean>
+        </jaxws:outInterceptors>
+        <jaxws:inInterceptors>
+            <bean class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
+                <constructor-arg>
+                    <map>
+                        <entry key="action" value="Signature Timestamp"/>
+                        <entry key="signaturePropFile" value="wssecurity/etc/cxfca.properties"/>
+                    </map>
+                </constructor-arg>
+            </bean>
+        </jaxws:inInterceptors>
+    </jaxws:endpoint>
+    
+    <jaxws:endpoint xmlns:s="http://camel.apache.org/hello_world_soap_http" 
+        id="UsernameToken" 
+        address="http://localhost:${CXFTestSupport.port1}/services/WSSecurityRouteTest/GreeterUsernameTokenPortBackend" 
+        serviceName="s:GreeterService" 
+        endpointName="s:GreeterUsernameTokenPort" 
+        implementor="org.apache.camel.component.cxf.wssecurity.server.GreeterImpl" 
+        wsdlLocation="hello_world_wssec.wsdl">
+        <jaxws:inInterceptors>
+            <bean class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
+                <constructor-arg>
+                    <map>
+                        <entry key="action" value="UsernameToken"/>
+                        <entry key="passwordCallbackClass" value="org.apache.camel.component.cxf.wssecurity.server.UTPasswordCallback"/>
+                    </map>
+                </constructor-arg>
+            </bean>
+        </jaxws:inInterceptors>
+    </jaxws:endpoint>
+    
+    <jaxws:endpoint xmlns:s="http://camel.apache.org/hello_world_soap_http" 
+        id="Encryption" 
+        address="http://localhost:${CXFTestSupport.port1}/services/WSSecurityRouteTest/GreeterEncryptionPortBackend" 
+        serviceName="s:GreeterService" 
+        endpointName="s:GreeterEncryptionPort" 
+        implementor="org.apache.camel.component.cxf.wssecurity.server.GreeterImpl" 
+        wsdlLocation="hello_world_wssec.wsdl">
+        <jaxws:outInterceptors>
+            <bean class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
+                <constructor-arg>
+                    <map>
+                        <entry key="action" value="Encrypt"/>
+                        <entry key="user" value="alice"/>
+                        <entry key="encryptionPropFile" value="wssecurity/etc/alice.properties"/>
+                        <entry key="encryptionKeyIdentifier" value="IssuerSerial"/>
+                    </map>
+                </constructor-arg>
+            </bean>
+        </jaxws:outInterceptors>
+        <jaxws:inInterceptors>
+            <bean class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
+                <constructor-arg>
+                    <map>
+                        <entry key="action" value="Encrypt"/>
+                        <entry key="decryptionPropFile" value="wssecurity/etc/bob.properties"/>
+                        <entry key="passwordCallbackClass" value="org.apache.camel.component.cxf.wssecurity.server.UTPasswordCallback"/>
+                    </map>
+                </constructor-arg>
+            </bean>
+        </jaxws:inInterceptors>
+    </jaxws:endpoint>
+    
+    <jaxws:endpoint xmlns:s="http://camel.apache.org/hello_world_soap_http" 
+        id="SecurityPolicy" 
+        address="http://localhost:${CXFTestSupport.port1}/services/WSSecurityRouteTest/GreeterSecurityPolicyPortBackend" 
+        serviceName="s:GreeterService" 
+        endpointName="s:GreeterSecurityPolicyPort" 
+        implementor="org.apache.camel.component.cxf.wssecurity.server.GreeterImpl" 
+        wsdlLocation="hello_world_wssec.wsdl">
+        <jaxws:properties>
+            <entry key="ws-security.callback-handler" value="org.apache.camel.component.cxf.wssecurity.client.UTPasswordCallback"/>
+            <entry key="ws-security.signature.properties" value="wssecurity/etc/bob.properties"/>
+        </jaxws:properties>
+        <jaxws:features>
+            <p:policies>
+                <wsp:PolicyReference xmlns:wsp="http://www.w3.org/ns/ws-policy" 
+                    URI="classpath:/org/apache/camel/component/cxf/wssecurity/encrypted-supp-token-policy.xml"/>
+            </p:policies>
+        </jaxws:features>
+    </jaxws:endpoint>
+
+</beans>
diff --git a/components-starter/camel-cxf-soap-starter/src/test/resources/routes/MultiPartTest.xml b/components-starter/camel-cxf-soap-starter/src/test/resources/routes/MultiPartTest.xml
new file mode 100644
index 00000000000..58f41db8a34
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/resources/routes/MultiPartTest.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the "License"); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:cxf="http://camel.apache.org/schema/cxf/jaxws"
+       xsi:schemaLocation="
+         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+         http://camel.apache.org/schema/cxf/jaxws http://camel.apache.org/schema/cxf/jaxws/camel-cxf.xsd
+         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
+      ">
+      
+    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>
+    <import resource="classpath:META-INF/cxf/cxf.xml"/>
+  
+    <cxf:cxfEndpoint id="routerEndpoint"
+        address="/CXFMultiPartTest/CamelContext/RouterPort" 
+        wsdlURL="classpath:/MultiPartTest.wsdl"
+        endpointName="s:MultiPartInvokePort"
+        serviceName="s:MultiPartInvokeService"
+        xmlns:s="http://camel.apache.org/cxf/multipart">
+
+        <cxf:outInterceptors>
+            <bean class="org.apache.camel.component.cxf.WriteXmlDeclarationInterceptor"/>
+        </cxf:outInterceptors>
+   </cxf:cxfEndpoint>
+  
+    <cxf:cxfEndpoint id="serviceEndpoint" 
+        address="http://localhost:${CXFTestSupport.port1}/CXFMultiPartTest/SoapContext/SoapPort"
+        wsdlURL="classpath:MultiPartTest.wsdl"
+        endpointName="s:MultiPartInvokePort"
+        serviceName="s:MultiPartInvokeService"
+        xmlns:s="http://camel.apache.org/cxf/multipart" />
+
+    <bean id="noErrorHandler" class="org.apache.camel.builder.NoErrorHandlerBuilder"/>
+	
+</beans>
diff --git a/components-starter/camel-cxf-soap-starter/src/test/resources/routes/multipartRoute.xml b/components-starter/camel-cxf-soap-starter/src/test/resources/routes/multipartRoute.xml
new file mode 100644
index 00000000000..d1f1ce13e12
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/resources/routes/multipartRoute.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the "License"); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+
+    <!-- START SNIPPET: e1 -->
+    <routes id="camel" xmlns="http://camel.apache.org/schema/spring">
+        <route errorHandlerRef="noErrorHandler">
+            <from uri="cxf:bean:routerEndpoint?dataFormat=PAYLOAD" />
+            <to uri="cxf:bean:serviceEndpoint?dataFormat=PAYLOAD" />
+        </route>
+    </routes>
diff --git a/components-starter/camel-cxf-soap-starter/src/test/resources/routes/soap-security.xml b/components-starter/camel-cxf-soap-starter/src/test/resources/routes/soap-security.xml
new file mode 100644
index 00000000000..57b1c40c019
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/resources/routes/soap-security.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the "License"); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns="http://www.springframework.org/schema/beans"
+		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+		xmlns:cxf="http://camel.apache.org/schema/cxf/jaxws"
+		xmlns:jaxws="http://cxf.apache.org/jaxws"
+		xsi:schemaLocation="
+         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+         http://camel.apache.org/schema/cxf/jaxws http://camel.apache.org/schema/cxf/jaxws/camel-cxf.xsd
+		 http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">
+
+	<jaxws:endpoint id="greetingService" address="/greeting-service" implementor="org.apache.camel.component.cxf.security.GreetingServiceImpl">
+
+		<jaxws:inInterceptors>
+			<bean class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
+				<property name="properties">
+					<map>
+						<entry key="action" value="UsernameToken"/>
+						<entry key="passwordType" value="PasswordText"/>
+					</map>
+				</property>
+			</bean>
+			<bean class="org.apache.cxf.interceptor.security.JAASLoginInterceptor">
+				<property name="contextName" value="simple-jaas"/>
+			</bean>
+		</jaxws:inInterceptors>
+
+		<jaxws:properties>
+			<entry key="ws-security.validate.token" value="false"/>
+		</jaxws:properties>
+	</jaxws:endpoint>
+</beans>
diff --git a/components-starter/camel-cxf-soap-starter/src/test/resources/simple-jaas.conf b/components-starter/camel-cxf-soap-starter/src/test/resources/simple-jaas.conf
new file mode 100644
index 00000000000..5c0ae3156d4
--- /dev/null
+++ b/components-starter/camel-cxf-soap-starter/src/test/resources/simple-jaas.conf
@@ -0,0 +1,19 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+simple-jaas{
+  org.apache.camel.component.cxf.security.jaas.SimpleLoginModule required;
+};
-- 
2.46.0

